
plataforma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f8c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008174  08008174  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800817c  0800817c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08008184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000040  080081c4  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080081c4  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001412d  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2a  00000000  00000000  0003419d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00036ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00037e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002241e  00000000  00000000  00038cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138b4  00000000  00000000  0005b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf16f  00000000  00000000  0006e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013db11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  0013db64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000040 	.word	0x20000040
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800813c 	.word	0x0800813c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000044 	.word	0x20000044
 8000204:	0800813c 	.word	0x0800813c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96e 	b.w	8000d88 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	468c      	mov	ip, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8083 	bne.w	8000bda <__udivmoddi4+0x116>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d947      	bls.n	8000b6a <__udivmoddi4+0xa6>
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	b142      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	f1c2 0020 	rsb	r0, r2, #32
 8000ae4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	4097      	lsls	r7, r2
 8000aec:	ea40 0c01 	orr.w	ip, r0, r1
 8000af0:	4094      	lsls	r4, r2
 8000af2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fbbc f6f8 	udiv	r6, ip, r8
 8000afc:	fa1f fe87 	uxth.w	lr, r7
 8000b00:	fb08 c116 	mls	r1, r8, r6, ip
 8000b04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b08:	fb06 f10e 	mul.w	r1, r6, lr
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d909      	bls.n	8000b24 <__udivmoddi4+0x60>
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b16:	f080 8119 	bcs.w	8000d4c <__udivmoddi4+0x288>
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	f240 8116 	bls.w	8000d4c <__udivmoddi4+0x288>
 8000b20:	3e02      	subs	r6, #2
 8000b22:	443b      	add	r3, r7
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b38:	45a6      	cmp	lr, r4
 8000b3a:	d909      	bls.n	8000b50 <__udivmoddi4+0x8c>
 8000b3c:	193c      	adds	r4, r7, r4
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b42:	f080 8105 	bcs.w	8000d50 <__udivmoddi4+0x28c>
 8000b46:	45a6      	cmp	lr, r4
 8000b48:	f240 8102 	bls.w	8000d50 <__udivmoddi4+0x28c>
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	443c      	add	r4, r7
 8000b50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b54:	eba4 040e 	sub.w	r4, r4, lr
 8000b58:	2600      	movs	r6, #0
 8000b5a:	b11d      	cbz	r5, 8000b64 <__udivmoddi4+0xa0>
 8000b5c:	40d4      	lsrs	r4, r2
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e9c5 4300 	strd	r4, r3, [r5]
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	b902      	cbnz	r2, 8000b6e <__udivmoddi4+0xaa>
 8000b6c:	deff      	udf	#255	; 0xff
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d150      	bne.n	8000c18 <__udivmoddi4+0x154>
 8000b76:	1bcb      	subs	r3, r1, r7
 8000b78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b7c:	fa1f f887 	uxth.w	r8, r7
 8000b80:	2601      	movs	r6, #1
 8000b82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b86:	0c21      	lsrs	r1, r4, #16
 8000b88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb08 f30c 	mul.w	r3, r8, ip
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0xe4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0xe2>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	f200 80e9 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1ac9      	subs	r1, r1, r3
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x10c>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x10a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80d9 	bhi.w	8000d80 <__udivmoddi4+0x2bc>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e7bf      	b.n	8000b5a <__udivmoddi4+0x96>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0x12e>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	f000 80b1 	beq.w	8000d46 <__udivmoddi4+0x282>
 8000be4:	2600      	movs	r6, #0
 8000be6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bea:	4630      	mov	r0, r6
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	fab3 f683 	clz	r6, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d14a      	bne.n	8000c90 <__udivmoddi4+0x1cc>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0x140>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80b8 	bhi.w	8000d74 <__udivmoddi4+0x2b0>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb61 0103 	sbc.w	r1, r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	468c      	mov	ip, r1
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d0a8      	beq.n	8000b64 <__udivmoddi4+0xa0>
 8000c12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c16:	e7a5      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000c18:	f1c2 0320 	rsb	r3, r2, #32
 8000c1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c20:	4097      	lsls	r7, r2
 8000c22:	fa01 f002 	lsl.w	r0, r1, r2
 8000c26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2a:	40d9      	lsrs	r1, r3
 8000c2c:	4330      	orrs	r0, r6
 8000c2e:	0c03      	lsrs	r3, r0, #16
 8000c30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c34:	fa1f f887 	uxth.w	r8, r7
 8000c38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb06 f108 	mul.w	r1, r6, r8
 8000c44:	4299      	cmp	r1, r3
 8000c46:	fa04 f402 	lsl.w	r4, r4, r2
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x19c>
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c52:	f080 808d 	bcs.w	8000d70 <__udivmoddi4+0x2ac>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 808a 	bls.w	8000d70 <__udivmoddi4+0x2ac>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	443b      	add	r3, r7
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b281      	uxth	r1, r0
 8000c64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c70:	fb00 f308 	mul.w	r3, r0, r8
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x1c4>
 8000c78:	1879      	adds	r1, r7, r1
 8000c7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c7e:	d273      	bcs.n	8000d68 <__udivmoddi4+0x2a4>
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d971      	bls.n	8000d68 <__udivmoddi4+0x2a4>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4439      	add	r1, r7
 8000c88:	1acb      	subs	r3, r1, r3
 8000c8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c8e:	e778      	b.n	8000b82 <__udivmoddi4+0xbe>
 8000c90:	f1c6 0c20 	rsb	ip, r6, #32
 8000c94:	fa03 f406 	lsl.w	r4, r3, r6
 8000c98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ca2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000caa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	0c3b      	lsrs	r3, r7, #16
 8000cb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb6:	fa1f f884 	uxth.w	r8, r4
 8000cba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000cc6:	458a      	cmp	sl, r1
 8000cc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000ccc:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x220>
 8000cd2:	1861      	adds	r1, r4, r1
 8000cd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd8:	d248      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000cda:	458a      	cmp	sl, r1
 8000cdc:	d946      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000cde:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce2:	4421      	add	r1, r4
 8000ce4:	eba1 010a 	sub.w	r1, r1, sl
 8000ce8:	b2bf      	uxth	r7, r7
 8000cea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cf6:	fb00 f808 	mul.w	r8, r0, r8
 8000cfa:	45b8      	cmp	r8, r7
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x24a>
 8000cfe:	19e7      	adds	r7, r4, r7
 8000d00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d04:	d22e      	bcs.n	8000d64 <__udivmoddi4+0x2a0>
 8000d06:	45b8      	cmp	r8, r7
 8000d08:	d92c      	bls.n	8000d64 <__udivmoddi4+0x2a0>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4427      	add	r7, r4
 8000d0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d12:	eba7 0708 	sub.w	r7, r7, r8
 8000d16:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1a:	454f      	cmp	r7, r9
 8000d1c:	46c6      	mov	lr, r8
 8000d1e:	4649      	mov	r1, r9
 8000d20:	d31a      	bcc.n	8000d58 <__udivmoddi4+0x294>
 8000d22:	d017      	beq.n	8000d54 <__udivmoddi4+0x290>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x27a>
 8000d26:	ebb3 020e 	subs.w	r2, r3, lr
 8000d2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d32:	40f2      	lsrs	r2, r6
 8000d34:	ea4c 0202 	orr.w	r2, ip, r2
 8000d38:	40f7      	lsrs	r7, r6
 8000d3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	462e      	mov	r6, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e70b      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0x60>
 8000d50:	4618      	mov	r0, r3
 8000d52:	e6fd      	b.n	8000b50 <__udivmoddi4+0x8c>
 8000d54:	4543      	cmp	r3, r8
 8000d56:	d2e5      	bcs.n	8000d24 <__udivmoddi4+0x260>
 8000d58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d60:	3801      	subs	r0, #1
 8000d62:	e7df      	b.n	8000d24 <__udivmoddi4+0x260>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e7d2      	b.n	8000d0e <__udivmoddi4+0x24a>
 8000d68:	4660      	mov	r0, ip
 8000d6a:	e78d      	b.n	8000c88 <__udivmoddi4+0x1c4>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e7b9      	b.n	8000ce4 <__udivmoddi4+0x220>
 8000d70:	4666      	mov	r6, ip
 8000d72:	e775      	b.n	8000c60 <__udivmoddi4+0x19c>
 8000d74:	4630      	mov	r0, r6
 8000d76:	e74a      	b.n	8000c0e <__udivmoddi4+0x14a>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	4439      	add	r1, r7
 8000d7e:	e713      	b.n	8000ba8 <__udivmoddi4+0xe4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	e724      	b.n	8000bd0 <__udivmoddi4+0x10c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <InicializaBuffersComunicaciones>:
	//HAL_UART_Transmit(&huart2, buf, lon,50 );
}*/


void InicializaBuffersComunicaciones(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	 * or P, press. tiempo es un variable temporal en múltiplos de 100ms.
	 *
	 * La recepción es más simple, pues sólo recibe un byte que se guarda en
	 * bt_command
	 * */
	com.pr=0;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <InicializaBuffersComunicaciones+0x3c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	com.pw=0;
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <InicializaBuffersComunicaciones+0x3c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	com.uart_tx_busy=0;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <InicializaBuffersComunicaciones+0x3c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	com.bt_command=0;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <InicializaBuffersComunicaciones+0x3c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
	com.np_buffer=0;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <InicializaBuffersComunicaciones+0x3c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	/********************************/
	//Esta variable indica que el buffer de tx del audio está ocupado
	audio.uart_tx_busy=0;
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <InicializaBuffersComunicaciones+0x40>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	73da      	strb	r2, [r3, #15]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200000bc 	.word	0x200000bc
 8000dcc:	2000014c 	.word	0x2000014c

08000dd0 <GestorComunicaciones>:


void GestorComunicaciones(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	 *
	 *
	 * */
	uint8_t lon;
	static uint8_t primera;
	if(primera==0)
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <GestorComunicaciones+0xbc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d109      	bne.n	8000df2 <GestorComunicaciones+0x22>
	{
		/*Esta parte se ejecuta solo una vez, e inicializa las variables además
		 * de activar la interrupción por recepción.*/
		InicializaBuffersComunicaciones();
 8000dde:	f7ff ffd5 	bl	8000d8c <InicializaBuffersComunicaciones>
		HAL_UART_Receive_IT(&huart1, &com.bt_command, sizeof(uint8_t));
 8000de2:	2201      	movs	r2, #1
 8000de4:	492a      	ldr	r1, [pc, #168]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000de6:	482b      	ldr	r0, [pc, #172]	; (8000e94 <GestorComunicaciones+0xc4>)
 8000de8:	f006 f9b5 	bl	8007156 <HAL_UART_Receive_IT>
		primera=1;
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <GestorComunicaciones+0xbc>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
	 * y la COLA de transmisión contiene paquetes, se calcula el tamaño de los mismos
	 * y se transmite por DMA, volviendo a poner activo el banderín de UART ocupada
	 * El puntero com.pr determina cual es el paquete a transmitir. Cuando se haya
	 * completado la transmisión, salta la rutina de interrupción de TX que se encarga
	 * de borrar el banderín e incrementar el com.pr hacia el siguiente paquete.*/
	if(!com.uart_tx_busy)
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000df4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d12b      	bne.n	8000e54 <GestorComunicaciones+0x84>
	{
		if(com.np_buffer>0)
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d026      	beq.n	8000e54 <GestorComunicaciones+0x84>
		{
			lon=LonCad(com.buf[com.pr]);
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000e08:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f94a 	bl	80010b8 <LonCad>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
			HAL_UART_Transmit_DMA(&huart1, com.buf[com.pr], lon );
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000e2a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	b292      	uxth	r2, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <GestorComunicaciones+0xc4>)
 8000e48:	f006 f9b6 	bl	80071b8 <HAL_UART_Transmit_DMA>
			com.uart_tx_busy=1;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		}
	}

	/*Igual que el if anterior, pero con np de la estructura audio*/
	if(!audio.uart_tx_busy)
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <GestorComunicaciones+0xc8>)
 8000e56:	7bdb      	ldrb	r3, [r3, #15]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10b      	bne.n	8000e74 <GestorComunicaciones+0xa4>
	{
		if(audio.np>0)
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <GestorComunicaciones+0xc8>)
 8000e5e:	7c1b      	ldrb	r3, [r3, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d007      	beq.n	8000e74 <GestorComunicaciones+0xa4>
		{
			HAL_UART_Transmit_DMA(&huart3,audio.buf, 10);
 8000e64:	220a      	movs	r2, #10
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <GestorComunicaciones+0xcc>)
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <GestorComunicaciones+0xd0>)
 8000e6a:	f006 f9a5 	bl	80071b8 <HAL_UART_Transmit_DMA>
			audio.uart_tx_busy=1;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <GestorComunicaciones+0xc8>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	73da      	strb	r2, [r3, #15]
		}
	}

	//Analizamos continuamente el estado de la conexión Bluetooth
	com.bt_state= HAL_GPIO_ReadPin(BT_State_GPIO_Port, BT_State_Pin);
 8000e74:	2108      	movs	r1, #8
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <GestorComunicaciones+0xd4>)
 8000e78:	f004 f81e 	bl	8004eb8 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <GestorComunicaciones+0xc0>)
 8000e82:	705a      	strb	r2, [r3, #1]
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000005c 	.word	0x2000005c
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	20000370 	.word	0x20000370
 8000e98:	2000014c 	.word	0x2000014c
 8000e9c:	20000150 	.word	0x20000150
 8000ea0:	20000224 	.word	0x20000224
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <TransmiteEvento>:

void TransmiteEvento(uint8_t tipo,uint8_t state)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	 *
	 */
      uint8_t lon,i;

      uint8_t tiempochar[8];   //Tiempo transcurrido  en Asci
      if(com.np_buffer < 4 )
 8000eb8:	4b62      	ldr	r3, [pc, #392]	; (8001044 <TransmiteEvento+0x19c>)
 8000eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	f200 80bc 	bhi.w	800103c <TransmiteEvento+0x194>
      {
    	  //Hay una COLA de 4 paquetes para transmitir. El número de datos en la COLA
    	  //viene dado por np_buffer
          Bin2Ascii (tick.tiempo_med, tiempochar); //Convertimos tiempo en ASCII
 8000ec4:	4b60      	ldr	r3, [pc, #384]	; (8001048 <TransmiteEvento+0x1a0>)
 8000ec6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ec8:	f107 020c 	add.w	r2, r7, #12
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f8bc 	bl	800104c <Bin2Ascii>
          //Se prepara el paquete a transmitir que se guarda en la posicion
          //pw de la COLA
          lon=LonCad(tiempochar);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f8ed 	bl	80010b8 <LonCad>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	75bb      	strb	r3, [r7, #22]
          switch(tipo)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d024      	beq.n	8000f32 <TransmiteEvento+0x8a>
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	dc31      	bgt.n	8000f50 <TransmiteEvento+0xa8>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <TransmiteEvento+0x4e>
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d00f      	beq.n	8000f14 <TransmiteEvento+0x6c>
 8000ef4:	e02c      	b.n	8000f50 <TransmiteEvento+0xa8>
          {
            case 0: com.buf[com.pw][0]='S'; break;
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <TransmiteEvento+0x19c>)
 8000ef8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000efc:	461a      	mov	r2, r3
 8000efe:	4951      	ldr	r1, [pc, #324]	; (8001044 <TransmiteEvento+0x19c>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	2253      	movs	r2, #83	; 0x53
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e01d      	b.n	8000f50 <TransmiteEvento+0xa8>
            case 1: com.buf[com.pw][0]='P'; break;
 8000f14:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <TransmiteEvento+0x19c>)
 8000f16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4949      	ldr	r1, [pc, #292]	; (8001044 <TransmiteEvento+0x19c>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	2250      	movs	r2, #80	; 0x50
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e00e      	b.n	8000f50 <TransmiteEvento+0xa8>
            case 2: com.buf[com.pw][0]='M'; break;
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <TransmiteEvento+0x19c>)
 8000f34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4942      	ldr	r1, [pc, #264]	; (8001044 <TransmiteEvento+0x19c>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	3302      	adds	r3, #2
 8000f4a:	224d      	movs	r2, #77	; 0x4d
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	bf00      	nop
          }
          com.buf[com.pw][1]='0'+state;
 8000f50:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <TransmiteEvento+0x19c>)
 8000f52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f56:	461a      	mov	r2, r3
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	3330      	adds	r3, #48	; 0x30
 8000f5c:	b2d8      	uxtb	r0, r3
 8000f5e:	4939      	ldr	r1, [pc, #228]	; (8001044 <TransmiteEvento+0x19c>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	4602      	mov	r2, r0
 8000f70:	701a      	strb	r2, [r3, #0]
          com.buf[com.pw][2]=',';
 8000f72:	4b34      	ldr	r3, [pc, #208]	; (8001044 <TransmiteEvento+0x19c>)
 8000f74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4932      	ldr	r1, [pc, #200]	; (8001044 <TransmiteEvento+0x19c>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	222c      	movs	r2, #44	; 0x2c
 8000f8c:	701a      	strb	r2, [r3, #0]
          for(i=0;i<lon;i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	e01a      	b.n	8000fca <TransmiteEvento+0x122>
              com.buf[com.pw][2+lon-i] = tiempochar[i];
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <TransmiteEvento+0x19c>)
 8000f98:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8000f9c:	7db9      	ldrb	r1, [r7, #22]
 8000f9e:	1c88      	adds	r0, r1, #2
 8000fa0:	7df9      	ldrb	r1, [r7, #23]
 8000fa2:	1a41      	subs	r1, r0, r1
 8000fa4:	f107 0018 	add.w	r0, r7, #24
 8000fa8:	4403      	add	r3, r0
 8000faa:	f813 4c0c 	ldrb.w	r4, [r3, #-12]
 8000fae:	4825      	ldr	r0, [pc, #148]	; (8001044 <TransmiteEvento+0x19c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	4403      	add	r3, r0
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	701a      	strb	r2, [r3, #0]
          for(i=0;i<lon;i++)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	75fb      	strb	r3, [r7, #23]
 8000fca:	7dfa      	ldrb	r2, [r7, #23]
 8000fcc:	7dbb      	ldrb	r3, [r7, #22]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d3e0      	bcc.n	8000f94 <TransmiteEvento+0xec>
          com.buf[com.pw][lon+3]='x';
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <TransmiteEvento+0x19c>)
 8000fd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000fd8:	461a      	mov	r2, r3
 8000fda:	7dbb      	ldrb	r3, [r7, #22]
 8000fdc:	1cd9      	adds	r1, r3, #3
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <TransmiteEvento+0x19c>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	4403      	add	r3, r0
 8000fec:	440b      	add	r3, r1
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2278      	movs	r2, #120	; 0x78
 8000ff2:	701a      	strb	r2, [r3, #0]
          //buf[pw][lon+4]=' ';

          com.buf[com.pw][lon+4]=0;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <TransmiteEvento+0x19c>)
 8000ff6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7dbb      	ldrb	r3, [r7, #22]
 8000ffe:	1d19      	adds	r1, r3, #4
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <TransmiteEvento+0x19c>)
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	4403      	add	r3, r0
 800100e:	440b      	add	r3, r1
 8001010:	3302      	adds	r3, #2
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
          //Se procede a incrementar el puntero de escritura hacia la siguiente posicion
          //de la COLA
          com.pw = (com.pw+1) & (TAM_BUF_COMUNICACIONES-1);
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <TransmiteEvento+0x19c>)
 8001018:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800101c:	3301      	adds	r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <TransmiteEvento+0x19c>)
 8001028:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          com.np_buffer++;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <TransmiteEvento+0x19c>)
 800102e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001032:	3301      	adds	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b03      	ldr	r3, [pc, #12]	; (8001044 <TransmiteEvento+0x19c>)
 8001038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	200000bc 	.word	0x200000bc
 8001048:	20000118 	.word	0x20000118

0800104c <Bin2Ascii>:
}



void Bin2Ascii (uint16_t num, uint8_t *cad)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	80fb      	strh	r3, [r7, #6]
	uint16_t resto , coc;
	uint16_t pos = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	81fb      	strh	r3, [r7, #14]
	do{
		coc = num/10;
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <Bin2Ascii+0x68>)
 8001060:	fba2 2303 	umull	r2, r3, r2, r3
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	81bb      	strh	r3, [r7, #12]
		resto = num%10;
 8001068:	88fa      	ldrh	r2, [r7, #6]
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <Bin2Ascii+0x68>)
 800106c:	fba3 1302 	umull	r1, r3, r3, r2
 8001070:	08d9      	lsrs	r1, r3, #3
 8001072:	460b      	mov	r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	817b      	strh	r3, [r7, #10]
		cad[pos] = resto+'0';
 800107e:	897b      	ldrh	r3, [r7, #10]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	440b      	add	r3, r1
 8001088:	3230      	adds	r2, #48	; 0x30
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
		pos+=1;
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	3301      	adds	r3, #1
 8001092:	81fb      	strh	r3, [r7, #14]
		num=coc;
 8001094:	89bb      	ldrh	r3, [r7, #12]
 8001096:	80fb      	strh	r3, [r7, #6]
	}while(coc !=0);
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1de      	bne.n	800105c <Bin2Ascii+0x10>
	cad[pos]=0;
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	cccccccd 	.word	0xcccccccd

080010b8 <LonCad>:

uint8_t LonCad(uint8_t *cad)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	uint8_t lon=0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
	while(cad[lon]!=0)
 80010c4:	e002      	b.n	80010cc <LonCad+0x14>
		lon++;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
	while(cad[lon]!=0)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f6      	bne.n	80010c6 <LonCad+0xe>
	return lon;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	/*Cada vez que se recibe un dato por el puerto serie, se almacena en la
	 * variable bt_command*/
	if(huart->Instance == USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a05      	ldr	r2, [pc, #20]	; (800110c <HAL_UART_RxCpltCallback+0x24>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d104      	bne.n	8001104 <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(huart, &com.bt_command, sizeof(uint8_t));
 80010fa:	2201      	movs	r2, #1
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <HAL_UART_RxCpltCallback+0x28>)
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f006 f829 	bl	8007156 <HAL_UART_Receive_IT>
	}
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40011000 	.word	0x40011000
 8001110:	200000bc 	.word	0x200000bc

08001114 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef  *huart){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	/*
	 * Cuando se completa la transmisión de un paquete, salta esta interrupción
	 * Aquí se desactiva el banderín de uart_tx_busy, se incrementa módulo 4 el pr
	 * y se decrecemnta el número de elementos que hay almacenados en la COLA
	 * */
      if(huart->Instance == USART1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_UART_TxCpltCallback+0x64>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d116      	bne.n	8001154 <HAL_UART_TxCpltCallback+0x40>
      {
            //if(np_buffer>0)
            //{
                com.uart_tx_busy=0;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_TxCpltCallback+0x68>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            	com.np_buffer--;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_UART_TxCpltCallback+0x68>)
 8001130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001134:	3b01      	subs	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_UART_TxCpltCallback+0x68>)
 800113a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                com.pr= (com.pr+1)&(TAM_BUF_COMUNICACIONES-1);
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_UART_TxCpltCallback+0x68>)
 8001140:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001144:	3301      	adds	r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_UART_TxCpltCallback+0x68>)
 8001150:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

          //HAL_UART_Transmit_IT(huart, &bt_command, sizeof(uint8_t));

      }

      if(huart->Instance == USART3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_UART_TxCpltCallback+0x6c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d105      	bne.n	800116a <HAL_UART_TxCpltCallback+0x56>
      {
    	  audio.uart_tx_busy=0;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_UART_TxCpltCallback+0x70>)
 8001160:	2200      	movs	r2, #0
 8001162:	73da      	strb	r2, [r3, #15]
    	  audio.np=0;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_UART_TxCpltCallback+0x70>)
 8001166:	2200      	movs	r2, #0
 8001168:	741a      	strb	r2, [r3, #16]
      }

}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40011000 	.word	0x40011000
 800117c:	200000bc 	.word	0x200000bc
 8001180:	40004800 	.word	0x40004800
 8001184:	2000014c 	.word	0x2000014c

08001188 <GestorInterfaz>:
GPIO_TypeDef *port_led[2]={Led_amarillo_GPIO_Port,Led_verde_GPIO_Port};
uint16_t pin_led[2] ={Led_amarillo_Pin, Led_verde_Pin};


void GestorInterfaz(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	 *  leds y los conmutadores de usuario y de bloqueo de los sensores de
	 *  ultrasonidos.
	 *
	 * */
	static uint8_t primero;
	if(primero==0)
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <GestorInterfaz+0x88>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d131      	bne.n	80011f8 <GestorInterfaz+0x70>
	{
		/*Actualiza variables por primera vez*/

		//Inicializamos los temporizadores para los leds
		tick.t_blink[0]=0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <GestorInterfaz+0x8c>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
		tick.t_blink[1]=0;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <GestorInterfaz+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]

		/*Apagamos LEDS*/
		HAL_GPIO_WritePin(port_led[0], pin_led[0], GPIO_PIN_RESET);
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <GestorInterfaz+0x90>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <GestorInterfaz+0x94>)
 80011a6:	8811      	ldrh	r1, [r2, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fe9c 	bl	8004ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_led[0], pin_led[0], GPIO_PIN_RESET);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <GestorInterfaz+0x90>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <GestorInterfaz+0x94>)
 80011b6:	8811      	ldrh	r1, [r2, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fe94 	bl	8004ee8 <HAL_GPIO_WritePin>
		primero=1;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <GestorInterfaz+0x88>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		//Actualizamos la variable user_input con el valor del estado del conmutador de usuario
		hard.user_input=HAL_GPIO_ReadPin(User_button_GPIO_Port, User_button_Pin);
 80011c6:	2110      	movs	r1, #16
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <GestorInterfaz+0x98>)
 80011ca:	f003 fe75 	bl	8004eb8 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <GestorInterfaz+0x9c>)
 80011d4:	701a      	strb	r2, [r3, #0]
		//Iniciamos el tiempo de rebote
		tick.t_rebote=0;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <GestorInterfaz+0x8c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]

		hard.n_puls=0; //Cuenta el número de pulsaciones de usuario.
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <GestorInterfaz+0x9c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	70da      	strb	r2, [r3, #3]

		//Iniciamos el tiempo de rebote del pulsador de eliminación de eco
		tick.t_rebote_pul_eco=0;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <GestorInterfaz+0x8c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
		//hard.dis_eco=1;
		//Actualizamos la variable hard.dis_eco con el valor real
		hard.dis_eco=HAL_GPIO_ReadPin(Dis_eco_GPIO_Port, Dis_eco_Pin);
 80011e8:	2108      	movs	r1, #8
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <GestorInterfaz+0x98>)
 80011ec:	f003 fe64 	bl	8004eb8 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <GestorInterfaz+0x9c>)
 80011f6:	711a      	strb	r2, [r3, #4]

	/*
	 * El gestor de interfaz llama a tres funciones no bloqueantes que permiten
	 * el control de los leds, el pulsador y el habilitador de eco.
	 * */
	ControlLeds(hard.leds);
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <GestorInterfaz+0x9c>)
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f84b 	bl	8001298 <ControlLeds>
	ControlPulsador();
 8001202:	f000 f811 	bl	8001228 <ControlPulsador>
	ControlHabiliadorEco();  //Sin testar
 8001206:	f000 f8f9 	bl	80013fc <ControlHabiliadorEco>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000005d 	.word	0x2000005d
 8001214:	20000118 	.word	0x20000118
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	40020800 	.word	0x40020800
 8001224:	20000188 	.word	0x20000188

08001228 <ControlPulsador>:

void ControlPulsador(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	 * lectura del pin. Si ambos han cambiado, se transmite un EVENTO_PULSADOR, por
	 * el puerto bluetooth y si ese cambio ha sido en un flanco negativo, implica pulsación
	 * y se incrementa la variable hard.n_puls. Esta variable se tiene en cuenta en
	 * la función de Navegación.
	 * */
	if(tick.t_rebote>=200)
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <ControlPulsador+0x64>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2bc7      	cmp	r3, #199	; 0xc7
 8001232:	d928      	bls.n	8001286 <ControlPulsador+0x5e>
	{
		tick.t_rebote=0;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <ControlPulsador+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
		hard.user_input_old = hard.user_input;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <ControlPulsador+0x68>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <ControlPulsador+0x68>)
 8001240:	705a      	strb	r2, [r3, #1]
		hard.user_input=HAL_GPIO_ReadPin(User_button_GPIO_Port, User_button_Pin);
 8001242:	2110      	movs	r1, #16
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <ControlPulsador+0x6c>)
 8001246:	f003 fe37 	bl	8004eb8 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <ControlPulsador+0x68>)
 8001250:	701a      	strb	r2, [r3, #0]
		if(hard.user_input != hard.user_input_old)
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <ControlPulsador+0x68>)
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <ControlPulsador+0x68>)
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	429a      	cmp	r2, r3
 800125c:	d005      	beq.n	800126a <ControlPulsador+0x42>
			TransmiteEvento(EVENTO_PULSADOR,hard.user_input);
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <ControlPulsador+0x68>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fe1f 	bl	8000ea8 <TransmiteEvento>
		if(hard.user_input ==0 && hard.user_input_old ==1)
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <ControlPulsador+0x68>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <ControlPulsador+0x5e>
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <ControlPulsador+0x68>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <ControlPulsador+0x5e>
			hard.n_puls++;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <ControlPulsador+0x68>)
 800127c:	78db      	ldrb	r3, [r3, #3]
 800127e:	3301      	adds	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <ControlPulsador+0x68>)
 8001284:	70da      	strb	r2, [r3, #3]
	}

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000118 	.word	0x20000118
 8001290:	20000188 	.word	0x20000188
 8001294:	40020800 	.word	0x40020800

08001298 <ControlLeds>:

void ControlLeds(uint8_t valor)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	#define LED_ON 0
	#define LED_ON_1_DE_2 2
	#define LED_ON_1_DE_5 3


	for(i=0;i<2;i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e098      	b.n	80013da <ControlLeds+0x142>
	{
		valor>>=4*i;
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa42 f303 	asr.w	r3, r2, r3
 80012b2:	71fb      	strb	r3, [r7, #7]
		switch(valor&0xF)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d859      	bhi.n	8001372 <ControlLeds+0xda>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <ControlLeds+0x2c>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012ef 	.word	0x080012ef
 80012c8:	080012d5 	.word	0x080012d5
 80012cc:	08001309 	.word	0x08001309
 80012d0:	0800133f 	.word	0x0800133f
		{
		case LED_OFF:
			HAL_GPIO_WritePin(port_led[i], pin_led[i], GPIO_PIN_RESET);
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	4a45      	ldr	r2, [pc, #276]	; (80013ec <ControlLeds+0x154>)
 80012d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <ControlLeds+0x158>)
 80012e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	f003 fdfe 	bl	8004ee8 <HAL_GPIO_WritePin>
			break;
 80012ec:	e072      	b.n	80013d4 <ControlLeds+0x13c>
		case LED_ON:
			HAL_GPIO_WritePin(port_led[i], pin_led[i], GPIO_PIN_SET);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <ControlLeds+0x154>)
 80012f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <ControlLeds+0x158>)
 80012fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	f003 fdf1 	bl	8004ee8 <HAL_GPIO_WritePin>
			break;
 8001306:	e065      	b.n	80013d4 <ControlLeds+0x13c>
  		case LED_ON_1_DE_2:
			if(tick.t_blink[i]>500)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	4a3a      	ldr	r2, [pc, #232]	; (80013f4 <ControlLeds+0x15c>)
 800130c:	3304      	adds	r3, #4
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001316:	d958      	bls.n	80013ca <ControlLeds+0x132>
			{
				HAL_GPIO_TogglePin(port_led[i], pin_led[i]);
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	4a34      	ldr	r2, [pc, #208]	; (80013ec <ControlLeds+0x154>)
 800131c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	4933      	ldr	r1, [pc, #204]	; (80013f0 <ControlLeds+0x158>)
 8001324:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001328:	4619      	mov	r1, r3
 800132a:	4610      	mov	r0, r2
 800132c:	f003 fdf5 	bl	8004f1a <HAL_GPIO_TogglePin>
				tick.t_blink[i]=0;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <ControlLeds+0x15c>)
 8001334:	3304      	adds	r3, #4
 8001336:	2100      	movs	r1, #0
 8001338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			break;
 800133c:	e045      	b.n	80013ca <ControlLeds+0x132>
		case LED_ON_1_DE_5:
			if(tick.t_blink[i]>200)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <ControlLeds+0x15c>)
 8001342:	3304      	adds	r3, #4
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	2bc8      	cmp	r3, #200	; 0xc8
 800134a:	d940      	bls.n	80013ce <ControlLeds+0x136>
			{
				HAL_GPIO_TogglePin(port_led[i], pin_led[i]);
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	4a27      	ldr	r2, [pc, #156]	; (80013ec <ControlLeds+0x154>)
 8001350:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	4926      	ldr	r1, [pc, #152]	; (80013f0 <ControlLeds+0x158>)
 8001358:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f003 fddb 	bl	8004f1a <HAL_GPIO_TogglePin>
				tick.t_blink[i]=0;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <ControlLeds+0x15c>)
 8001368:	3304      	adds	r3, #4
 800136a:	2100      	movs	r1, #0
 800136c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			break;
 8001370:	e02d      	b.n	80013ce <ControlLeds+0x136>
		default:
			if(tick.t_blink[0]>500)
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <ControlLeds+0x15c>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137a:	d92a      	bls.n	80013d2 <ControlLeds+0x13a>
			{
				  HAL_GPIO_TogglePin(port_led[i], pin_led[0]);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <ControlLeds+0x154>)
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <ControlLeds+0x158>)
 8001386:	8812      	ldrh	r2, [r2, #0]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fdc5 	bl	8004f1a <HAL_GPIO_TogglePin>
				  tick.t_blink[0]=0;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <ControlLeds+0x15c>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
				  HAL_GPIO_WritePin(port_led[i], pin_led[1], !HAL_GPIO_ReadPin(GPIOC, pin_led[0]));
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <ControlLeds+0x154>)
 800139a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <ControlLeds+0x158>)
 80013a0:	885d      	ldrh	r5, [r3, #2]
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <ControlLeds+0x158>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <ControlLeds+0x160>)
 80013aa:	f003 fd85 	bl	8004eb8 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	4629      	mov	r1, r5
 80013be:	4620      	mov	r0, r4
 80013c0:	f003 fd92 	bl	8004ee8 <HAL_GPIO_WritePin>
				  i=2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80013c8:	e003      	b.n	80013d2 <ControlLeds+0x13a>
			break;
 80013ca:	bf00      	nop
 80013cc:	e002      	b.n	80013d4 <ControlLeds+0x13c>
			break;
 80013ce:	bf00      	nop
 80013d0:	e000      	b.n	80013d4 <ControlLeds+0x13c>
			break;
 80013d2:	bf00      	nop
	for(i=0;i<2;i++)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	3301      	adds	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f67f af63 	bls.w	80012a8 <ControlLeds+0x10>
		}
	}

}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bdb0      	pop	{r4, r5, r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000118 	.word	0x20000118
 80013f8:	40020800 	.word	0x40020800

080013fc <ControlHabiliadorEco>:



void ControlHabiliadorEco(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	/*
	 * Actualiza el valor del conmutador con el estado del conmutador cada
	 * 200ms.
	 * */
	if(tick.t_rebote_pul_eco>=200)
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <ControlHabiliadorEco+0x28>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2bc7      	cmp	r3, #199	; 0xc7
 8001406:	d90a      	bls.n	800141e <ControlHabiliadorEco+0x22>
	{
		tick.t_rebote_pul_eco=0;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <ControlHabiliadorEco+0x28>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
		hard.dis_eco = HAL_GPIO_ReadPin(Dis_eco_GPIO_Port, Dis_eco_Pin);
 800140e:	2108      	movs	r1, #8
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <ControlHabiliadorEco+0x2c>)
 8001412:	f003 fd51 	bl	8004eb8 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <ControlHabiliadorEco+0x30>)
 800141c:	711a      	strb	r2, [r3, #4]
	}
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000118 	.word	0x20000118
 8001428:	40020800 	.word	0x40020800
 800142c:	20000188 	.word	0x20000188

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001434:	f002 fd52 	bl	8003edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f84e 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f000 fbde 	bl	8001bfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001440:	f000 fb52 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001444:	f000 fba4 	bl	8001b90 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001448:	f000 fb24 	bl	8001a94 <MX_USART1_UART_Init>
  MX_DAC_Init();
 800144c:	f000 f8b2 	bl	80015b4 <MX_DAC_Init>
  MX_TIM2_Init();
 8001450:	f000 f8e4 	bl	800161c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001454:	f000 f95c 	bl	8001710 <MX_TIM3_Init>
  MX_TIM12_Init();
 8001458:	f000 fab8 	bl	80019cc <MX_TIM12_Init>
  MX_TIM8_Init();
 800145c:	f000 fa54 	bl	8001908 <MX_TIM8_Init>
  MX_TIM4_Init();
 8001460:	f000 f9cc 	bl	80017fc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001464:	f000 fb6a 	bl	8001b3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //Para el control del motor
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001468:	2100      	movs	r1, #0
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <main+0x94>)
 800146c:	f002 fec7 	bl	80041fe <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001470:	2110      	movs	r1, #16
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <main+0x94>)
 8001474:	f002 fec3 	bl	80041fe <HAL_DAC_Start>


  //Para la medida de los Hall
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001478:	2100      	movs	r1, #0
 800147a:	4813      	ldr	r0, [pc, #76]	; (80014c8 <main+0x98>)
 800147c:	f004 fc92 	bl	8005da4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001480:	2104      	movs	r1, #4
 8001482:	4811      	ldr	r0, [pc, #68]	; (80014c8 <main+0x98>)
 8001484:	f004 fc8e 	bl	8005da4 <HAL_TIM_IC_Start_IT>


  //Para el trigger de los dispositivos de ultrasonidos
   HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8001488:	2100      	movs	r1, #0
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <main+0x9c>)
 800148c:	f004 fb72 	bl	8005b74 <HAL_TIM_PWM_Start>

   //Para los ecos de los ultrasonidos traseros
   HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8001490:	2100      	movs	r1, #0
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <main+0xa0>)
 8001494:	f004 fc86 	bl	8005da4 <HAL_TIM_IC_Start_IT>
   HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8001498:	2104      	movs	r1, #4
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <main+0xa0>)
 800149c:	f004 fc82 	bl	8005da4 <HAL_TIM_IC_Start_IT>

   //Ppara los ecos de los ultrasonidos delanteros
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80014a0:	2104      	movs	r1, #4
 80014a2:	480c      	ldr	r0, [pc, #48]	; (80014d4 <main+0xa4>)
 80014a4:	f004 fc7e 	bl	8005da4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80014a8:	2108      	movs	r1, #8
 80014aa:	480a      	ldr	r0, [pc, #40]	; (80014d4 <main+0xa4>)
 80014ac:	f004 fc7a 	bl	8005da4 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80014b0:	210c      	movs	r1, #12
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <main+0xa4>)
 80014b4:	f004 fc76 	bl	8005da4 <HAL_TIM_IC_Start_IT>

  InicializaVariables();
 80014b8:	f000 fcda 	bl	8001e70 <InicializaVariables>
    /* USER CODE BEGIN 3 */

/*		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R , 1500);
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R , 1500);
*/
	GestorTareas();
 80014bc:	f000 fd18 	bl	8001ef0 <GestorTareas>
 80014c0:	e7fc      	b.n	80014bc <main+0x8c>
 80014c2:	bf00      	nop
 80014c4:	200003b4 	.word	0x200003b4
 80014c8:	200003c8 	.word	0x200003c8
 80014cc:	20000454 	.word	0x20000454
 80014d0:	20000194 	.word	0x20000194
 80014d4:	200001dc 	.word	0x200001dc

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2234      	movs	r2, #52	; 0x34
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f006 fe20 	bl	800812c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <SystemClock_Config+0xd4>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a29      	ldr	r2, [pc, #164]	; (80015ac <SystemClock_Config+0xd4>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <SystemClock_Config+0xd4>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <SystemClock_Config+0xd8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001524:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <SystemClock_Config+0xd8>)
 8001526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <SystemClock_Config+0xd8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001538:	2302      	movs	r3, #2
 800153a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001540:	2310      	movs	r3, #16
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001544:	2302      	movs	r3, #2
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800154c:	2310      	movs	r3, #16
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001550:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001554:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001556:	2304      	movs	r3, #4
 8001558:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800155e:	2302      	movs	r3, #2
 8001560:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4618      	mov	r0, r3
 8001568:	f003 ffbe 	bl	80054e8 <HAL_RCC_OscConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001572:	f000 fccd 	bl	8001f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001576:	230f      	movs	r3, #15
 8001578:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157a:	2302      	movs	r3, #2
 800157c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	2102      	movs	r1, #2
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fcdc 	bl	8004f50 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800159e:	f000 fcb7 	bl	8001f10 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3750      	adds	r7, #80	; 0x50
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_DAC_Init+0x60>)
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <MX_DAC_Init+0x64>)
 80015c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015c8:	4812      	ldr	r0, [pc, #72]	; (8001614 <MX_DAC_Init+0x60>)
 80015ca:	f002 fdf6 	bl	80041ba <HAL_DAC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015d4:	f000 fc9c 	bl	8001f10 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_DAC_Init+0x60>)
 80015e8:	f002 fe80 	bl	80042ec <HAL_DAC_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015f2:	f000 fc8d 	bl	8001f10 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	2210      	movs	r2, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_DAC_Init+0x60>)
 80015fe:	f002 fe75 	bl	80042ec <HAL_DAC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001608:	f000 fc82 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200003b4 	.word	0x200003b4
 8001618:	40007400 	.word	0x40007400

0800161c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800163a:	463b      	mov	r3, r7
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <MX_TIM2_Init+0xf0>)
 8001648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <MX_TIM2_Init+0xf0>)
 8001650:	2253      	movs	r2, #83	; 0x53
 8001652:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <MX_TIM2_Init+0xf0>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <MX_TIM2_Init+0xf0>)
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <MX_TIM2_Init+0xf0>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <MX_TIM2_Init+0xf0>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166e:	4827      	ldr	r0, [pc, #156]	; (800170c <MX_TIM2_Init+0xf0>)
 8001670:	f004 f9d8 	bl	8005a24 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800167a:	f000 fc49 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4619      	mov	r1, r3
 800168a:	4820      	ldr	r0, [pc, #128]	; (800170c <MX_TIM2_Init+0xf0>)
 800168c:	f004 ff18 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001696:	f000 fc3b 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800169a:	481c      	ldr	r0, [pc, #112]	; (800170c <MX_TIM2_Init+0xf0>)
 800169c:	f004 fb32 	bl	8005d04 <HAL_TIM_IC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016a6:	f000 fc33 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <MX_TIM2_Init+0xf0>)
 80016ba:	f005 fc6f 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80016c4:	f000 fc24 	bl	8001f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016c8:	2300      	movs	r3, #0
 80016ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <MX_TIM2_Init+0xf0>)
 80016e0:	f004 fd90 	bl	8006204 <HAL_TIM_IC_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80016ea:	f000 fc11 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_TIM2_Init+0xf0>)
 80016f6:	f004 fd85 	bl	8006204 <HAL_TIM_IC_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001700:	f000 fc06 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200003c8 	.word	0x200003c8

08001710 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	; 0x38
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	f107 0320 	add.w	r3, r7, #32
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <MX_TIM3_Init+0xe4>)
 8001742:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <MX_TIM3_Init+0xe8>)
 8001744:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <MX_TIM3_Init+0xe4>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <MX_TIM3_Init+0xe4>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001752:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <MX_TIM3_Init+0xe4>)
 8001754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001758:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_TIM3_Init+0xe4>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <MX_TIM3_Init+0xe4>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <MX_TIM3_Init+0xe4>)
 8001768:	f004 f95c 	bl	8005a24 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001772:	f000 fbcd 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800177c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001780:	4619      	mov	r1, r3
 8001782:	481c      	ldr	r0, [pc, #112]	; (80017f4 <MX_TIM3_Init+0xe4>)
 8001784:	f004 fe9c 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800178e:	f000 fbbf 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001792:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_TIM3_Init+0xe4>)
 8001794:	f004 f995 	bl	8005ac2 <HAL_TIM_PWM_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800179e:	f000 fbb7 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4619      	mov	r1, r3
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <MX_TIM3_Init+0xe4>)
 80017b2:	f005 fbf3 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017bc:	f000 fba8 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c0:	2360      	movs	r3, #96	; 0x60
 80017c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MX_TIM3_Init+0xe4>)
 80017d8:	f004 fdb0 	bl	800633c <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017e2:	f000 fb95 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <MX_TIM3_Init+0xe4>)
 80017e8:	f002 f922 	bl	8003a30 <HAL_TIM_MspPostInit>

}
 80017ec:	bf00      	nop
 80017ee:	3738      	adds	r7, #56	; 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200002c8 	.word	0x200002c8
 80017f8:	40000400 	.word	0x40000400

080017fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800181a:	463b      	mov	r3, r7
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <MX_TIM4_Init+0x104>)
 8001828:	4a36      	ldr	r2, [pc, #216]	; (8001904 <MX_TIM4_Init+0x108>)
 800182a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <MX_TIM4_Init+0x104>)
 800182e:	2253      	movs	r2, #83	; 0x53
 8001830:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <MX_TIM4_Init+0x104>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001838:	4b31      	ldr	r3, [pc, #196]	; (8001900 <MX_TIM4_Init+0x104>)
 800183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <MX_TIM4_Init+0x104>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <MX_TIM4_Init+0x104>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800184c:	482c      	ldr	r0, [pc, #176]	; (8001900 <MX_TIM4_Init+0x104>)
 800184e:	f004 f8e9 	bl	8005a24 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001858:	f000 fb5a 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	4619      	mov	r1, r3
 8001868:	4825      	ldr	r0, [pc, #148]	; (8001900 <MX_TIM4_Init+0x104>)
 800186a:	f004 fe29 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001874:	f000 fb4c 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001878:	4821      	ldr	r0, [pc, #132]	; (8001900 <MX_TIM4_Init+0x104>)
 800187a:	f004 fa43 	bl	8005d04 <HAL_TIM_IC_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001884:	f000 fb44 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	481a      	ldr	r0, [pc, #104]	; (8001900 <MX_TIM4_Init+0x104>)
 8001898:	f005 fb80 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80018a2:	f000 fb35 	bl	8001f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80018a6:	230a      	movs	r3, #10
 80018a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 80018b2:	2308      	movs	r3, #8
 80018b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	2204      	movs	r2, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	4810      	ldr	r0, [pc, #64]	; (8001900 <MX_TIM4_Init+0x104>)
 80018be:	f004 fca1 	bl	8006204 <HAL_TIM_IC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80018c8:	f000 fb22 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	2208      	movs	r2, #8
 80018d0:	4619      	mov	r1, r3
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <MX_TIM4_Init+0x104>)
 80018d4:	f004 fc96 	bl	8006204 <HAL_TIM_IC_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80018de:	f000 fb17 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	220c      	movs	r2, #12
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_TIM4_Init+0x104>)
 80018ea:	f004 fc8b 	bl	8006204 <HAL_TIM_IC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80018f4:	f000 fb0c 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200001dc 	.word	0x200001dc
 8001904:	40000800 	.word	0x40000800

08001908 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <MX_TIM8_Init+0xc0>)
 8001928:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <MX_TIM8_Init+0xbc>)
 800192c:	2253      	movs	r2, #83	; 0x53
 800192e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <MX_TIM8_Init+0xbc>)
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001950:	481c      	ldr	r0, [pc, #112]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001952:	f004 f9d7 	bl	8005d04 <HAL_TIM_IC_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800195c:	f000 fad8 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4619      	mov	r1, r3
 800196e:	4815      	ldr	r0, [pc, #84]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001970:	f005 fb14 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800197a:	f000 fac9 	bl	8001f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800197e:	230a      	movs	r3, #10
 8001980:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001982:	2301      	movs	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 800198a:	2308      	movs	r3, #8
 800198c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	4619      	mov	r1, r3
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <MX_TIM8_Init+0xbc>)
 8001996:	f004 fc35 	bl	8006204 <HAL_TIM_IC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80019a0:	f000 fab6 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019a4:	463b      	mov	r3, r7
 80019a6:	2204      	movs	r2, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <MX_TIM8_Init+0xbc>)
 80019ac:	f004 fc2a 	bl	8006204 <HAL_TIM_IC_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM8_Init+0xb2>
  {
    Error_Handler();
 80019b6:	f000 faab 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000194 	.word	0x20000194
 80019c8:	40010400 	.word	0x40010400

080019cc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <MX_TIM12_Init+0xc0>)
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <MX_TIM12_Init+0xc4>)
 80019f6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 167;
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <MX_TIM12_Init+0xc0>)
 80019fa:	22a7      	movs	r2, #167	; 0xa7
 80019fc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65000;
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a06:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a0a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a18:	481c      	ldr	r0, [pc, #112]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a1a:	f004 f803 	bl	8005a24 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001a24:	f000 fa74 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0320 	add.w	r3, r7, #32
 8001a32:	4619      	mov	r1, r3
 8001a34:	4815      	ldr	r0, [pc, #84]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a36:	f004 fd43 	bl	80064c0 <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001a40:	f000 fa66 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a46:	f004 f83c 	bl	8005ac2 <HAL_TIM_PWM_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001a50:	f000 fa5e 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a54:	2360      	movs	r3, #96	; 0x60
 8001a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a6e:	f004 fc65 	bl	800633c <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001a78:	f000 fa4a 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <MX_TIM12_Init+0xc0>)
 8001a7e:	f001 ffd7 	bl	8003a30 <HAL_TIM_MspPostInit>

}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000454 	.word	0x20000454
 8001a90:	40001800 	.word	0x40001800

08001a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART1_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001acc:	f005 faf6 	bl	80070bc <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 fa1b 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000370 	.word	0x20000370
 8001ae4:	40011000 	.word	0x40011000

08001ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_USART2_UART_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f005 facc 	bl	80070bc <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b2a:	f000 f9f1 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000410 	.word	0x20000410
 8001b38:	40004400 	.word	0x40004400

08001b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART3_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b74:	f005 faa2 	bl	80070bc <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f000 f9c7 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000224 	.word	0x20000224
 8001b8c:	40004800 	.word	0x40004800

08001b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_DMA_Init+0x68>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <MX_DMA_Init+0x68>)
 8001ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_DMA_Init+0x68>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_DMA_Init+0x68>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <MX_DMA_Init+0x68>)
 8001bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <MX_DMA_Init+0x68>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200e      	movs	r0, #14
 8001bd4:	f002 fabb 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bd8:	200e      	movs	r0, #14
 8001bda:	f002 fad4 	bl	8004186 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2046      	movs	r0, #70	; 0x46
 8001be4:	f002 fab3 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001be8:	2046      	movs	r0, #70	; 0x46
 8001bea:	f002 facc 	bl	8004186 <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a3f      	ldr	r2, [pc, #252]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <MX_GPIO_Init+0x11c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_R_Pin|Enable_L_Pin|Led_verde_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2116      	movs	r1, #22
 8001c6a:	482c      	ldr	r0, [pc, #176]	; (8001d1c <MX_GPIO_Init+0x120>)
 8001c6c:	f003 f93c 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Brake_L_Pin|Brake_R_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001c76:	482a      	ldr	r0, [pc, #168]	; (8001d20 <MX_GPIO_Init+0x124>)
 8001c78:	f003 f936 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_amarillo_Pin|Z_F_R_Pin|Z_F_L_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001c82:	4828      	ldr	r0, [pc, #160]	; (8001d24 <MX_GPIO_Init+0x128>)
 8001c84:	f003 f930 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Dis_eco_Pin User_button_Pin */
  GPIO_InitStruct.Pin = Dis_eco_Pin|User_button_Pin;
 8001c88:	2318      	movs	r3, #24
 8001c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4821      	ldr	r0, [pc, #132]	; (8001d20 <MX_GPIO_Init+0x124>)
 8001c9c:	f002 ff78 	bl	8004b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable_R_Pin Enable_L_Pin Led_verde_Pin */
  GPIO_InitStruct.Pin = Enable_R_Pin|Enable_L_Pin|Led_verde_Pin;
 8001ca0:	2316      	movs	r3, #22
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4819      	ldr	r0, [pc, #100]	; (8001d1c <MX_GPIO_Init+0x120>)
 8001cb8:	f002 ff6a 	bl	8004b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Brake_L_Pin Brake_R_Pin */
  GPIO_InitStruct.Pin = Brake_L_Pin|Brake_R_Pin;
 8001cbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4812      	ldr	r0, [pc, #72]	; (8001d20 <MX_GPIO_Init+0x124>)
 8001cd6:	f002 ff5b 	bl	8004b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_amarillo_Pin Z_F_R_Pin Z_F_L_Pin */
  GPIO_InitStruct.Pin = Led_amarillo_Pin|Z_F_R_Pin|Z_F_L_Pin;
 8001cda:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <MX_GPIO_Init+0x128>)
 8001cf4:	f002 ff4c 	bl	8004b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_State_Pin */
  GPIO_InitStruct.Pin = BT_State_Pin;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_State_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_GPIO_Init+0x120>)
 8001d0c:	f002 ff40 	bl	8004b90 <HAL_GPIO_Init>

}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
	/*Esta función se ejecuta cada 1ms. Contiene el incremento de las variables
	 * globales que se usan en cada una de las tareas*/
	uint8_t i;


	tick.tiempo++;   //Para el control de la navegación
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_IncTick+0x130>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	3301      	adds	r3, #1
 8001d34:	4a48      	ldr	r2, [pc, #288]	; (8001e58 <HAL_IncTick+0x130>)
 8001d36:	6093      	str	r3, [r2, #8]
					 //Esta variable controla el tiempo que está operando la silla
					 //entre pulsaciones
	tick.tiempo_backward++; //Para el control de la navegación
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_IncTick+0x130>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_IncTick+0x130>)
 8001d40:	60d3      	str	r3, [r2, #12]
					//Este tiempo se utiliza para controlar el tiempo de la marcha atrás

	/* t_blink se usa para la activación intermitente de los leds
	 * Cada ms se incrementan estas variables
	 * */
	for(i=0;i<2;i++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e00d      	b.n	8001d64 <HAL_IncTick+0x3c>
		tick.t_blink[i]+=1;
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_IncTick+0x130>)
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3201      	adds	r2, #1
 8001d56:	4940      	ldr	r1, [pc, #256]	; (8001e58 <HAL_IncTick+0x130>)
 8001d58:	3304      	adds	r3, #4
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<2;i++)
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	3301      	adds	r3, #1
 8001d62:	71fb      	strb	r3, [r7, #7]
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d9ee      	bls.n	8001d48 <HAL_IncTick+0x20>

	/*Para el pulsador, eliminar el rebote*/
	tick.t_rebote++;
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_IncTick+0x130>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4a39      	ldr	r2, [pc, #228]	; (8001e58 <HAL_IncTick+0x130>)
 8001d72:	6193      	str	r3, [r2, #24]

	/*Para el pulsador que habilita el eco, eliminar el rebote*/
	tick.t_rebote_pul_eco++;
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_IncTick+0x130>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	4a37      	ldr	r2, [pc, #220]	; (8001e58 <HAL_IncTick+0x130>)
 8001d7c:	61d3      	str	r3, [r2, #28]

	/*Las variables tiempo_temporal_med y tiempo_med se utilizan paras
	 * el protocolo de comunicaciones. La primera establece intervalos de
	 * 100ms y la segunda se incrementa cada 100ms. Es la información que
	 * se envía con cada paquete de datos a la aplicación de Alejandro*/
	tick.tiempo_temporal_med+=1;
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_IncTick+0x130>)
 8001d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d82:	3301      	adds	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_IncTick+0x130>)
 8001d88:	84da      	strh	r2, [r3, #38]	; 0x26
	if (tick.tiempo_temporal_med==100)
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_IncTick+0x130>)
 8001d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d108      	bne.n	8001da4 <HAL_IncTick+0x7c>
	{
			tick.tiempo_temporal_med=0;
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_IncTick+0x130>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	84da      	strh	r2, [r3, #38]	; 0x26
			tick.tiempo_med+=1;
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_IncTick+0x130>)
 8001d9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_IncTick+0x130>)
 8001da2:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	tick.t_dac++; //Establece el tiempo para el cual se ejecuta la rutina de control de motores
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_IncTick+0x130>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_IncTick+0x130>)
 8001dac:	6213      	str	r3, [r2, #32]
	 * de las ruedas cuando están paradas. Si transcurre más de 300ms
	 * sin una medida nueva en el hall, las ruedas están paradas.
	 * Se pone hall[i] a su valor más alto y se activa la señal medida
	 * nueva_hall[i]
	 * */
	for(i=0;i<2;i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	71fb      	strb	r3, [r7, #7]
 8001db2:	e021      	b.n	8001df8 <HAL_IncTick+0xd0>
	{
		tick.t_med_hall[i]+=1;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <HAL_IncTick+0x130>)
 8001db8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	3201      	adds	r2, #1
 8001dc0:	4925      	ldr	r1, [pc, #148]	; (8001e58 <HAL_IncTick+0x130>)
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(tick.t_med_hall[i]>300)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_IncTick+0x130>)
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001dd2:	d90e      	bls.n	8001df2 <HAL_IncTick+0xca>
		{
			tick.t_med_hall[i]=0;
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	4a20      	ldr	r2, [pc, #128]	; (8001e58 <HAL_IncTick+0x130>)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			hall[i]=4294967295;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_IncTick+0x134>)
 8001de2:	f04f 31ff 	mov.w	r1, #4294967295
 8001de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			medida_nueva_hall[i]=1;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_IncTick+0x138>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<2;i++)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	3301      	adds	r3, #1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d9da      	bls.n	8001db4 <HAL_IncTick+0x8c>
		}
	}

	//Establece un tiempo mínimo para cambiar de estado y evitar secuencias
	state.tiempo_estado++;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_IncTick+0x13c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_IncTick+0x13c>)
 8001e06:	6053      	str	r3, [r2, #4]

	//audio.tiempo++;

	/*Para la función de control de motores. Se necesitan algunos delays
	 * que se gestionan en estas variables*/
	for(i=0;i<2;i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	e016      	b.n	8001e3c <HAL_IncTick+0x114>
	{
		tmotor.t_arranque[i]+=1;
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4a15      	ldr	r2, [pc, #84]	; (8001e68 <HAL_IncTick+0x140>)
 8001e12:	3302      	adds	r3, #2
 8001e14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	3201      	adds	r2, #1
 8001e1c:	4912      	ldr	r1, [pc, #72]	; (8001e68 <HAL_IncTick+0x140>)
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		tmotor.t_delay_pid[i]+=1;
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	4a10      	ldr	r2, [pc, #64]	; (8001e68 <HAL_IncTick+0x140>)
 8001e28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	3201      	adds	r2, #1
 8001e30:	490d      	ldr	r1, [pc, #52]	; (8001e68 <HAL_IncTick+0x140>)
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<2;i++)
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d9e5      	bls.n	8001e0e <HAL_IncTick+0xe6>
	}

	//Algunos delays son necesarias para el envío de
	//los comandos durante el proceso de inicialización
	audio.tiempo++;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_IncTick+0x144>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_IncTick+0x144>)
 8001e4a:	6013      	str	r3, [r2, #0]

}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20000118 	.word	0x20000118
 8001e5c:	20000140 	.word	0x20000140
 8001e60:	20000190 	.word	0x20000190
 8001e64:	20000104 	.word	0x20000104
 8001e68:	200000ac 	.word	0x200000ac
 8001e6c:	2000014c 	.word	0x2000014c

08001e70 <InicializaVariables>:

void InicializaVariables(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
	  uint8_t i;
	  tick.tiempo=0;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <InicializaVariables+0x78>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
	  tick.tiempo_backward=0;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <InicializaVariables+0x78>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
	  tick.t_dac=0;
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <InicializaVariables+0x78>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
	  tick.tiempo_temporal_med=0;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <InicializaVariables+0x78>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	84da      	strh	r2, [r3, #38]	; 0x26
	  tick.tiempo_med=0;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <InicializaVariables+0x78>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	849a      	strh	r2, [r3, #36]	; 0x24
	  for(i=0;i<2;i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	e007      	b.n	8001eaa <InicializaVariables+0x3a>
		  tick.t_med_hall[i]=0;
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <InicializaVariables+0x78>)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(i=0;i<2;i++)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d9f4      	bls.n	8001e9a <InicializaVariables+0x2a>

	  par.tiempo=TIEMPO_MOV;
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <InicializaVariables+0x7c>)
 8001eb2:	f247 5230 	movw	r2, #30000	; 0x7530
 8001eb6:	601a      	str	r2, [r3, #0]
	  par.tiempo_rotate = TIEMPO_ROT;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <InicializaVariables+0x7c>)
 8001eba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ebe:	605a      	str	r2, [r3, #4]
	  par.tiempo_atras = TIEMPO_ATRAS;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <InicializaVariables+0x7c>)
 8001ec2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ec6:	609a      	str	r2, [r3, #8]
	  par.vel=VEL;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <InicializaVariables+0x7c>)
 8001eca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ece:	819a      	strh	r2, [r3, #12]
	  par.obs_near=DISTANCIA_OBSTACULO_1;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <InicializaVariables+0x7c>)
 8001ed2:	2237      	movs	r2, #55	; 0x37
 8001ed4:	81da      	strh	r2, [r3, #14]
	  par.obs_far=DISTANCIA_OBSTACULO_2;
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <InicializaVariables+0x7c>)
 8001ed8:	2241      	movs	r2, #65	; 0x41
 8001eda:	821a      	strh	r2, [r3, #16]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000118 	.word	0x20000118
 8001eec:	200000f0 	.word	0x200000f0

08001ef0 <GestorTareas>:



void GestorTareas(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	 *  en cuenta que ninguna de ellas puede ser bloqueante para la correcta
	 *  ejecución del conjunto.
	 *
	 * */

	GestorMotores();
 8001ef4:	f000 f846 	bl	8001f84 <GestorMotores>
	GestorComunicaciones();
 8001ef8:	f7fe ff6a 	bl	8000dd0 <GestorComunicaciones>
	GestorSensores();
 8001efc:	f000 fd9c 	bl	8002a38 <GestorSensores>
	GestorInterfaz();
 8001f00:	f7ff f942 	bl	8001188 <GestorInterfaz>
	Navegacion();
 8001f04:	f000 fb98 	bl	8002638 <Navegacion>
	GestorAudio();
 8001f08:	f001 fb28 	bl	800355c <GestorAudio>
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <Error_Handler+0x8>
	...

08001f1c <ActualizaVelocidad>:
uint16_t pin_brake_motor[2]={GPIO_PIN_8,GPIO_PIN_9}; //Array con la información de los pines asociados a los pines que manejan el enable de los controladores de motor.
uint16_t pin_salida_motor[2] = {DAC_CHANNEL_1,DAC_CHANNEL_2};


void ActualizaVelocidad( int16_t  izq, int16_t der)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	80fb      	strh	r3, [r7, #6]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	80bb      	strh	r3, [r7, #4]

	vel[IZQUIERDO] = izq;
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <ActualizaVelocidad+0x5c>)
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	8013      	strh	r3, [r2, #0]
	vel[DERECHO] = der;
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <ActualizaVelocidad+0x5c>)
 8001f34:	88bb      	ldrh	r3, [r7, #4]
 8001f36:	8053      	strh	r3, [r2, #2]
	consigna[IZQUIERDO] = (float)izq * consigna_vmax/VEL;
 8001f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f44:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001f7c <ActualizaVelocidad+0x60>
 8001f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <ActualizaVelocidad+0x64>)
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
	consigna[DERECHO] = (float)der * consigna_vmax/VEL;
 8001f52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f7c <ActualizaVelocidad+0x60>
 8001f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <ActualizaVelocidad+0x64>)
 8001f68:	edc3 7a01 	vstr	s15, [r3, #4]

	//mandoglobal[IZQUIERDO]=izq/400;
	//mandoglobal[DERECHO] = der/400;

}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	2000010c 	.word	0x2000010c
 8001f7c:	43c80000 	.word	0x43c80000
 8001f80:	20000110 	.word	0x20000110

08001f84 <GestorMotores>:


void GestorMotores(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	/*
	 * Función no bloqueante para el control de los motores
	 * */

	static uint8_t inicio;
	if(inicio==0)
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <GestorMotores+0x34>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <GestorMotores+0x1e>
	{
		inicio=1;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <GestorMotores+0x34>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
		ResetPID(0);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f812 	bl	8001fc0 <ResetPID>
		ResetPID(1);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f000 f80f 	bl	8001fc0 <ResetPID>
	}

	/*El Gestor de Motores llama cada 40ms al ControlMotores, que actualiza */
	if(tick.t_dac==40)
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <GestorMotores+0x38>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2b28      	cmp	r3, #40	; 0x28
 8001fa8:	d104      	bne.n	8001fb4 <GestorMotores+0x30>
	{
		ControlMotores();
 8001faa:	f000 f8f5 	bl	8002198 <ControlMotores>
		tick.t_dac=0;
 8001fae:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <GestorMotores+0x38>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
	}

}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000005e 	.word	0x2000005e
 8001fbc:	20000118 	.word	0x20000118

08001fc0 <ResetPID>:

void ResetPID(uint8_t n)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
		pid[n].ed=0;
 8001fca:	79fa      	ldrb	r2, [r7, #7]
 8001fcc:	4912      	ldr	r1, [pc, #72]	; (8002018 <ResetPID+0x58>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3304      	adds	r3, #4
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
		pid[n].ei=0;
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	490d      	ldr	r1, [pc, #52]	; (8002018 <ResetPID+0x58>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3308      	adds	r3, #8
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
		pid[n].ep=0;
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <ResetPID+0x58>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000094 	.word	0x20000094

0800201c <Algoritmo_PID>:



int16_t Algoritmo_PID(float vel_medida, float vel_consigna, uint8_t m )
{
 800201c:	b5b0      	push	{r4, r5, r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	ed87 0a03 	vstr	s0, [r7, #12]
 8002026:	edc7 0a02 	vstr	s1, [r7, #8]
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	int16_t mando;
	float dif;
	pid[m].ep = vel_consigna-vel_medida;
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	ed97 7a02 	vldr	s14, [r7, #8]
 8002034:	edd7 7a03 	vldr	s15, [r7, #12]
 8002038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203c:	4953      	ldr	r1, [pc, #332]	; (800218c <Algoritmo_PID+0x170>)
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	edc3 7a00 	vstr	s15, [r3]
	dif = pid[m].ep - pid[m].ed;
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	494f      	ldr	r1, [pc, #316]	; (800218c <Algoritmo_PID+0x170>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	494a      	ldr	r1, [pc, #296]	; (800218c <Algoritmo_PID+0x170>)
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3304      	adds	r3, #4
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002076:	edc7 7a04 	vstr	s15, [r7, #16]
	mando = (int16_t) (Kp*pid[m].ep + Kd*dif + Ki*pid[m].ei);
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	4943      	ldr	r1, [pc, #268]	; (800218c <Algoritmo_PID+0x170>)
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fa20 	bl	80004d0 <__aeabi_f2d>
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <Algoritmo_PID+0x174>)
 8002096:	f7fe fa73 	bl	8000580 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	6938      	ldr	r0, [r7, #16]
 80020a4:	f7fe fa14 	bl	80004d0 <__aeabi_f2d>
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	f7fe fa66 	bl	8000580 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f8aa 	bl	8000214 <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4614      	mov	r4, r2
 80020c6:	461d      	mov	r5, r3
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	4930      	ldr	r1, [pc, #192]	; (800218c <Algoritmo_PID+0x170>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3308      	adds	r3, #8
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe f9f8 	bl	80004d0 <__aeabi_f2d>
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <Algoritmo_PID+0x178>)
 80020e6:	f7fe fa4b 	bl	8000580 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	f7fe f88f 	bl	8000214 <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fc51 	bl	80009a4 <__aeabi_d2iz>
 8002102:	4603      	mov	r3, r0
 8002104:	82fb      	strh	r3, [r7, #22]
	pid[m].ep = dif;
 8002106:	79fa      	ldrb	r2, [r7, #7]
 8002108:	4920      	ldr	r1, [pc, #128]	; (800218c <Algoritmo_PID+0x170>)
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	601a      	str	r2, [r3, #0]
	if(mando <= VEL_MAX )
 8002118:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800211c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002120:	dc1e      	bgt.n	8002160 <Algoritmo_PID+0x144>
		pid[m].ei += pid[m].ep;
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	4919      	ldr	r1, [pc, #100]	; (800218c <Algoritmo_PID+0x170>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3308      	adds	r3, #8
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	79fa      	ldrb	r2, [r7, #7]
 8002138:	4914      	ldr	r1, [pc, #80]	; (800218c <Algoritmo_PID+0x170>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	490f      	ldr	r1, [pc, #60]	; (800218c <Algoritmo_PID+0x170>)
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3308      	adds	r3, #8
 800215c:	edc3 7a00 	vstr	s15, [r3]

	if(mando<200)
 8002160:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002164:	2bc7      	cmp	r3, #199	; 0xc7
 8002166:	dc02      	bgt.n	800216e <Algoritmo_PID+0x152>
		mando=200;
 8002168:	23c8      	movs	r3, #200	; 0xc8
 800216a:	82fb      	strh	r3, [r7, #22]
 800216c:	e007      	b.n	800217e <Algoritmo_PID+0x162>
	else if(mando >VEL_MAX)
 800216e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002172:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002176:	dd02      	ble.n	800217e <Algoritmo_PID+0x162>
		mando = VEL_MAX ;
 8002178:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800217c:	82fb      	strh	r3, [r7, #22]
	return mando;
 800217e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bdb0      	pop	{r4, r5, r7, pc}
 800218a:	bf00      	nop
 800218c:	20000094 	.word	0x20000094
 8002190:	40690000 	.word	0x40690000
 8002194:	40490000 	.word	0x40490000

08002198 <ControlMotores>:


void ControlMotores(void)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0

	uint8_t i;
		//Marcha puede tomar losadelante 0
		//Marcha atrás 1

		for(i=0;i<2;i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	e20e      	b.n	80025c2 <ControlMotores+0x42a>
		{
			switch(marcha[i])
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4a9a      	ldr	r2, [pc, #616]	; (8002410 <ControlMotores+0x278>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	f200 8206 	bhi.w	80025bc <ControlMotores+0x424>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <ControlMotores+0x20>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	0800225f 	.word	0x0800225f
 80021c0:	080022ed 	.word	0x080022ed
 80021c4:	080023cb 	.word	0x080023cb
 80021c8:	080025bd 	.word	0x080025bd
 80021cc:	080025bd 	.word	0x080025bd
 80021d0:	080025bd 	.word	0x080025bd
 80021d4:	080025bd 	.word	0x080025bd
 80021d8:	080025bd 	.word	0x080025bd
 80021dc:	080025bd 	.word	0x080025bd
 80021e0:	080025bd 	.word	0x080025bd
 80021e4:	08002449 	.word	0x08002449
 80021e8:	080024c9 	.word	0x080024c9
			{
			case 0: if(vel[i]>0)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4a89      	ldr	r2, [pc, #548]	; (8002414 <ControlMotores+0x27c>)
 80021f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	dd09      	ble.n	800220c <ControlMotores+0x74>
					{
						marcha[i]=1;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	4a85      	ldr	r2, [pc, #532]	; (8002410 <ControlMotores+0x278>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	54d1      	strb	r1, [r2, r3]
						tmotor.t_arranque[i]=0;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4a85      	ldr	r2, [pc, #532]	; (8002418 <ControlMotores+0x280>)
 8002204:	3302      	adds	r3, #2
 8002206:	2100      	movs	r1, #0
 8002208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					};
					if(vel[i]<0)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4a81      	ldr	r2, [pc, #516]	; (8002414 <ControlMotores+0x27c>)
 8002210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	da09      	bge.n	800222c <ControlMotores+0x94>
					{
						marcha[i]=11;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	4a7d      	ldr	r2, [pc, #500]	; (8002410 <ControlMotores+0x278>)
 800221c:	210b      	movs	r1, #11
 800221e:	54d1      	strb	r1, [r2, r3]
						tmotor.t_arranque[i]=0;
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	4a7d      	ldr	r2, [pc, #500]	; (8002418 <ControlMotores+0x280>)
 8002224:	3302      	adds	r3, #2
 8002226:	2100      	movs	r1, #0
 8002228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					HAL_GPIO_WritePin(GPIOB , pin_disable_motor[i], GPIO_PIN_SET);
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	4a7b      	ldr	r2, [pc, #492]	; (800241c <ControlMotores+0x284>)
 8002230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002234:	2201      	movs	r2, #1
 8002236:	4619      	mov	r1, r3
 8002238:	4879      	ldr	r0, [pc, #484]	; (8002420 <ControlMotores+0x288>)
 800223a:	f002 fe55 	bl	8004ee8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(port_brake, pin_brake_motor[i], GPIO_PIN_RESET);
 800223e:	4b79      	ldr	r3, [pc, #484]	; (8002424 <ControlMotores+0x28c>)
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4a78      	ldr	r2, [pc, #480]	; (8002428 <ControlMotores+0x290>)
 8002246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	f002 fe4b 	bl	8004ee8 <HAL_GPIO_WritePin>
					mandog[i]=0;
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4a75      	ldr	r2, [pc, #468]	; (800242c <ControlMotores+0x294>)
 8002256:	2100      	movs	r1, #0
 8002258:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 800225c:	e1ae      	b.n	80025bc <ControlMotores+0x424>
			case 1: if(vel[i]==0)
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4a6c      	ldr	r2, [pc, #432]	; (8002414 <ControlMotores+0x27c>)
 8002262:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <ControlMotores+0xdc>
						marcha[i]=0;
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4a68      	ldr	r2, [pc, #416]	; (8002410 <ControlMotores+0x278>)
 800226e:	2100      	movs	r1, #0
 8002270:	54d1      	strb	r1, [r2, r3]
 8002272:	e014      	b.n	800229e <ControlMotores+0x106>
					else
						if(tmotor.t_arranque[i]>=TIEMPO_DESCONEXION_ARRANQUE)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4a68      	ldr	r2, [pc, #416]	; (8002418 <ControlMotores+0x280>)
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002282:	d30c      	bcc.n	800229e <ControlMotores+0x106>
						{
							marcha[i]=2;
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4a62      	ldr	r2, [pc, #392]	; (8002410 <ControlMotores+0x278>)
 8002288:	2102      	movs	r1, #2
 800228a:	54d1      	strb	r1, [r2, r3]
							ResetPID(i);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fe96 	bl	8001fc0 <ResetPID>
							tmotor.t_delay_pid[i]=0;
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	4a60      	ldr	r2, [pc, #384]	; (8002418 <ControlMotores+0x280>)
 8002298:	2100      	movs	r1, #0
 800229a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
					HAL_GPIO_WritePin(port_disable, pin_disable_motor[i], GPIO_PIN_SET);
 800229e:	4b64      	ldr	r3, [pc, #400]	; (8002430 <ControlMotores+0x298>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4a5d      	ldr	r2, [pc, #372]	; (800241c <ControlMotores+0x284>)
 80022a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4619      	mov	r1, r3
 80022ae:	f002 fe1b 	bl	8004ee8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(port_direction, pin_direction_motor[i], PALANTE);
 80022b2:	4b60      	ldr	r3, [pc, #384]	; (8002434 <ControlMotores+0x29c>)
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4a5f      	ldr	r2, [pc, #380]	; (8002438 <ControlMotores+0x2a0>)
 80022ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	f002 fe11 	bl	8004ee8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(port_brake, pin_brake_motor[i], GPIO_PIN_RESET);
 80022c6:	4b57      	ldr	r3, [pc, #348]	; (8002424 <ControlMotores+0x28c>)
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4a56      	ldr	r2, [pc, #344]	; (8002428 <ControlMotores+0x290>)
 80022ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022d2:	2200      	movs	r2, #0
 80022d4:	4619      	mov	r1, r3
 80022d6:	f002 fe07 	bl	8004ee8 <HAL_GPIO_WritePin>
					mandog[i]=vel[i];
 80022da:	79fa      	ldrb	r2, [r7, #7]
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	494d      	ldr	r1, [pc, #308]	; (8002414 <ControlMotores+0x27c>)
 80022e0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <ControlMotores+0x294>)
 80022e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 80022ea:	e167      	b.n	80025bc <ControlMotores+0x424>
			case 2:
				HAL_GPIO_WritePin(port_disable,pin_disable_motor[i],GPIO_PIN_RESET);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <ControlMotores+0x298>)
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4a4a      	ldr	r2, [pc, #296]	; (800241c <ControlMotores+0x284>)
 80022f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f8:	2200      	movs	r2, #0
 80022fa:	4619      	mov	r1, r3
 80022fc:	f002 fdf4 	bl	8004ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(port_direction, pin_direction_motor[i], PALANTE);
 8002300:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <ControlMotores+0x29c>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4a4c      	ldr	r2, [pc, #304]	; (8002438 <ControlMotores+0x2a0>)
 8002308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800230c:	2200      	movs	r2, #0
 800230e:	4619      	mov	r1, r3
 8002310:	f002 fdea 	bl	8004ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(port_brake, pin_brake_motor[i], GPIO_PIN_RESET);
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <ControlMotores+0x28c>)
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	4a43      	ldr	r2, [pc, #268]	; (8002428 <ControlMotores+0x290>)
 800231c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	f002 fde0 	bl	8004ee8 <HAL_GPIO_WritePin>
				/*if(vel[i]<=0)
					marcha[i]=3;*/
				if(vel[i]==0)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4a3a      	ldr	r2, [pc, #232]	; (8002414 <ControlMotores+0x27c>)
 800232c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <ControlMotores+0x1a4>
					marcha[i]=3;
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	4a36      	ldr	r2, [pc, #216]	; (8002410 <ControlMotores+0x278>)
 8002338:	2103      	movs	r1, #3
 800233a:	54d1      	strb	r1, [r2, r3]
				if(vel[i]<0)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	4a35      	ldr	r2, [pc, #212]	; (8002414 <ControlMotores+0x27c>)
 8002340:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002344:	2b00      	cmp	r3, #0
 8002346:	da0c      	bge.n	8002362 <ControlMotores+0x1ca>
				{	//marcha[i]=0; //Lo paso por el estado cero para que se rearme los controladores
					marcha[i]=12; //Lo que había antes
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <ControlMotores+0x278>)
 800234c:	210c      	movs	r1, #12
 800234e:	54d1      	strb	r1, [r2, r3]
					ResetPID(i);
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe34 	bl	8001fc0 <ResetPID>
					tmotor.t_delay_pid[i]=0;
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <ControlMotores+0x280>)
 800235c:	2100      	movs	r1, #0
 800235e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(vel[i]>0)
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <ControlMotores+0x27c>)
 8002366:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f340 8123 	ble.w	80025b6 <ControlMotores+0x41e>
				{
					if(tmotor.t_delay_pid[i]<2200)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	4a29      	ldr	r2, [pc, #164]	; (8002418 <ControlMotores+0x280>)
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	f640 0297 	movw	r2, #2199	; 0x897
 800237c:	4293      	cmp	r3, r2
 800237e:	d808      	bhi.n	8002392 <ControlMotores+0x1fa>
						mandog[i]=vel[i];
 8002380:	79fa      	ldrb	r2, [r7, #7]
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	4923      	ldr	r1, [pc, #140]	; (8002414 <ControlMotores+0x27c>)
 8002386:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800238a:	4a28      	ldr	r2, [pc, #160]	; (800242c <ControlMotores+0x294>)
 800238c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					else
	//				mandog[i]=vel[i];
						mandog[i] = Algoritmo_PID(sensor.frequency[i], consigna[i], i);
				};
				break;
 8002390:	e111      	b.n	80025b6 <ControlMotores+0x41e>
						mandog[i] = Algoritmo_PID(sensor.frequency[i], consigna[i], i);
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <ControlMotores+0x2a4>)
 8002396:	3302      	adds	r3, #2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4a27      	ldr	r2, [pc, #156]	; (8002440 <ControlMotores+0x2a8>)
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	ed93 7a00 	vldr	s14, [r3]
 80023ac:	79fc      	ldrb	r4, [r7, #7]
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	eef0 0a47 	vmov.f32	s1, s14
 80023b6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ba:	f7ff fe2f 	bl	800201c <Algoritmo_PID>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <ControlMotores+0x294>)
 80023c4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				break;
 80023c8:	e0f5      	b.n	80025b6 <ControlMotores+0x41e>

			case 3:
				HAL_GPIO_WritePin(port_brake, pin_brake_motor[i], GPIO_PIN_SET);
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <ControlMotores+0x28c>)
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	4a15      	ldr	r2, [pc, #84]	; (8002428 <ControlMotores+0x290>)
 80023d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4619      	mov	r1, r3
 80023da:	f002 fd85 	bl	8004ee8 <HAL_GPIO_WritePin>
				mandog[i]=0;
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <ControlMotores+0x294>)
 80023e2:	2100      	movs	r1, #0
 80023e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(sensor.frequency[i]< UMBRAL_GIRO)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <ControlMotores+0x2a4>)
 80023ec:	3302      	adds	r3, #2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002444 <ControlMotores+0x2ac>
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d400      	bmi.n	8002406 <ControlMotores+0x26e>
					if(vel[i]>0)
					{
						marcha[i]=1;
					}*/
				}
				break;
 8002404:	e0da      	b.n	80025bc <ControlMotores+0x424>
						marcha[i]=0;
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4a01      	ldr	r2, [pc, #4]	; (8002410 <ControlMotores+0x278>)
 800240a:	2100      	movs	r1, #0
 800240c:	54d1      	strb	r1, [r2, r3]
				break;
 800240e:	e0d5      	b.n	80025bc <ControlMotores+0x424>
 8002410:	20000060 	.word	0x20000060
 8002414:	2000010c 	.word	0x2000010c
 8002418:	200000ac 	.word	0x200000ac
 800241c:	20000018 	.word	0x20000018
 8002420:	40020400 	.word	0x40020400
 8002424:	20000014 	.word	0x20000014
 8002428:	20000020 	.word	0x20000020
 800242c:	2000049c 	.word	0x2000049c
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000010 	.word	0x20000010
 8002438:	2000001c 	.word	0x2000001c
 800243c:	20000160 	.word	0x20000160
 8002440:	20000110 	.word	0x20000110
 8002444:	3dcccccd 	.word	0x3dcccccd
			case 11:
				HAL_GPIO_WritePin(port_direction,pin_direction_motor[i],PATRAS);
 8002448:	4b6d      	ldr	r3, [pc, #436]	; (8002600 <ControlMotores+0x468>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	4a6d      	ldr	r2, [pc, #436]	; (8002604 <ControlMotores+0x46c>)
 8002450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002454:	2201      	movs	r2, #1
 8002456:	4619      	mov	r1, r3
 8002458:	f002 fd46 	bl	8004ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(port_brake, pin_brake_motor[i], GPIO_PIN_RESET);
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <ControlMotores+0x470>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4a6a      	ldr	r2, [pc, #424]	; (800260c <ControlMotores+0x474>)
 8002464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002468:	2200      	movs	r2, #0
 800246a:	4619      	mov	r1, r3
 800246c:	f002 fd3c 	bl	8004ee8 <HAL_GPIO_WritePin>
				if(tmotor.t_arranque[i]>=TIEMPO_DESCONEXION_ARRANQUE)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	4a67      	ldr	r2, [pc, #412]	; (8002610 <ControlMotores+0x478>)
 8002474:	3302      	adds	r3, #2
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800247e:	d30c      	bcc.n	800249a <ControlMotores+0x302>
				{
					marcha[i]=12;
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4a64      	ldr	r2, [pc, #400]	; (8002614 <ControlMotores+0x47c>)
 8002484:	210c      	movs	r1, #12
 8002486:	54d1      	strb	r1, [r2, r3]
					ResetPID(i);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fd98 	bl	8001fc0 <ResetPID>
					tmotor.t_delay_pid[i]=0;
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4a5f      	ldr	r2, [pc, #380]	; (8002610 <ControlMotores+0x478>)
 8002494:	2100      	movs	r1, #0
 8002496:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(vel[i]==0)
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4a5e      	ldr	r2, [pc, #376]	; (8002618 <ControlMotores+0x480>)
 800249e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <ControlMotores+0x316>
					marcha[i]=0;
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	4a5a      	ldr	r2, [pc, #360]	; (8002614 <ControlMotores+0x47c>)
 80024aa:	2100      	movs	r1, #0
 80024ac:	54d1      	strb	r1, [r2, r3]
				mandog[i]=-vel[i];
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4a59      	ldr	r2, [pc, #356]	; (8002618 <ControlMotores+0x480>)
 80024b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	425b      	negs	r3, r3
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	b211      	sxth	r1, r2
 80024c0:	4a56      	ldr	r2, [pc, #344]	; (800261c <ControlMotores+0x484>)
 80024c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				break;
 80024c6:	e079      	b.n	80025bc <ControlMotores+0x424>
			case 12:
				HAL_GPIO_WritePin(port_direction,pin_direction_motor[i],PATRAS);
 80024c8:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <ControlMotores+0x468>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4a4d      	ldr	r2, [pc, #308]	; (8002604 <ControlMotores+0x46c>)
 80024d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4619      	mov	r1, r3
 80024d8:	f002 fd06 	bl	8004ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(port_disable,pin_disable_motor[i],GPIO_PIN_RESET);
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <ControlMotores+0x488>)
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4a50      	ldr	r2, [pc, #320]	; (8002624 <ControlMotores+0x48c>)
 80024e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024e8:	2200      	movs	r2, #0
 80024ea:	4619      	mov	r1, r3
 80024ec:	f002 fcfc 	bl	8004ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(port_brake, pin_brake_motor[i], GPIO_PIN_RESET);
 80024f0:	4b45      	ldr	r3, [pc, #276]	; (8002608 <ControlMotores+0x470>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4a45      	ldr	r2, [pc, #276]	; (800260c <ControlMotores+0x474>)
 80024f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024fc:	2200      	movs	r2, #0
 80024fe:	4619      	mov	r1, r3
 8002500:	f002 fcf2 	bl	8004ee8 <HAL_GPIO_WritePin>
				mandog[i]=-vel[i];
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a44      	ldr	r2, [pc, #272]	; (8002618 <ControlMotores+0x480>)
 8002508:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800250c:	b29b      	uxth	r3, r3
 800250e:	425b      	negs	r3, r3
 8002510:	b29a      	uxth	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	b211      	sxth	r1, r2
 8002516:	4a41      	ldr	r2, [pc, #260]	; (800261c <ControlMotores+0x484>)
 8002518:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				/*if(vel>=0)
					marcha[i]=3;*/
				if(vel[i]==0)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	4a3e      	ldr	r2, [pc, #248]	; (8002618 <ControlMotores+0x480>)
 8002520:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <ControlMotores+0x398>
					marcha[i]=3;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	4a3a      	ldr	r2, [pc, #232]	; (8002614 <ControlMotores+0x47c>)
 800252c:	2103      	movs	r1, #3
 800252e:	54d1      	strb	r1, [r2, r3]
				if(vel[i]>0)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	4a39      	ldr	r2, [pc, #228]	; (8002618 <ControlMotores+0x480>)
 8002534:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002538:	2b00      	cmp	r3, #0
 800253a:	dd0c      	ble.n	8002556 <ControlMotores+0x3be>
				{
					//marcha[i]=0;  //Probar esto
					marcha[i]=2;
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	4a35      	ldr	r2, [pc, #212]	; (8002614 <ControlMotores+0x47c>)
 8002540:	2102      	movs	r1, #2
 8002542:	54d1      	strb	r1, [r2, r3]
					ResetPID(i);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fd3a 	bl	8001fc0 <ResetPID>
					tmotor.t_delay_pid[i]=0;
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4a30      	ldr	r2, [pc, #192]	; (8002610 <ControlMotores+0x478>)
 8002550:	2100      	movs	r1, #0
 8002552:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(vel[i]<0)
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <ControlMotores+0x480>)
 800255a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	da2b      	bge.n	80025ba <ControlMotores+0x422>
				{
					if(tmotor.t_delay_pid[i]<2000)
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <ControlMotores+0x478>)
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800256e:	d20c      	bcs.n	800258a <ControlMotores+0x3f2>
						mandog[i]=-vel[i];
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4a29      	ldr	r2, [pc, #164]	; (8002618 <ControlMotores+0x480>)
 8002574:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002578:	b29b      	uxth	r3, r3
 800257a:	425b      	negs	r3, r3
 800257c:	b29a      	uxth	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	b211      	sxth	r1, r2
 8002582:	4a26      	ldr	r2, [pc, #152]	; (800261c <ControlMotores+0x484>)
 8002584:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					else
	//				mandog[i]=vel[i];
						mandog[i] = Algoritmo_PID(sensor.frequency[i], consigna_vmin, i);
				}
				break;
 8002588:	e017      	b.n	80025ba <ControlMotores+0x422>
						mandog[i] = Algoritmo_PID(sensor.frequency[i], consigna_vmin, i);
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <ControlMotores+0x490>)
 800258e:	3302      	adds	r3, #2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	79fc      	ldrb	r4, [r7, #7]
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800262c <ControlMotores+0x494>
 80025a2:	eeb0 0a67 	vmov.f32	s0, s15
 80025a6:	f7ff fd39 	bl	800201c <Algoritmo_PID>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <ControlMotores+0x484>)
 80025b0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				break;
 80025b4:	e001      	b.n	80025ba <ControlMotores+0x422>
				break;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <ControlMotores+0x424>
				break;
 80025ba:	bf00      	nop
		for(i=0;i<2;i++)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	3301      	adds	r3, #1
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f67f aded 	bls.w	80021a4 <ControlMotores+0xc>
			};

			//HAL_DAC_SetValue(&hdac, pin_salida_motor[i] ,DAC_ALIGN_12B_R , mandog[i]);
		}

		for(i=0;i<2;i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	71fb      	strb	r3, [r7, #7]
 80025ce:	e00f      	b.n	80025f0 <ControlMotores+0x458>
			HAL_DAC_SetValue(&hdac, pin_salida_motor[i] ,DAC_ALIGN_12B_R , mandog[i]);
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <ControlMotores+0x498>)
 80025d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d8:	4619      	mov	r1, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	4a0f      	ldr	r2, [pc, #60]	; (800261c <ControlMotores+0x484>)
 80025de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025e2:	2200      	movs	r2, #0
 80025e4:	4813      	ldr	r0, [pc, #76]	; (8002634 <ControlMotores+0x49c>)
 80025e6:	f001 fe5c 	bl	80042a2 <HAL_DAC_SetValue>
		for(i=0;i<2;i++)
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	3301      	adds	r3, #1
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d9ec      	bls.n	80025d0 <ControlMotores+0x438>

}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}
 8002600:	20000010 	.word	0x20000010
 8002604:	2000001c 	.word	0x2000001c
 8002608:	20000014 	.word	0x20000014
 800260c:	20000020 	.word	0x20000020
 8002610:	200000ac 	.word	0x200000ac
 8002614:	20000060 	.word	0x20000060
 8002618:	2000010c 	.word	0x2000010c
 800261c:	2000049c 	.word	0x2000049c
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000018 	.word	0x20000018
 8002628:	20000160 	.word	0x20000160
 800262c:	3f4ccccd 	.word	0x3f4ccccd
 8002630:	20000024 	.word	0x20000024
 8002634:	200003b4 	.word	0x200003b4

08002638 <Navegacion>:
void Navegacion(void);
void ActualizaEstados(void);
void MaquinaEstados(void);

void Navegacion(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	static uint8_t inicio;

	if(inicio==0)
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <Navegacion+0x48>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <Navegacion+0x30>
	{
		/* Solo se ejecuta de forma incicial
		 * Actualiza el estado de partida y futuro
		 * Trasmite el estado actual
		 * */
		state.current=ST_INACTIVE;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <Navegacion+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
		state.next = ST_INACTIVE;
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <Navegacion+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	705a      	strb	r2, [r3, #1]
		TransmiteEvento(EVENTO_ESTADO,state.current);
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <Navegacion+0x4c>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe fc26 	bl	8000ea8 <TransmiteEvento>
		inicio=1;
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <Navegacion+0x48>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
		state.tiempo_estado=0;
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <Navegacion+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
	}


	if(state.tiempo_estado > TIEMPO_TRANSICION)
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <Navegacion+0x4c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b64      	cmp	r3, #100	; 0x64
 800266e:	d904      	bls.n	800267a <Navegacion+0x42>
	{
		state.tiempo_estado = 0;
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <Navegacion+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
		MaquinaEstados();
 8002676:	f000 f807 	bl	8002688 <MaquinaEstados>
	}


}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000062 	.word	0x20000062
 8002684:	20000104 	.word	0x20000104

08002688 <MaquinaEstados>:


void MaquinaEstados(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	static uint8_t dir;


	switch(state.current)
 800268c:	4bae      	ldr	r3, [pc, #696]	; (8002948 <MaquinaEstados+0x2c0>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b04      	cmp	r3, #4
 8002692:	f200 8195 	bhi.w	80029c0 <MaquinaEstados+0x338>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <MaquinaEstados+0x14>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026b1 	.word	0x080026b1
 80026a0:	08002707 	.word	0x08002707
 80026a4:	08002751 	.word	0x08002751
 80026a8:	080028c9 	.word	0x080028c9
 80026ac:	08002819 	.word	0x08002819
		 * verde está apagado y el amarillo parpadea a distinto ritmo si
		 * el bluetooth está o no conectado. Una vez conectado, la recepción
		 * del comando GO desde la aplicación remota, hace que se transite
		 * al estado ACTIVE*/
		case ST_INACTIVE:
			ActualizaVelocidad(0,0);
 80026b0:	2100      	movs	r1, #0
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7ff fc32 	bl	8001f1c <ActualizaVelocidad>
			if(com.bt_state == BT_DISCONNECTED)
 80026b8:	4ba4      	ldr	r3, [pc, #656]	; (800294c <MaquinaEstados+0x2c4>)
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <MaquinaEstados+0x40>
				hard.leds = LEDY_BLINK_FAST|LEDG_OFF;
 80026c0:	4ba3      	ldr	r3, [pc, #652]	; (8002950 <MaquinaEstados+0x2c8>)
 80026c2:	2203      	movs	r2, #3
 80026c4:	709a      	strb	r2, [r3, #2]
				{
					state.next = ST_ACTIVE;
					Play(AUDIO_SILENCIO);
				}
			}
			break;
 80026c6:	e172      	b.n	80029ae <MaquinaEstados+0x326>
				if((sensor.obs&0x1F)  && (!hard.dis_eco))
 80026c8:	4ba2      	ldr	r3, [pc, #648]	; (8002954 <MaquinaEstados+0x2cc>)
 80026ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <MaquinaEstados+0x5c>
 80026d4:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <MaquinaEstados+0x2c8>)
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <MaquinaEstados+0x5c>
					hard.leds = LEDY_BLINK_SLOW|LEDG_BLINK_SLOW;
 80026dc:	4b9c      	ldr	r3, [pc, #624]	; (8002950 <MaquinaEstados+0x2c8>)
 80026de:	2222      	movs	r2, #34	; 0x22
 80026e0:	709a      	strb	r2, [r3, #2]
 80026e2:	e002      	b.n	80026ea <MaquinaEstados+0x62>
					hard.leds = LEDY_BLINK_SLOW|LEDG_OFF;
 80026e4:	4b9a      	ldr	r3, [pc, #616]	; (8002950 <MaquinaEstados+0x2c8>)
 80026e6:	2202      	movs	r2, #2
 80026e8:	709a      	strb	r2, [r3, #2]
				if((com.bt_command & 0xF0) == BT_COMANDO_GO)
 80026ea:	4b98      	ldr	r3, [pc, #608]	; (800294c <MaquinaEstados+0x2c4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f2:	2bf0      	cmp	r3, #240	; 0xf0
 80026f4:	f040 815b 	bne.w	80029ae <MaquinaEstados+0x326>
					state.next = ST_ACTIVE;
 80026f8:	4b93      	ldr	r3, [pc, #588]	; (8002948 <MaquinaEstados+0x2c0>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	705a      	strb	r2, [r3, #1]
					Play(AUDIO_SILENCIO);
 80026fe:	2003      	movs	r0, #3
 8002700:	f000 ff72 	bl	80035e8 <Play>
			break;
 8002704:	e153      	b.n	80029ae <MaquinaEstados+0x326>
			 * permite la operación de la plataforma. Esperamos a que el usuario
			 * de la silla presione el pulsador. Una vez detectado, pasamos al
			 * estado de movimiento. El Led amarillo permanece iluminado, y
			 * el verde parpadeando a baja velocidad.
			 * */
			ActualizaVelocidad(0,0);
 8002706:	2100      	movs	r1, #0
 8002708:	2000      	movs	r0, #0
 800270a:	f7ff fc07 	bl	8001f1c <ActualizaVelocidad>
			hard.leds = LEDY_ON|LEDG_BLINK_SLOW;
 800270e:	4b90      	ldr	r3, [pc, #576]	; (8002950 <MaquinaEstados+0x2c8>)
 8002710:	2221      	movs	r2, #33	; 0x21
 8002712:	709a      	strb	r2, [r3, #2]
			if(com.bt_state ==BT_DISCONNECTED || com.bt_command == BT_COMANDO_INACTIVO)
 8002714:	4b8d      	ldr	r3, [pc, #564]	; (800294c <MaquinaEstados+0x2c4>)
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <MaquinaEstados+0x9c>
 800271c:	4b8b      	ldr	r3, [pc, #556]	; (800294c <MaquinaEstados+0x2c4>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d106      	bne.n	8002732 <MaquinaEstados+0xaa>
			{
				state.next = ST_INACTIVE;
 8002724:	4b88      	ldr	r3, [pc, #544]	; (8002948 <MaquinaEstados+0x2c0>)
 8002726:	2200      	movs	r2, #0
 8002728:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_SILENCIO);
 800272a:	2003      	movs	r0, #3
 800272c:	f000 ff5c 	bl	80035e8 <Play>
			{
				state.next = ST_FORWARD_MOVEMENT;
				tick.tiempo=0;
				Play(AUDIO_MOTOR);
			}
			break;
 8002730:	e13f      	b.n	80029b2 <MaquinaEstados+0x32a>
			if(hard.n_puls  > 0)
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <MaquinaEstados+0x2c8>)
 8002734:	78db      	ldrb	r3, [r3, #3]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 813b 	beq.w	80029b2 <MaquinaEstados+0x32a>
				state.next = ST_FORWARD_MOVEMENT;
 800273c:	4b82      	ldr	r3, [pc, #520]	; (8002948 <MaquinaEstados+0x2c0>)
 800273e:	2202      	movs	r2, #2
 8002740:	705a      	strb	r2, [r3, #1]
				tick.tiempo=0;
 8002742:	4b85      	ldr	r3, [pc, #532]	; (8002958 <MaquinaEstados+0x2d0>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
				Play(AUDIO_MOTOR);
 8002748:	2004      	movs	r0, #4
 800274a:	f000 ff4d 	bl	80035e8 <Play>
			break;
 800274e:	e130      	b.n	80029b2 <MaquinaEstados+0x32a>
			 * Volvemos a ACTIVE si se recibe comando STOP o expira el tiempo de navegación
			 * Vamos a BACKWARD_GIRO si detectamos obstáculo delantero o se recibe comando
			 * obstáculo
			 *
			 * */
			ActualizaVelocidad(VEL,VEL);
 8002750:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002754:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002758:	f7ff fbe0 	bl	8001f1c <ActualizaVelocidad>
			hard.leds = LEDY_ON|LEDG_ON;
 800275c:	4b7c      	ldr	r3, [pc, #496]	; (8002950 <MaquinaEstados+0x2c8>)
 800275e:	2211      	movs	r2, #17
 8002760:	709a      	strb	r2, [r3, #2]
			if(com.bt_state  == BT_DISCONNECTED || com.bt_command == BT_COMANDO_INACTIVO)
 8002762:	4b7a      	ldr	r3, [pc, #488]	; (800294c <MaquinaEstados+0x2c4>)
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <MaquinaEstados+0xea>
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <MaquinaEstados+0x2c4>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b60      	cmp	r3, #96	; 0x60
 8002770:	d106      	bne.n	8002780 <MaquinaEstados+0xf8>
			{
				state.next=ST_INACTIVE;
 8002772:	4b75      	ldr	r3, [pc, #468]	; (8002948 <MaquinaEstados+0x2c0>)
 8002774:	2200      	movs	r2, #0
 8002776:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_SILENCIO);
 8002778:	2003      	movs	r0, #3
 800277a:	f000 ff35 	bl	80035e8 <Play>
 800277e:	e04a      	b.n	8002816 <MaquinaEstados+0x18e>
			}
			else
			if((com.bt_command & 0XF0)== BT_COMANDO_STOP || tick.tiempo >= par.tiempo || ((sensor.obs&0x7) && (sensor.obs&0x18) && (!hard.dis_eco)))
 8002780:	4b72      	ldr	r3, [pc, #456]	; (800294c <MaquinaEstados+0x2c4>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d015      	beq.n	80027b8 <MaquinaEstados+0x130>
 800278c:	4b72      	ldr	r3, [pc, #456]	; (8002958 <MaquinaEstados+0x2d0>)
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b72      	ldr	r3, [pc, #456]	; (800295c <MaquinaEstados+0x2d4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d20f      	bcs.n	80027b8 <MaquinaEstados+0x130>
 8002798:	4b6e      	ldr	r3, [pc, #440]	; (8002954 <MaquinaEstados+0x2cc>)
 800279a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <MaquinaEstados+0x13e>
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <MaquinaEstados+0x2cc>)
 80027a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027a8:	f003 0318 	and.w	r3, r3, #24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <MaquinaEstados+0x13e>
 80027b0:	4b67      	ldr	r3, [pc, #412]	; (8002950 <MaquinaEstados+0x2c8>)
 80027b2:	791b      	ldrb	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <MaquinaEstados+0x13e>
			{
				state.next=ST_ACTIVE;
 80027b8:	4b63      	ldr	r3, [pc, #396]	; (8002948 <MaquinaEstados+0x2c0>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_SILENCIO);
 80027be:	2003      	movs	r0, #3
 80027c0:	f000 ff12 	bl	80035e8 <Play>
 80027c4:	e027      	b.n	8002816 <MaquinaEstados+0x18e>
			}
			else
			if(((sensor.obs&0x7)&&(!hard.dis_eco) )|| ((com.bt_command &0XF0 )== BT_COMANDO_OBSTACULO))
 80027c6:	4b63      	ldr	r3, [pc, #396]	; (8002954 <MaquinaEstados+0x2cc>)
 80027c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <MaquinaEstados+0x152>
 80027d2:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <MaquinaEstados+0x2c8>)
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <MaquinaEstados+0x15e>
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <MaquinaEstados+0x2c4>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e2:	2b30      	cmp	r3, #48	; 0x30
 80027e4:	d109      	bne.n	80027fa <MaquinaEstados+0x172>
			{
				state.next=ST_BACKWARD_MOVEMENT;
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <MaquinaEstados+0x2c0>)
 80027e8:	2203      	movs	r2, #3
 80027ea:	705a      	strb	r2, [r3, #1]
				tick.tiempo_backward=0;
 80027ec:	4b5a      	ldr	r3, [pc, #360]	; (8002958 <MaquinaEstados+0x2d0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
				Play(AUDIO_BEEPATRAS);
 80027f2:	2002      	movs	r0, #2
 80027f4:	f000 fef8 	bl	80035e8 <Play>
 80027f8:	e00d      	b.n	8002816 <MaquinaEstados+0x18e>
			}
			else
				if(sensor.obs&0x700)
 80027fa:	4b56      	ldr	r3, [pc, #344]	; (8002954 <MaquinaEstados+0x2cc>)
 80027fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80d7 	beq.w	80029b6 <MaquinaEstados+0x32e>
					ActualizaVelocidad(VELR,VELR);
 8002808:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800280c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002810:	f7ff fb84 	bl	8001f1c <ActualizaVelocidad>
					ActualizaVelocidad(VELR,VEL);
				else
					if( sensor.obs&0x200)
						ActualizaVelocidad(VELR,VELR);*/

			break;
 8002814:	e0cf      	b.n	80029b6 <MaquinaEstados+0x32e>
 8002816:	e0ce      	b.n	80029b6 <MaquinaEstados+0x32e>
			 * Vamos a BACKWARD si expira el tiempo de giro trasero
			 * */



			if(dir)
 8002818:	4b51      	ldr	r3, [pc, #324]	; (8002960 <MaquinaEstados+0x2d8>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d004      	beq.n	800282a <MaquinaEstados+0x1a2>
				ActualizaVelocidad(0,-VELR);
 8002820:	4950      	ldr	r1, [pc, #320]	; (8002964 <MaquinaEstados+0x2dc>)
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff fb7a 	bl	8001f1c <ActualizaVelocidad>
 8002828:	e003      	b.n	8002832 <MaquinaEstados+0x1aa>
			else
				ActualizaVelocidad(-VELR,0);
 800282a:	2100      	movs	r1, #0
 800282c:	484d      	ldr	r0, [pc, #308]	; (8002964 <MaquinaEstados+0x2dc>)
 800282e:	f7ff fb75 	bl	8001f1c <ActualizaVelocidad>
			hard.leds = LEDY_ON|LEDG_BLINK_FAST;
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <MaquinaEstados+0x2c8>)
 8002834:	2231      	movs	r2, #49	; 0x31
 8002836:	709a      	strb	r2, [r3, #2]
			if(com.bt_state == BT_DISCONNECTED || com.bt_command == BT_COMANDO_INACTIVO)
 8002838:	4b44      	ldr	r3, [pc, #272]	; (800294c <MaquinaEstados+0x2c4>)
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <MaquinaEstados+0x1c0>
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <MaquinaEstados+0x2c4>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d106      	bne.n	8002856 <MaquinaEstados+0x1ce>
			{
				state.next=ST_INACTIVE;
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <MaquinaEstados+0x2c0>)
 800284a:	2200      	movs	r2, #0
 800284c:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_SILENCIO);
 800284e:	2003      	movs	r0, #3
 8002850:	f000 feca 	bl	80035e8 <Play>
 8002854:	e037      	b.n	80028c6 <MaquinaEstados+0x23e>
			}
			else
			if(((com.bt_command & 0XF0)== BT_COMANDO_STOP )|| tick.tiempo >=par.tiempo )
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <MaquinaEstados+0x2c4>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285e:	2b40      	cmp	r3, #64	; 0x40
 8002860:	d005      	beq.n	800286e <MaquinaEstados+0x1e6>
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <MaquinaEstados+0x2d0>)
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	4b3d      	ldr	r3, [pc, #244]	; (800295c <MaquinaEstados+0x2d4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d306      	bcc.n	800287c <MaquinaEstados+0x1f4>
			{
				state.next=ST_ACTIVE;
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <MaquinaEstados+0x2c0>)
 8002870:	2201      	movs	r2, #1
 8002872:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_SILENCIO);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 feb7 	bl	80035e8 <Play>
 800287a:	e024      	b.n	80028c6 <MaquinaEstados+0x23e>
			}else
			if(((sensor.obs&0x18)&&(!hard.dis_eco)) || ((com.bt_command & 0Xf0) == BT_COMANDO_OBSTACULO))
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <MaquinaEstados+0x2cc>)
 800287e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002880:	f003 0318 	and.w	r3, r3, #24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <MaquinaEstados+0x208>
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <MaquinaEstados+0x2c8>)
 800288a:	791b      	ldrb	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <MaquinaEstados+0x214>
 8002890:	4b2e      	ldr	r3, [pc, #184]	; (800294c <MaquinaEstados+0x2c4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002898:	2b30      	cmp	r3, #48	; 0x30
 800289a:	d106      	bne.n	80028aa <MaquinaEstados+0x222>
			{
				state.next=ST_FORWARD_MOVEMENT;
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <MaquinaEstados+0x2c0>)
 800289e:	2202      	movs	r2, #2
 80028a0:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_FRENAZO);
 80028a2:	2005      	movs	r0, #5
 80028a4:	f000 fea0 	bl	80035e8 <Play>
 80028a8:	e00d      	b.n	80028c6 <MaquinaEstados+0x23e>
			}else
			if(tick.tiempo_backward >= par.tiempo_rotate)
 80028aa:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <MaquinaEstados+0x2d0>)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <MaquinaEstados+0x2d4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	f0c0 8081 	bcc.w	80029ba <MaquinaEstados+0x332>
			{
				state.next = ST_FORWARD_MOVEMENT;
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <MaquinaEstados+0x2c0>)
 80028ba:	2202      	movs	r2, #2
 80028bc:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_MOTOR);
 80028be:	2004      	movs	r0, #4
 80028c0:	f000 fe92 	bl	80035e8 <Play>
			}
			break;
 80028c4:	e079      	b.n	80029ba <MaquinaEstados+0x332>
 80028c6:	e078      	b.n	80029ba <MaquinaEstados+0x332>
			 * Vamos a INACTIVE si se pierde conexión Bluetooth
			 * Vamos a ACTIVE si se recibe comando STOP o expira el tiempo de navegación
			 * Vamos a FORWARD si se recibe comando OBSTACULO, se detecta obstáculo trasero
			 * o expira el tiempo de navegacion trasera
			 * */
			ActualizaVelocidad(-VEL,-VEL);
 80028c8:	4927      	ldr	r1, [pc, #156]	; (8002968 <MaquinaEstados+0x2e0>)
 80028ca:	4827      	ldr	r0, [pc, #156]	; (8002968 <MaquinaEstados+0x2e0>)
 80028cc:	f7ff fb26 	bl	8001f1c <ActualizaVelocidad>
			hard.leds = LEDY_ON|LEDG_BLINK_FAST;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <MaquinaEstados+0x2c8>)
 80028d2:	2231      	movs	r2, #49	; 0x31
 80028d4:	709a      	strb	r2, [r3, #2]
			if(com.bt_state == BT_DISCONNECTED || com.bt_command == BT_COMANDO_INACTIVO)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <MaquinaEstados+0x2c4>)
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <MaquinaEstados+0x25e>
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <MaquinaEstados+0x2c4>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b60      	cmp	r3, #96	; 0x60
 80028e4:	d106      	bne.n	80028f4 <MaquinaEstados+0x26c>
			{
				state.next=ST_INACTIVE;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <MaquinaEstados+0x2c0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_SILENCIO);
 80028ec:	2003      	movs	r0, #3
 80028ee:	f000 fe7b 	bl	80035e8 <Play>
 80028f2:	e05b      	b.n	80029ac <MaquinaEstados+0x324>
			}
			else
			if((com.bt_command&0XF0) == BT_COMANDO_STOP || tick.tiempo >=par.tiempo)
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <MaquinaEstados+0x2c4>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d005      	beq.n	800290c <MaquinaEstados+0x284>
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <MaquinaEstados+0x2d0>)
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	4b15      	ldr	r3, [pc, #84]	; (800295c <MaquinaEstados+0x2d4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d306      	bcc.n	800291a <MaquinaEstados+0x292>
			{
				state.next=ST_ACTIVE;
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MaquinaEstados+0x2c0>)
 800290e:	2201      	movs	r2, #1
 8002910:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_SILENCIO);
 8002912:	2003      	movs	r0, #3
 8002914:	f000 fe68 	bl	80035e8 <Play>
 8002918:	e048      	b.n	80029ac <MaquinaEstados+0x324>
			}else
			if(((sensor.obs&0x18)&&!hard.dis_eco) || ((com.bt_command & 0XF0) == BT_COMANDO_OBSTACULO) )
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MaquinaEstados+0x2cc>)
 800291c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800291e:	f003 0318 	and.w	r3, r3, #24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <MaquinaEstados+0x2a6>
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <MaquinaEstados+0x2c8>)
 8002928:	791b      	ldrb	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <MaquinaEstados+0x2b2>
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <MaquinaEstados+0x2c4>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002936:	2b30      	cmp	r3, #48	; 0x30
 8002938:	d118      	bne.n	800296c <MaquinaEstados+0x2e4>
			{
				state.next=ST_FORWARD_MOVEMENT;
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <MaquinaEstados+0x2c0>)
 800293c:	2202      	movs	r2, #2
 800293e:	705a      	strb	r2, [r3, #1]
				Play(AUDIO_FRENAZO);
 8002940:	2005      	movs	r0, #5
 8002942:	f000 fe51 	bl	80035e8 <Play>
 8002946:	e031      	b.n	80029ac <MaquinaEstados+0x324>
 8002948:	20000104 	.word	0x20000104
 800294c:	200000bc 	.word	0x200000bc
 8002950:	20000188 	.word	0x20000188
 8002954:	20000160 	.word	0x20000160
 8002958:	20000118 	.word	0x20000118
 800295c:	200000f0 	.word	0x200000f0
 8002960:	20000063 	.word	0x20000063
 8002964:	fffffed4 	.word	0xfffffed4
 8002968:	fffffe70 	.word	0xfffffe70
			}
			else
				if (  tick.tiempo_backward>=par.tiempo_atras)
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MaquinaEstados+0x340>)
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <MaquinaEstados+0x344>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	429a      	cmp	r2, r3
 8002976:	d322      	bcc.n	80029be <MaquinaEstados+0x336>
				{
					tick.tiempo_backward=0;
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MaquinaEstados+0x340>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
					state.next = ST_BACKWARD_GIRO;
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <MaquinaEstados+0x348>)
 8002980:	2204      	movs	r2, #4
 8002982:	705a      	strb	r2, [r3, #1]
					if(sensor.obs&0x1)
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MaquinaEstados+0x34c>)
 8002986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <MaquinaEstados+0x310>
								dir = 1;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MaquinaEstados+0x350>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
							else if (sensor.obs&0x6)
								dir = 0;
					//Play(AUDIO_BEEPATRAS);
				}
			break;
 8002996:	e012      	b.n	80029be <MaquinaEstados+0x336>
							else if (sensor.obs&0x6)
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MaquinaEstados+0x34c>)
 800299a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800299c:	f003 0306 	and.w	r3, r3, #6
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <MaquinaEstados+0x336>
								dir = 0;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MaquinaEstados+0x350>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
			break;
 80029aa:	e008      	b.n	80029be <MaquinaEstados+0x336>
 80029ac:	e007      	b.n	80029be <MaquinaEstados+0x336>
			break;
 80029ae:	bf00      	nop
 80029b0:	e006      	b.n	80029c0 <MaquinaEstados+0x338>
			break;
 80029b2:	bf00      	nop
 80029b4:	e004      	b.n	80029c0 <MaquinaEstados+0x338>
			break;
 80029b6:	bf00      	nop
 80029b8:	e002      	b.n	80029c0 <MaquinaEstados+0x338>
			break;
 80029ba:	bf00      	nop
 80029bc:	e000      	b.n	80029c0 <MaquinaEstados+0x338>
			break;
 80029be:	bf00      	nop
	}
//	state.current=state.next;
	ActualizaEstados();
 80029c0:	f000 f80c 	bl	80029dc <ActualizaEstados>
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000118 	.word	0x20000118
 80029cc:	200000f0 	.word	0x200000f0
 80029d0:	20000104 	.word	0x20000104
 80029d4:	20000160 	.word	0x20000160
 80029d8:	20000063 	.word	0x20000063

080029dc <ActualizaEstados>:

void ActualizaEstados(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	 * TIEMPO_TRANSICION, produce la actualización del estado y la transmisión del
	 * mensaje pertinente.
	 *
	 *
	 *****************************************************************/
	if(state.next != state.current)
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <ActualizaEstados+0x4c>)
 80029e2:	785a      	ldrb	r2, [r3, #1]
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <ActualizaEstados+0x4c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d01b      	beq.n	8002a24 <ActualizaEstados+0x48>
	{
		state.current=state.next;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <ActualizaEstados+0x4c>)
 80029ee:	785a      	ldrb	r2, [r3, #1]
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <ActualizaEstados+0x4c>)
 80029f2:	701a      	strb	r2, [r3, #0]
		TransmiteEvento(EVENTO_ESTADO,state.current);
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <ActualizaEstados+0x4c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7fe fa54 	bl	8000ea8 <TransmiteEvento>
		if(state.current==ST_ACTIVE)
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <ActualizaEstados+0x4c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d102      	bne.n	8002a0e <ActualizaEstados+0x32>
			hard.n_puls=0;
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <ActualizaEstados+0x50>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	70da      	strb	r2, [r3, #3]
		if(state.current!=ST_INACTIVE)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <ActualizaEstados+0x4c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <ActualizaEstados+0x42>
			com.bt_command=BT_COMANDO_GO;
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <ActualizaEstados+0x54>)
 8002a18:	22f0      	movs	r2, #240	; 0xf0
 8002a1a:	701a      	strb	r2, [r3, #0]
		}
		break;

	}
*/
}
 8002a1c:	e002      	b.n	8002a24 <ActualizaEstados+0x48>
			com.bt_command= BT_COMANDO_STOP;
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <ActualizaEstados+0x54>)
 8002a20:	2240      	movs	r2, #64	; 0x40
 8002a22:	701a      	strb	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000104 	.word	0x20000104
 8002a2c:	20000188 	.word	0x20000188
 8002a30:	200000bc 	.word	0x200000bc
 8002a34:	00000000 	.word	0x00000000

08002a38 <GestorSensores>:




void GestorSensores(void)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
	 * */

	 static uint8_t primero;
	 uint8_t i;

	 if(primero==0)
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <GestorSensores+0x130>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d104      	bne.n	8002a50 <GestorSensores+0x18>
	 {
		 primero=1;
 8002a46:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <GestorSensores+0x130>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		 InicializaBuffers();
 8002a4c:	f000 f9c4 	bl	8002dd8 <InicializaBuffers>
	 }

	 SensoresNivel0(); //Gestión del nivel bajo de las medidas
 8002a50:	f000 fb0e 	bl	8003070 <SensoresNivel0>
     for(i=0;i<5;i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e02d      	b.n	8002ab6 <GestorSensores+0x7e>
    	 /*Cadda vez que se detecta una nueva medida de los
    	  * sensores de ultrasonido, se evalua la distancia
    	  * dividendo el tiempo entre 59. Esta medida se mete en
    	  * el buffer ECO para calcular la mediana, la cual se deposita
    	  * en sensor.median_eco[i]*/
            if(medida_nueva_eco[i]==1)
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4a43      	ldr	r2, [pc, #268]	; (8002b6c <GestorSensores+0x134>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d125      	bne.n	8002ab0 <GestorSensores+0x78>
            {
                  medida_nueva_eco[i]=0;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	4a41      	ldr	r2, [pc, #260]	; (8002b6c <GestorSensores+0x134>)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	54d1      	strb	r1, [r2, r3]
                  eco[i]/=59;
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <GestorSensores+0x138>)
 8002a70:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	493f      	ldr	r1, [pc, #252]	; (8002b74 <GestorSensores+0x13c>)
 8002a78:	fba1 1202 	umull	r1, r2, r1, r2
 8002a7c:	08d2      	lsrs	r2, r2, #3
 8002a7e:	b291      	uxth	r1, r2
 8002a80:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <GestorSensores+0x138>)
 8002a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                  WriteEcoValue(i, eco[i]);
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	4a39      	ldr	r2, [pc, #228]	; (8002b70 <GestorSensores+0x138>)
 8002a8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f922 	bl	8002cdc <WriteEcoValue>
                  sensor.median_eco[i]=MedianN(0,i,TAM_BUFFER_ECO);
 8002a98:	79fc      	ldrb	r4, [r7, #7]
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2205      	movs	r2, #5
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f000 fa2f 	bl	8002f04 <MedianN>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4933      	ldr	r1, [pc, #204]	; (8002b78 <GestorSensores+0x140>)
 8002aaa:	1d23      	adds	r3, r4, #4
 8002aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     for(i=0;i<5;i++)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	71fb      	strb	r3, [r7, #7]
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d9ce      	bls.n	8002a5a <GestorSensores+0x22>
//                  sensor.median_eco[i] = eco[i];

            }
      }
	for(i=0;i<2;i++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	71fb      	strb	r3, [r7, #7]
 8002ac0:	e03f      	b.n	8002b42 <GestorSensores+0x10a>
	{
            if(medida_nueva_hall[i]==1)
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <GestorSensores+0x144>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d137      	bne.n	8002b3c <GestorSensores+0x104>
            {
            	/*Se procede de forma similar a los sensores de ECO*/
                  medida_nueva_hall[i]=0;
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <GestorSensores+0x144>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	54d1      	strb	r1, [r2, r3]
                  WriteHallValue(i, hall[i]);
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <GestorSensores+0x148>)
 8002ad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f9bb 	bl	8002e5c <WriteHallValue>
                  sensor.median_hall[i] = MedianN(1,i,TAM_BUFFER_HALL);
 8002ae6:	79fc      	ldrb	r4, [r7, #7]
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	2205      	movs	r2, #5
 8002aec:	4619      	mov	r1, r3
 8002aee:	2001      	movs	r0, #1
 8002af0:	f000 fa08 	bl	8002f04 <MedianN>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <GestorSensores+0x140>)
 8002af8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
                  sensor.frequency[i]=1000000.0/(45.0*sensor.median_hall[i]);  //Tal y como tiene Félix
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <GestorSensores+0x140>)
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fcc1 	bl	800048c <__aeabi_ui2d>
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <GestorSensores+0x14c>)
 8002b10:	f7fd fd36 	bl	8000580 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	a111      	add	r1, pc, #68	; (adr r1, 8002b60 <GestorSensores+0x128>)
 8002b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b1e:	f7fd fe59 	bl	80007d4 <__aeabi_ddiv>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	79fc      	ldrb	r4, [r7, #7]
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f7fd ff62 	bl	80009f4 <__aeabi_d2f>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4911      	ldr	r1, [pc, #68]	; (8002b78 <GestorSensores+0x140>)
 8002b34:	1ca3      	adds	r3, r4, #2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	601a      	str	r2, [r3, #0]
	for(i=0;i<2;i++)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	71fb      	strb	r3, [r7, #7]
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d9bc      	bls.n	8002ac2 <GestorSensores+0x8a>

            }
      }


	sensor.obs = DetectaObstaculo(); //Detección de obstáculos
 8002b48:	f000 f81e 	bl	8002b88 <DetectaObstaculo>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <GestorSensores+0x140>)
 8002b52:	849a      	strh	r2, [r3, #36]	; 0x24
	DetectaMovimiento();  //Envía mensaje si hay cambio de parada-movimiento o de movimiento-parada
 8002b54:	f000 f872 	bl	8002c3c <DetectaMovimiento>

}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	00000000 	.word	0x00000000
 8002b64:	412e8480 	.word	0x412e8480
 8002b68:	20000064 	.word	0x20000064
 8002b6c:	20000514 	.word	0x20000514
 8002b70:	200004d4 	.word	0x200004d4
 8002b74:	22b63cbf 	.word	0x22b63cbf
 8002b78:	20000160 	.word	0x20000160
 8002b7c:	20000190 	.word	0x20000190
 8002b80:	20000140 	.word	0x20000140
 8002b84:	40468000 	.word	0x40468000

08002b88 <DetectaObstaculo>:




uint16_t DetectaObstaculo(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
      uint16_t pos_obstaculo=0,calculo=0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	81fb      	strh	r3, [r7, #14]
 8002b92:	2300      	movs	r3, #0
 8002b94:	81bb      	strh	r3, [r7, #12]
      uint8_t  i,j,k;
      uint16_t distancia[2] = {par.obs_near, par.obs_far}; //Cambiar el tamaño
 8002b96:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <DetectaObstaculo+0xac>)
 8002b98:	89db      	ldrh	r3, [r3, #14]
 8002b9a:	80bb      	strh	r3, [r7, #4]
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <DetectaObstaculo+0xac>)
 8002b9e:	8a1b      	ldrh	r3, [r3, #16]
 8002ba0:	80fb      	strh	r3, [r7, #6]
       *  f0 = 1 si el sensor 0 detecta obstáculo a distancia lejana
       *
       * */


      for(i=0;i<=1;i++)  //Bucle para distancia cercana y lejana
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	72fb      	strb	r3, [r7, #11]
 8002ba6:	e03a      	b.n	8002c1e <DetectaObstaculo+0x96>
            for(j=0;j<5;j++) //Bucle para los sensores
 8002ba8:	2300      	movs	r3, #0
 8002baa:	72bb      	strb	r3, [r7, #10]
 8002bac:	e031      	b.n	8002c12 <DetectaObstaculo+0x8a>
            {
                  cont=0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	723b      	strb	r3, [r7, #8]
                  for(k=0;k<TAM_BUFFER_ECO;k++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	727b      	strb	r3, [r7, #9]
 8002bb6:	e017      	b.n	8002be8 <DetectaObstaculo+0x60>
                  {
                        if(eco_buffer[j][k]<distancia[i])
 8002bb8:	7aba      	ldrb	r2, [r7, #10]
 8002bba:	7a79      	ldrb	r1, [r7, #9]
 8002bbc:	481e      	ldr	r0, [pc, #120]	; (8002c38 <DetectaObstaculo+0xb0>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	f107 0110 	add.w	r1, r7, #16
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d202      	bcs.n	8002be2 <DetectaObstaculo+0x5a>
                              cont+=1;
 8002bdc:	7a3b      	ldrb	r3, [r7, #8]
 8002bde:	3301      	adds	r3, #1
 8002be0:	723b      	strb	r3, [r7, #8]
                  for(k=0;k<TAM_BUFFER_ECO;k++)
 8002be2:	7a7b      	ldrb	r3, [r7, #9]
 8002be4:	3301      	adds	r3, #1
 8002be6:	727b      	strb	r3, [r7, #9]
 8002be8:	7a7b      	ldrb	r3, [r7, #9]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d9e4      	bls.n	8002bb8 <DetectaObstaculo+0x30>
                  }
                  if(cont>= (TAM_BUFFER_ECO/2))
 8002bee:	7a3b      	ldrb	r3, [r7, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d907      	bls.n	8002c04 <DetectaObstaculo+0x7c>
                        calculo = ( 1<<(8*i) ) << j;
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	7abb      	ldrb	r3, [r7, #10]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	81bb      	strh	r3, [r7, #12]
                  pos_obstaculo |= calculo;
 8002c04:	89fa      	ldrh	r2, [r7, #14]
 8002c06:	89bb      	ldrh	r3, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	81fb      	strh	r3, [r7, #14]
            for(j=0;j<5;j++) //Bucle para los sensores
 8002c0c:	7abb      	ldrb	r3, [r7, #10]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	72bb      	strb	r3, [r7, #10]
 8002c12:	7abb      	ldrb	r3, [r7, #10]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d9ca      	bls.n	8002bae <DetectaObstaculo+0x26>
      for(i=0;i<=1;i++)  //Bucle para distancia cercana y lejana
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	72fb      	strb	r3, [r7, #11]
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d9c1      	bls.n	8002ba8 <DetectaObstaculo+0x20>

            }
      return pos_obstaculo;
 8002c24:	89fb      	ldrh	r3, [r7, #14]

}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	200000f0 	.word	0x200000f0
 8002c38:	200004e0 	.word	0x200004e0

08002c3c <DetectaMovimiento>:


void DetectaMovimiento(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	 * está en movimiento, se pasa al estado MOVIMIENTO y se envía el mensaje
	 * si en el estado MOVIMIENTO, se detecta que ambas ruedas están
	 * paradas, se pasa al estado PARADO y se manda un mensaje
	 *
	 ****************************************************/
	switch(state_movement)
 8002c40:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <DetectaMovimiento+0x94>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <DetectaMovimiento+0x12>
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d01f      	beq.n	8002c8c <DetectaMovimiento+0x50>
	    case MOVIMIENTO: if(sensor.frequency[0]< UMBRAL_GIRO && sensor.frequency[1]<UMBRAL_GIRO){
	        state_movement=0;
	        TransmiteEvento(EVENTO_MOVIMIENTO,state_movement);}
	    	break;
	 }
}
 8002c4c:	e03e      	b.n	8002ccc <DetectaMovimiento+0x90>
		case PARADO: if(sensor.frequency[0] > UMBRAL_GIRO || sensor.frequency[1]> UMBRAL_GIRO){
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <DetectaMovimiento+0x98>)
 8002c50:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c54:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002cd8 <DetectaMovimiento+0x9c>
 8002c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	dc0a      	bgt.n	8002c78 <DetectaMovimiento+0x3c>
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <DetectaMovimiento+0x98>)
 8002c64:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c68:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002cd8 <DetectaMovimiento+0x9c>
 8002c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	dc00      	bgt.n	8002c78 <DetectaMovimiento+0x3c>
	        break;
 8002c76:	e029      	b.n	8002ccc <DetectaMovimiento+0x90>
			state_movement=1;
 8002c78:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <DetectaMovimiento+0x94>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
	        TransmiteEvento(EVENTO_MOVIMIENTO, state_movement);}
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <DetectaMovimiento+0x94>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7fe f90f 	bl	8000ea8 <TransmiteEvento>
	        break;
 8002c8a:	e01f      	b.n	8002ccc <DetectaMovimiento+0x90>
	    case MOVIMIENTO: if(sensor.frequency[0]< UMBRAL_GIRO && sensor.frequency[1]<UMBRAL_GIRO){
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <DetectaMovimiento+0x98>)
 8002c8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c92:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002cd8 <DetectaMovimiento+0x9c>
 8002c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	d400      	bmi.n	8002ca2 <DetectaMovimiento+0x66>
	    	break;
 8002ca0:	e013      	b.n	8002cca <DetectaMovimiento+0x8e>
	    case MOVIMIENTO: if(sensor.frequency[0]< UMBRAL_GIRO && sensor.frequency[1]<UMBRAL_GIRO){
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <DetectaMovimiento+0x98>)
 8002ca4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ca8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002cd8 <DetectaMovimiento+0x9c>
 8002cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	d400      	bmi.n	8002cb8 <DetectaMovimiento+0x7c>
	    	break;
 8002cb6:	e008      	b.n	8002cca <DetectaMovimiento+0x8e>
	        state_movement=0;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <DetectaMovimiento+0x94>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
	        TransmiteEvento(EVENTO_MOVIMIENTO,state_movement);}
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <DetectaMovimiento+0x94>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	f7fe f8ef 	bl	8000ea8 <TransmiteEvento>
	    	break;
 8002cca:	bf00      	nop
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000065 	.word	0x20000065
 8002cd4:	20000160 	.word	0x20000160
 8002cd8:	3dcccccd 	.word	0x3dcccccd

08002cdc <WriteEcoValue>:

uint8_t WriteEcoValue(uint8_t channel, uint16_t value)
{
 8002cdc:	b4b0      	push	{r4, r5, r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	71fb      	strb	r3, [r7, #7]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	80bb      	strh	r3, [r7, #4]
/*Esta función recoge un valor nuevo procedente de alguno de los dos
 * sensores Hall y lo deposita en el buffer, desplazando los valores anteriores
 * cuando éste está lleno. Channel hace referencia a Hall de la rueda izquierda
 * o derecha, mientras que value es el valor de tiempo obtenido*/

	if(tam_eco[channel] < TAM_BUFFER_ECO)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <WriteEcoValue+0xa4>)
 8002cf0:	5cd3      	ldrb	r3, [r2, r3]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d815      	bhi.n	8002d22 <WriteEcoValue+0x46>
/* Mientras que alguno de los canales del buffer no esté lleno,
 * se produce el relleno del mismo sin más. La posición del buffer
 * que se ocupa está indicada por la misma variable tam_hall[channel],
 * que se incrementa, una vez se haya guardado el nuevo dato.
 * */
		eco_buffer[channel][tam_eco[channel]]=value;
 8002cf6:	79fa      	ldrb	r2, [r7, #7]
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4921      	ldr	r1, [pc, #132]	; (8002d80 <WriteEcoValue+0xa4>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4920      	ldr	r1, [pc, #128]	; (8002d84 <WriteEcoValue+0xa8>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	4403      	add	r3, r0
 8002d0a:	88ba      	ldrh	r2, [r7, #4]
 8002d0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		tam_eco[channel]+=1;
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <WriteEcoValue+0xa4>)
 8002d14:	5cd2      	ldrb	r2, [r2, r3]
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	3201      	adds	r2, #1
 8002d1a:	b2d1      	uxtb	r1, r2
 8002d1c:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <WriteEcoValue+0xa4>)
 8002d1e:	54d1      	strb	r1, [r2, r3]
 8002d20:	e026      	b.n	8002d70 <WriteEcoValue+0x94>
	{
/* Si alguno de los canales del buffer ya está lleno, antes de
 * proceder a introducir un nuevo dato, hay que desplazar su
 * contenido
 * */
		for(i=0;i<TAM_BUFFER_ECO-1;i++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e016      	b.n	8002d56 <WriteEcoValue+0x7a>
			eco_buffer[channel][i]= eco_buffer[channel][i+1];
 8002d28:	79f9      	ldrb	r1, [r7, #7]
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	1c5c      	adds	r4, r3, #1
 8002d2e:	79fa      	ldrb	r2, [r7, #7]
 8002d30:	7bf8      	ldrb	r0, [r7, #15]
 8002d32:	4d14      	ldr	r5, [pc, #80]	; (8002d84 <WriteEcoValue+0xa8>)
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	4423      	add	r3, r4
 8002d3c:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8002d40:	4910      	ldr	r1, [pc, #64]	; (8002d84 <WriteEcoValue+0xa8>)
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	4403      	add	r3, r0
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(i=0;i<TAM_BUFFER_ECO-1;i++)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	3301      	adds	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d9e5      	bls.n	8002d28 <WriteEcoValue+0x4c>
		eco_buffer[channel][TAM_BUFFER_ECO-1] = value;
 8002d5c:	79fa      	ldrb	r2, [r7, #7]
 8002d5e:	4909      	ldr	r1, [pc, #36]	; (8002d84 <WriteEcoValue+0xa8>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	440b      	add	r3, r1
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	88ba      	ldrh	r2, [r7, #4]
 8002d6e:	801a      	strh	r2, [r3, #0]
	}
	return tam_eco[channel];
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <WriteEcoValue+0xa4>)
 8002d74:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bcb0      	pop	{r4, r5, r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000068 	.word	0x20000068
 8002d84:	200004e0 	.word	0x200004e0

08002d88 <InicializaBufferUltrasonidos>:


void InicializaBufferUltrasonidos(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
      uint8_t channel, pos;
      /*Cada uno de los canales del buffer que almacena los últimos valores
       * de Hall, se inicializa con UMBRAL_VEL_EXCESIVA*/
      for(channel=0;channel<5;channel++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	71fb      	strb	r3, [r7, #7]
 8002d92:	e015      	b.n	8002dc0 <InicializaBufferUltrasonidos+0x38>
            for(pos=0;pos<TAM_BUFFER_ECO;pos++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	71bb      	strb	r3, [r7, #6]
 8002d98:	e00c      	b.n	8002db4 <InicializaBufferUltrasonidos+0x2c>
                  eco_buffer[channel][pos]=200;
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	79b9      	ldrb	r1, [r7, #6]
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <InicializaBufferUltrasonidos+0x4c>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	22c8      	movs	r2, #200	; 0xc8
 8002daa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
            for(pos=0;pos<TAM_BUFFER_ECO;pos++)
 8002dae:	79bb      	ldrb	r3, [r7, #6]
 8002db0:	3301      	adds	r3, #1
 8002db2:	71bb      	strb	r3, [r7, #6]
 8002db4:	79bb      	ldrb	r3, [r7, #6]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d9ef      	bls.n	8002d9a <InicializaBufferUltrasonidos+0x12>
      for(channel=0;channel<5;channel++)
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	71fb      	strb	r3, [r7, #7]
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d9e6      	bls.n	8002d94 <InicializaBufferUltrasonidos+0xc>

}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	200004e0 	.word	0x200004e0

08002dd8 <InicializaBuffers>:

void InicializaBuffers(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0

	/*
	 * Permite la inicialización de los buffers usados para registrar
	 * los valores de medida de los ultrasonidos y de los hall.
	 * */
      InicializaBufferUltrasonidos();
 8002ddc:	f7ff ffd4 	bl	8002d88 <InicializaBufferUltrasonidos>
      InicializaHallBuffer();
 8002de0:	f000 f812 	bl	8002e08 <InicializaHallBuffer>
      n_timer=0;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <InicializaBuffers+0x24>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
      pr_timer=0;
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <InicializaBuffers+0x28>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
      pw_timer=0;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <InicializaBuffers+0x2c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200004c8 	.word	0x200004c8
 8002e00:	200004c9 	.word	0x200004c9
 8002e04:	20000580 	.word	0x20000580

08002e08 <InicializaHallBuffer>:

void InicializaHallBuffer(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
      uint8_t channel, pos;
      /*Cada uno de los canales del buffer que almacena los últimos valores
       * de Hall, se inicializa con UMBRAL_VEL_EXCESIVA*/
      for(channel=0;channel<=1;channel++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	71fb      	strb	r3, [r7, #7]
 8002e12:	e016      	b.n	8002e42 <InicializaHallBuffer+0x3a>
            for(pos=0;pos<TAM_BUFFER_HALL;pos++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	71bb      	strb	r3, [r7, #6]
 8002e18:	e00d      	b.n	8002e36 <InicializaHallBuffer+0x2e>
                  hall_buffer[channel][pos]=4294967295;
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	79b9      	ldrb	r1, [r7, #6]
 8002e1e:	480e      	ldr	r0, [pc, #56]	; (8002e58 <InicializaHallBuffer+0x50>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            for(pos=0;pos<TAM_BUFFER_HALL;pos++)
 8002e30:	79bb      	ldrb	r3, [r7, #6]
 8002e32:	3301      	adds	r3, #1
 8002e34:	71bb      	strb	r3, [r7, #6]
 8002e36:	79bb      	ldrb	r3, [r7, #6]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d9ee      	bls.n	8002e1a <InicializaHallBuffer+0x12>
      for(channel=0;channel<=1;channel++)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	71fb      	strb	r3, [r7, #7]
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d9e5      	bls.n	8002e14 <InicializaHallBuffer+0xc>
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	200004a0 	.word	0x200004a0

08002e5c <WriteHallValue>:


uint8_t WriteHallValue(uint8_t channel, uint32_t value)
{
 8002e5c:	b4b0      	push	{r4, r5, r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
      /*Esta función recoge un valor nuevo procedente de alguno de los dos
       * sensores Hall y lo deposita en el buffer, desplazando los valores anteriores
       * cuando éste está lleno. Channel hace referencia a Hall de la rueda izquierda
       * o derecha, mientras que value es el valor de tiempo obtenido*/

      if(tam_hall[channel] < TAM_BUFFER_HALL)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	4a24      	ldr	r2, [pc, #144]	; (8002efc <WriteHallValue+0xa0>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d815      	bhi.n	8002e9e <WriteHallValue+0x42>
            /* Mientras que alguno de los canales del buffer no esté lleno,
             * se produce el relleno del mismo sin más. La posición del buffer
             * que se ocupa está indicada por la misma variable tam_hall[channel],
             * que se incrementa, una vez se haya guardado el nuevo dato.
             * */
            hall_buffer[channel][tam_hall[channel]]=value;
 8002e72:	79fa      	ldrb	r2, [r7, #7]
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4921      	ldr	r1, [pc, #132]	; (8002efc <WriteHallValue+0xa0>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	4920      	ldr	r1, [pc, #128]	; (8002f00 <WriteHallValue+0xa4>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	4403      	add	r3, r0
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            tam_hall[channel]+=1;
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <WriteHallValue+0xa0>)
 8002e90:	5cd2      	ldrb	r2, [r2, r3]
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	3201      	adds	r2, #1
 8002e96:	b2d1      	uxtb	r1, r2
 8002e98:	4a18      	ldr	r2, [pc, #96]	; (8002efc <WriteHallValue+0xa0>)
 8002e9a:	54d1      	strb	r1, [r2, r3]
 8002e9c:	e025      	b.n	8002eea <WriteHallValue+0x8e>
      {
            /* Si alguno de los canales del buffer ya está lleno, antes de
             * proceder a introducir un nuevo dato, hay que desplazar su
             * contenido
             * */
            for(i=0;i<TAM_BUFFER_HALL-1;i++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e015      	b.n	8002ed0 <WriteHallValue+0x74>
                  hall_buffer[channel][i]= hall_buffer[channel][i+1];
 8002ea4:	79f9      	ldrb	r1, [r7, #7]
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	1c5c      	adds	r4, r3, #1
 8002eaa:	79fa      	ldrb	r2, [r7, #7]
 8002eac:	7bf8      	ldrb	r0, [r7, #15]
 8002eae:	4d14      	ldr	r5, [pc, #80]	; (8002f00 <WriteHallValue+0xa4>)
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	4423      	add	r3, r4
 8002eb8:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8002ebc:	4c10      	ldr	r4, [pc, #64]	; (8002f00 <WriteHallValue+0xa4>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
            for(i=0;i<TAM_BUFFER_HALL-1;i++)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d9e6      	bls.n	8002ea4 <WriteHallValue+0x48>
            hall_buffer[channel][TAM_BUFFER_HALL-1] = value;
 8002ed6:	79fa      	ldrb	r2, [r7, #7]
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <WriteHallValue+0xa4>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
      }
      return tam_hall[channel];
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	4a03      	ldr	r2, [pc, #12]	; (8002efc <WriteHallValue+0xa0>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]

}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bcb0      	pop	{r4, r5, r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000070 	.word	0x20000070
 8002f00:	200004a0 	.word	0x200004a0

08002f04 <MedianN>:


uint32_t MedianN(uint8_t eco_hall, uint8_t channel, uint8_t tam)
{
 8002f04:	b4b0      	push	{r4, r5, r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	71bb      	strb	r3, [r7, #6]
 8002f12:	4613      	mov	r3, r2
 8002f14:	717b      	strb	r3, [r7, #5]
 8002f16:	466b      	mov	r3, sp
 8002f18:	461d      	mov	r5, r3
      uint8_t cambio;
      uint8_t t;
      uint32_t buffer[tam],temp;
 8002f1a:	797c      	ldrb	r4, [r7, #5]
 8002f1c:	4623      	mov	r3, r4
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	b2e0      	uxtb	r0, r4
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	014b      	lsls	r3, r1, #5
 8002f32:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f36:	0142      	lsls	r2, r0, #5
 8002f38:	b2e0      	uxtb	r0, r4
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	014b      	lsls	r3, r1, #5
 8002f48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f4c:	0142      	lsls	r2, r0, #5
 8002f4e:	4623      	mov	r3, r4
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3307      	adds	r3, #7
 8002f54:	08db      	lsrs	r3, r3, #3
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	ebad 0d03 	sub.w	sp, sp, r3
 8002f5c:	466b      	mov	r3, sp
 8002f5e:	3303      	adds	r3, #3
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	60bb      	str	r3, [r7, #8]

      for(t=0;t<tam;t++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	74fb      	strb	r3, [r7, #19]
 8002f6a:	e021      	b.n	8002fb0 <MedianN+0xac>
            if(eco_hall)
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <MedianN+0x8a>
                  buffer[t] = hall_buffer[channel][t];
 8002f72:	79ba      	ldrb	r2, [r7, #6]
 8002f74:	7cf8      	ldrb	r0, [r7, #19]
 8002f76:	7cf9      	ldrb	r1, [r7, #19]
 8002f78:	4c3b      	ldr	r4, [pc, #236]	; (8003068 <MedianN+0x164>)
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	4403      	add	r3, r0
 8002f82:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002f8c:	e00d      	b.n	8002faa <MedianN+0xa6>
            else
                  buffer[t] = eco_buffer[channel][t];
 8002f8e:	79ba      	ldrb	r2, [r7, #6]
 8002f90:	7cf9      	ldrb	r1, [r7, #19]
 8002f92:	4836      	ldr	r0, [pc, #216]	; (800306c <MedianN+0x168>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002fa0:	7cfa      	ldrb	r2, [r7, #19]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for(t=0;t<tam;t++)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	3301      	adds	r3, #1
 8002fae:	74fb      	strb	r3, [r7, #19]
 8002fb0:	7cfa      	ldrb	r2, [r7, #19]
 8002fb2:	797b      	ldrb	r3, [r7, #5]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d3d9      	bcc.n	8002f6c <MedianN+0x68>
      do
      {
            cambio=0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	74bb      	strb	r3, [r7, #18]
            for(t=0;t<tam-1;t++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74fb      	strb	r3, [r7, #19]
 8002fc0:	e023      	b.n	800300a <MedianN+0x106>
                  if(buffer[t]<buffer[t+1])
 8002fc2:	7cfa      	ldrb	r2, [r7, #19]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	1c59      	adds	r1, r3, #1
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d215      	bcs.n	8003004 <MedianN+0x100>
                  {
                        temp = buffer[t];
 8002fd8:	7cfa      	ldrb	r2, [r7, #19]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	617b      	str	r3, [r7, #20]
                        buffer[t] = buffer[t+1];
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	1c59      	adds	r1, r3, #1
 8002fe6:	7cfa      	ldrb	r2, [r7, #19]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        buffer[t+1] = temp;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6979      	ldr	r1, [r7, #20]
 8002ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        cambio=1;
 8003000:	2301      	movs	r3, #1
 8003002:	74bb      	strb	r3, [r7, #18]
            for(t=0;t<tam-1;t++)
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	3301      	adds	r3, #1
 8003008:	74fb      	strb	r3, [r7, #19]
 800300a:	7cfa      	ldrb	r2, [r7, #19]
 800300c:	797b      	ldrb	r3, [r7, #5]
 800300e:	3b01      	subs	r3, #1
 8003010:	429a      	cmp	r2, r3
 8003012:	dbd6      	blt.n	8002fc2 <MedianN+0xbe>
                  }
      }while(cambio==1);
 8003014:	7cbb      	ldrb	r3, [r7, #18]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d0ce      	beq.n	8002fb8 <MedianN+0xb4>
      if(tam & 1)
 800301a:	797b      	ldrb	r3, [r7, #5]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <MedianN+0x132>
            temp = buffer[tam/2];
 8003024:	797b      	ldrb	r3, [r7, #5]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e010      	b.n	8003058 <MedianN+0x154>
      else
            temp = (buffer[tam/2] + buffer[tam/2-1])>>1;
 8003036:	797b      	ldrb	r3, [r7, #5]
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003044:	797b      	ldrb	r3, [r7, #5]
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	1e59      	subs	r1, r3, #1
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003052:	4413      	add	r3, r2
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	617b      	str	r3, [r7, #20]

      return temp;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	46ad      	mov	sp, r5

}
 800305c:	4618      	mov	r0, r3
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bcb0      	pop	{r4, r5, r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	200004a0 	.word	0x200004a0
 800306c:	200004e0 	.word	0x200004e0

08003070 <SensoresNivel0>:


void SensoresNivel0(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
       * */

      uint8_t channel;  //Identifica canal del temporizador.


      while(n_timer >0)
 8003076:	e12c      	b.n	80032d2 <SensoresNivel0+0x262>
      {
    	  /*Si hay datos en el buffer, comenzamos su procesamiento*/
    	  channel= buftimer[pr_timer].channel;
 8003078:	4b9c      	ldr	r3, [pc, #624]	; (80032ec <SensoresNivel0+0x27c>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4a9c      	ldr	r2, [pc, #624]	; (80032f0 <SensoresNivel0+0x280>)
 8003080:	460b      	mov	r3, r1
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	440b      	add	r3, r1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	3308      	adds	r3, #8
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
    	  if(buftimer[pr_timer].tipo == 1)  //Para HALL
 8003090:	4b96      	ldr	r3, [pc, #600]	; (80032ec <SensoresNivel0+0x27c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	4a96      	ldr	r2, [pc, #600]	; (80032f0 <SensoresNivel0+0x280>)
 8003098:	460b      	mov	r3, r1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	440b      	add	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	330a      	adds	r3, #10
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d16e      	bne.n	8003188 <SensoresNivel0+0x118>
    	  {
    		  /*Cada vez que se recibe un dato, se pone a cero este
    		   * temporizador. Si el temporizador llega a 300ms, el
    		   * hall[channel] se pone al valor más alto posible, que
    		   * significa que la velocidad es 0*/
    		  tick.t_med_hall[channel]=0;
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	4a91      	ldr	r2, [pc, #580]	; (80032f4 <SensoresNivel0+0x284>)
 80030ae:	2100      	movs	r1, #0
 80030b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    		  if(hall[channel]==4294967295)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	4a90      	ldr	r2, [pc, #576]	; (80032f8 <SensoresNivel0+0x288>)
 80030b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d10c      	bne.n	80030dc <SensoresNivel0+0x6c>
    		  {
    			  /*Si venimos de la situación en la que la rueda estaba
    			   * parada, inicializamos el estado para las medidas*/
    			  state_hall[channel]=0;
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4a8d      	ldr	r2, [pc, #564]	; (80032fc <SensoresNivel0+0x28c>)
 80030c6:	2100      	movs	r1, #0
 80030c8:	54d1      	strb	r1, [r2, r3]
    		      hall[channel]-=1;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	4a8a      	ldr	r2, [pc, #552]	; (80032f8 <SensoresNivel0+0x288>)
 80030ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	3a01      	subs	r2, #1
 80030d6:	4988      	ldr	r1, [pc, #544]	; (80032f8 <SensoresNivel0+0x288>)
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    		   }
    		   if(state_hall[channel]==0)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4a87      	ldr	r2, [pc, #540]	; (80032fc <SensoresNivel0+0x28c>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d113      	bne.n	800310e <SensoresNivel0+0x9e>
    		   {
    			   /*Tomamos medida del timer en esta primera
    			    * de las dos interrupciones*/
    			   state_hall[channel]=1;
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	4a84      	ldr	r2, [pc, #528]	; (80032fc <SensoresNivel0+0x28c>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	54d1      	strb	r1, [r2, r3]
    			   hall_value[channel]=buftimer[pr_timer].valuel;
 80030ee:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <SensoresNivel0+0x27c>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	79fa      	ldrb	r2, [r7, #7]
 80030f6:	497e      	ldr	r1, [pc, #504]	; (80032f0 <SensoresNivel0+0x280>)
 80030f8:	4603      	mov	r3, r0
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4403      	add	r3, r0
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3304      	adds	r3, #4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	497e      	ldr	r1, [pc, #504]	; (8003300 <SensoresNivel0+0x290>)
 8003108:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800310c:	e03c      	b.n	8003188 <SensoresNivel0+0x118>
    		   }else{
    			   /*En la segunda interrupción actualizarmos hall[channel]
    			    * con el tiempo real y lo señalizamos con la
    			    * medida_nueva_hall*/
    			   state_hall[channel]=0;
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	4a7a      	ldr	r2, [pc, #488]	; (80032fc <SensoresNivel0+0x28c>)
 8003112:	2100      	movs	r1, #0
 8003114:	54d1      	strb	r1, [r2, r3]
    			   hall[channel] = buftimer[pr_timer].valuel;
 8003116:	4b75      	ldr	r3, [pc, #468]	; (80032ec <SensoresNivel0+0x27c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	79fa      	ldrb	r2, [r7, #7]
 800311e:	4974      	ldr	r1, [pc, #464]	; (80032f0 <SensoresNivel0+0x280>)
 8003120:	4603      	mov	r3, r0
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4403      	add	r3, r0
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3304      	adds	r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4972      	ldr	r1, [pc, #456]	; (80032f8 <SensoresNivel0+0x288>)
 8003130:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    			   if(hall[channel]>=hall_value[channel])
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	4a70      	ldr	r2, [pc, #448]	; (80032f8 <SensoresNivel0+0x288>)
 8003138:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	4970      	ldr	r1, [pc, #448]	; (8003300 <SensoresNivel0+0x290>)
 8003140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003144:	429a      	cmp	r2, r3
 8003146:	d30e      	bcc.n	8003166 <SensoresNivel0+0xf6>
    				   hall[channel]-=hall_value[channel]+1;
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	4a6b      	ldr	r2, [pc, #428]	; (80032f8 <SensoresNivel0+0x288>)
 800314c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	496b      	ldr	r1, [pc, #428]	; (8003300 <SensoresNivel0+0x290>)
 8003154:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003158:	1ad2      	subs	r2, r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	3a01      	subs	r2, #1
 800315e:	4966      	ldr	r1, [pc, #408]	; (80032f8 <SensoresNivel0+0x288>)
 8003160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003164:	e00c      	b.n	8003180 <SensoresNivel0+0x110>
    			   else
    			       hall[channel]+= (4294967295 - hall_value[channel]+1);
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4a63      	ldr	r2, [pc, #396]	; (80032f8 <SensoresNivel0+0x288>)
 800316a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	4a63      	ldr	r2, [pc, #396]	; (8003300 <SensoresNivel0+0x290>)
 8003172:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	1a8a      	subs	r2, r1, r2
 800317a:	495f      	ldr	r1, [pc, #380]	; (80032f8 <SensoresNivel0+0x288>)
 800317c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			    medida_nueva_hall[channel]=1;
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	4a60      	ldr	r2, [pc, #384]	; (8003304 <SensoresNivel0+0x294>)
 8003184:	2101      	movs	r1, #1
 8003186:	54d1      	strb	r1, [r2, r3]
    		   }

    	  }
    	  if(buftimer[pr_timer].tipo==0 )
 8003188:	4b58      	ldr	r3, [pc, #352]	; (80032ec <SensoresNivel0+0x27c>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <SensoresNivel0+0x280>)
 8003190:	460b      	mov	r3, r1
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	440b      	add	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	330a      	adds	r3, #10
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 8088 	bne.w	80032b4 <SensoresNivel0+0x244>
    	  {
    		  /*Se necesitan dos interrupciones (SUBIDA-> BAJADA) para
    		   * determinar la duración del pulso de eco, y con ello
    		   * el tiempo transcurrido*/
    		  if(state_eco[channel]==0 ){
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	4a58      	ldr	r2, [pc, #352]	; (8003308 <SensoresNivel0+0x298>)
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11f      	bne.n	80031ee <SensoresNivel0+0x17e>
    			  /*En el estado 0, si recibimos interrupción y
    			   * es de SUBIDA (puerto=1) capturamos timer y pasamos
    			   * al estado 1*/
    			  if( buftimer[pr_timer].puerto==1){
 80031ae:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <SensoresNivel0+0x27c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	4619      	mov	r1, r3
 80031b4:	4a4e      	ldr	r2, [pc, #312]	; (80032f0 <SensoresNivel0+0x280>)
 80031b6:	460b      	mov	r3, r1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	440b      	add	r3, r1
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3309      	adds	r3, #9
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d175      	bne.n	80032b4 <SensoresNivel0+0x244>
    				  state_eco[channel]=1;
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4a4f      	ldr	r2, [pc, #316]	; (8003308 <SensoresNivel0+0x298>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	54d1      	strb	r1, [r2, r3]
                      eco_value[channel]=buftimer[pr_timer].value;
 80031d0:	4b46      	ldr	r3, [pc, #280]	; (80032ec <SensoresNivel0+0x27c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	79fa      	ldrb	r2, [r7, #7]
 80031d8:	4945      	ldr	r1, [pc, #276]	; (80032f0 <SensoresNivel0+0x280>)
 80031da:	4603      	mov	r3, r0
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4403      	add	r3, r0
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	8819      	ldrh	r1, [r3, #0]
 80031e6:	4b49      	ldr	r3, [pc, #292]	; (800330c <SensoresNivel0+0x29c>)
 80031e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80031ec:	e062      	b.n	80032b4 <SensoresNivel0+0x244>
    		   }
    		   else{
    			   /*En el estado 1, si puerto es 0 (BAJADA)
    			    * tomamos medida de eco[channel], señalizamos
    			    * medida_eco_nueva y volvemos al estado 0*/
    			   if(buftimer[pr_timer].puerto==0){
 80031ee:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <SensoresNivel0+0x27c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4a3e      	ldr	r2, [pc, #248]	; (80032f0 <SensoresNivel0+0x280>)
 80031f6:	460b      	mov	r3, r1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	440b      	add	r3, r1
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	3309      	adds	r3, #9
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d147      	bne.n	8003298 <SensoresNivel0+0x228>
    				   state_eco[channel]=0;
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	4a3f      	ldr	r2, [pc, #252]	; (8003308 <SensoresNivel0+0x298>)
 800320c:	2100      	movs	r1, #0
 800320e:	54d1      	strb	r1, [r2, r3]
                       eco[channel]=buftimer[pr_timer].value;
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <SensoresNivel0+0x27c>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	79fa      	ldrb	r2, [r7, #7]
 8003218:	4935      	ldr	r1, [pc, #212]	; (80032f0 <SensoresNivel0+0x280>)
 800321a:	4603      	mov	r3, r0
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4403      	add	r3, r0
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	8819      	ldrh	r1, [r3, #0]
 8003226:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <SensoresNivel0+0x2a0>)
 8003228:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                       if(eco[channel]>eco_value[channel])
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	4a38      	ldr	r2, [pc, #224]	; (8003310 <SensoresNivel0+0x2a0>)
 8003230:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	4935      	ldr	r1, [pc, #212]	; (800330c <SensoresNivel0+0x29c>)
 8003238:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800323c:	429a      	cmp	r2, r3
 800323e:	d910      	bls.n	8003262 <SensoresNivel0+0x1f2>
                    	   eco[channel]-=eco_value[channel]+1;
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	4a33      	ldr	r2, [pc, #204]	; (8003310 <SensoresNivel0+0x2a0>)
 8003244:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4930      	ldr	r1, [pc, #192]	; (800330c <SensoresNivel0+0x29c>)
 800324c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	b29a      	uxth	r2, r3
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	3a01      	subs	r2, #1
 8003258:	b291      	uxth	r1, r2
 800325a:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <SensoresNivel0+0x2a0>)
 800325c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003260:	e00d      	b.n	800327e <SensoresNivel0+0x20e>
                       else
                           eco[channel]+= ( 65535 -eco_value[channel]+1);
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <SensoresNivel0+0x2a0>)
 8003266:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	4a27      	ldr	r2, [pc, #156]	; (800330c <SensoresNivel0+0x29c>)
 800326e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	1a8a      	subs	r2, r1, r2
 8003276:	b291      	uxth	r1, r2
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <SensoresNivel0+0x2a0>)
 800327a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                       if(eco[channel]<12000)
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	4a23      	ldr	r2, [pc, #140]	; (8003310 <SensoresNivel0+0x2a0>)
 8003282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003286:	f642 62df 	movw	r2, #11999	; 0x2edf
 800328a:	4293      	cmp	r3, r2
 800328c:	d812      	bhi.n	80032b4 <SensoresNivel0+0x244>
                    	   medida_nueva_eco[channel]=1;
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	4a20      	ldr	r2, [pc, #128]	; (8003314 <SensoresNivel0+0x2a4>)
 8003292:	2101      	movs	r1, #1
 8003294:	54d1      	strb	r1, [r2, r3]
 8003296:	e00d      	b.n	80032b4 <SensoresNivel0+0x244>
    				}else
    					eco_value[channel]=buftimer[pr_timer].value;
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <SensoresNivel0+0x27c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	79fa      	ldrb	r2, [r7, #7]
 80032a0:	4913      	ldr	r1, [pc, #76]	; (80032f0 <SensoresNivel0+0x280>)
 80032a2:	4603      	mov	r3, r0
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4403      	add	r3, r0
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	8819      	ldrh	r1, [r3, #0]
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <SensoresNivel0+0x29c>)
 80032b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    			}
    		}

    	  /*Actualizamos el estado de los buffers*/
       	  pr_timer = (pr_timer+1) & (TAM_BUF_TIMER-1);
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <SensoresNivel0+0x27c>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <SensoresNivel0+0x27c>)
 80032c4:	701a      	strb	r2, [r3, #0]
    	  n_timer--;
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <SensoresNivel0+0x2a8>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <SensoresNivel0+0x2a8>)
 80032d0:	701a      	strb	r2, [r3, #0]
      while(n_timer >0)
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <SensoresNivel0+0x2a8>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f47f aece 	bne.w	8003078 <SensoresNivel0+0x8>

      }



}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	200004c9 	.word	0x200004c9
 80032f0:	20000520 	.word	0x20000520
 80032f4:	20000118 	.word	0x20000118
 80032f8:	20000140 	.word	0x20000140
 80032fc:	20000074 	.word	0x20000074
 8003300:	20000078 	.word	0x20000078
 8003304:	20000190 	.word	0x20000190
 8003308:	20000080 	.word	0x20000080
 800330c:	20000088 	.word	0x20000088
 8003310:	200004d4 	.word	0x200004d4
 8003314:	20000514 	.word	0x20000514
 8003318:	200004c8 	.word	0x200004c8

0800331c <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	 * de estructura del tipo data_timer, que contiene el tipo de resultado,
	 * el canal, el valor del tiempo transcurrido y el estado del puerto (1 o 0)
	 * para los sensores de ultrasonidos.
	 * */

	if(n_timer < TAM_BUF_TIMER)
 8003324:	4b84      	ldr	r3, [pc, #528]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b07      	cmp	r3, #7
 800332a:	f200 8100 	bhi.w	800352e <HAL_TIM_IC_CaptureCallback+0x212>
	{
		/*  Si el número de elementos en el buffer es menor que el tamaño,
		 * se guarda el nuevo valor.
		 *
		 * */
      if(htim->Instance==TIM2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003336:	d144      	bne.n	80033c2 <HAL_TIM_IC_CaptureCallback+0xa6>
      {
    	  /*Sensores de efecto Hall*/

    	  /*Se guarda en el buftimer información del canal. Tipo=1 para
    	   * hall y tipo=0 para ultrasonidos*/
    	  buftimer[pw_timer].tipo = 1;
 8003338:	4b80      	ldr	r3, [pc, #512]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4619      	mov	r1, r3
 800333e:	4a80      	ldr	r2, [pc, #512]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003340:	460b      	mov	r3, r1
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	440b      	add	r3, r1
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	330a      	adds	r3, #10
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
    	  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7f1b      	ldrb	r3, [r3, #28]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d102      	bne.n	800335e <HAL_TIM_IC_CaptureCallback+0x42>
    		  channel=1;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e001      	b.n	8003362 <HAL_TIM_IC_CaptureCallback+0x46>
    	  else
    		  channel=0;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
    	  buftimer[pw_timer].channel=channel;
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 800336a:	460b      	mov	r3, r1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	440b      	add	r3, r1
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3308      	adds	r3, #8
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	701a      	strb	r2, [r3, #0]
    	  //buftimer[pw_timer].value =HAL_TIM_ReadCapturedValue(htim, (channel)*4); //Capturamos el valor del timer
    	  buftimer[pw_timer].valuel =HAL_TIM_ReadCapturedValue(htim, (1-channel)*4); //Capturamos el valor del timer
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	f1c3 0301 	rsb	r3, r3, #1
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	461a      	mov	r2, r3
 8003384:	4b6d      	ldr	r3, [pc, #436]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461c      	mov	r4, r3
 800338a:	4611      	mov	r1, r2
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f003 f95f 	bl	8006650 <HAL_TIM_ReadCapturedValue>
 8003392:	4602      	mov	r2, r0
 8003394:	496a      	ldr	r1, [pc, #424]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003396:	4623      	mov	r3, r4
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4423      	add	r3, r4
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3304      	adds	r3, #4
 80033a2:	601a      	str	r2, [r3, #0]
    	     #define TIM_CHANNEL_2      0x00000004U
    	     #define TIM_CHANNEL_3      0x00000008U
    	     #define TIM_CHANNEL_4      0x0000000CU
    	   */
    	  //Incrementamos el puntero de escritura para el siguiente dato
    	  pw_timer = (pw_timer+1) & (TAM_BUF_TIMER-1);
 80033a4:	4b65      	ldr	r3, [pc, #404]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4b62      	ldr	r3, [pc, #392]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 80033b4:	701a      	strb	r2, [r3, #0]
    	  //Incrementamos el número de elementos guardados en el buffer
    	  n_timer ++;
 80033b6:	4b60      	ldr	r3, [pc, #384]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	3301      	adds	r3, #1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b5e      	ldr	r3, [pc, #376]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80033c0:	701a      	strb	r2, [r3, #0]
      }

      if (htim->Instance==TIM4)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5f      	ldr	r2, [pc, #380]	; (8003544 <HAL_TIM_IC_CaptureCallback+0x228>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d154      	bne.n	8003476 <HAL_TIM_IC_CaptureCallback+0x15a>
    	               * SE HA ADAPTADO PARA LA NUEVA SITUACIÓN
    	               *
    	               *
    	               * */

    	  buftimer[pw_timer].tipo=0;  //tipo 0
 80033cc:	4b5b      	ldr	r3, [pc, #364]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	4a5b      	ldr	r2, [pc, #364]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 80033d4:	460b      	mov	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	330a      	adds	r3, #10
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
    	  channel = (htim->Channel)>>2; //número de canal
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7f1b      	ldrb	r3, [r3, #28]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	73fb      	strb	r3, [r7, #15]
    	  buftimer[pw_timer].channel=channel;
 80033ec:	4b53      	ldr	r3, [pc, #332]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	4a53      	ldr	r2, [pc, #332]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 80033f4:	460b      	mov	r3, r1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3308      	adds	r3, #8
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	701a      	strb	r2, [r3, #0]
    	  buftimer[pw_timer].value = HAL_TIM_ReadCapturedValue(htim, 4*channel+4);
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	3301      	adds	r3, #1
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f003 f91f 	bl	8006650 <HAL_TIM_ReadCapturedValue>
 8003412:	4602      	mov	r2, r0
 8003414:	4b49      	ldr	r3, [pc, #292]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4619      	mov	r1, r3
 800341a:	b290      	uxth	r0, r2
 800341c:	4a48      	ldr	r2, [pc, #288]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 800341e:	460b      	mov	r3, r1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	440b      	add	r3, r1
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	4602      	mov	r2, r0
 800342a:	801a      	strh	r2, [r3, #0]
    	  buftimer[pw_timer].puerto = HAL_GPIO_ReadPin(GPIOB, pin_eco_delantero[channel]);
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4a46      	ldr	r2, [pc, #280]	; (8003548 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003434:	4a41      	ldr	r2, [pc, #260]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	4614      	mov	r4, r2
 800343a:	4619      	mov	r1, r3
 800343c:	4843      	ldr	r0, [pc, #268]	; (800354c <HAL_TIM_IC_CaptureCallback+0x230>)
 800343e:	f001 fd3b 	bl	8004eb8 <HAL_GPIO_ReadPin>
 8003442:	4603      	mov	r3, r0
 8003444:	4619      	mov	r1, r3
 8003446:	4a3e      	ldr	r2, [pc, #248]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003448:	4623      	mov	r3, r4
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4423      	add	r3, r4
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	3309      	adds	r3, #9
 8003454:	460a      	mov	r2, r1
 8003456:	701a      	strb	r2, [r3, #0]
    	  pw_timer = (pw_timer+1) & (TAM_BUF_TIMER-1);
 8003458:	4b38      	ldr	r3, [pc, #224]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b35      	ldr	r3, [pc, #212]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003468:	701a      	strb	r2, [r3, #0]
    	  n_timer ++;
 800346a:	4b33      	ldr	r3, [pc, #204]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b31      	ldr	r3, [pc, #196]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003474:	701a      	strb	r2, [r3, #0]
      }

      if(htim->Instance==TIM8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a35      	ldr	r2, [pc, #212]	; (8003550 <HAL_TIM_IC_CaptureCallback+0x234>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d156      	bne.n	800352e <HAL_TIM_IC_CaptureCallback+0x212>
              * mientras que PC7 debe ser el canal 0 en nuestra asignación, pero tiene el
              * valor de 2 en htim->Channel y 4 en HAL_TIM_ReadCapture.
              * La matriz pin_eco_trasero está ordenada con PC7 en la posición 0 y PC6 en la posición 1
              * */

    	  	 channel = (htim->Channel)>>1; //Poner en el nuevo diseño hardware
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7f1b      	ldrb	r3, [r3, #28]
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
    	  	 buftimer[pw_timer].tipo=0;
 8003488:	4b2c      	ldr	r3, [pc, #176]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003490:	460b      	mov	r3, r1
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	440b      	add	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	330a      	adds	r3, #10
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    	  	 buftimer[pw_timer].channel=channel+3;
 80034a0:	4b26      	ldr	r3, [pc, #152]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4619      	mov	r1, r3
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	3303      	adds	r3, #3
 80034aa:	b2d8      	uxtb	r0, r3
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 80034ae:	460b      	mov	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	440b      	add	r3, r1
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3308      	adds	r3, #8
 80034ba:	4602      	mov	r2, r0
 80034bc:	701a      	strb	r2, [r3, #0]
    	  	 buftimer[pw_timer].value = HAL_TIM_ReadCapturedValue(htim, 4*channel);
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f003 f8c3 	bl	8006650 <HAL_TIM_ReadCapturedValue>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	b290      	uxth	r0, r2
 80034d4:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 80034d6:	460b      	mov	r3, r1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	440b      	add	r3, r1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	4602      	mov	r2, r0
 80034e2:	801a      	strh	r2, [r3, #0]
    	  	 buftimer[pw_timer].puerto = HAL_GPIO_ReadPin(GPIOC, pin_eco_trasero[channel]);
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIM_IC_CaptureCallback+0x238>)
 80034e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 80034ee:	7812      	ldrb	r2, [r2, #0]
 80034f0:	4614      	mov	r4, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	4818      	ldr	r0, [pc, #96]	; (8003558 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80034f6:	f001 fcdf 	bl	8004eb8 <HAL_GPIO_ReadPin>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4619      	mov	r1, r3
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003500:	4623      	mov	r3, r4
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4423      	add	r3, r4
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3309      	adds	r3, #9
 800350c:	460a      	mov	r2, r1
 800350e:	701a      	strb	r2, [r3, #0]
    	  	 pw_timer = (pw_timer+1) & (TAM_BUF_TIMER-1);
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003520:	701a      	strb	r2, [r3, #0]
    	  	 n_timer ++;
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800352c:	701a      	strb	r2, [r3, #0]
      }
	}
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	bf00      	nop
 8003538:	200004c8 	.word	0x200004c8
 800353c:	20000580 	.word	0x20000580
 8003540:	20000520 	.word	0x20000520
 8003544:	40000800 	.word	0x40000800
 8003548:	20000028 	.word	0x20000028
 800354c:	40020400 	.word	0x40020400
 8003550:	40010400 	.word	0x40010400
 8003554:	20000030 	.word	0x20000030
 8003558:	40020800 	.word	0x40020800

0800355c <GestorAudio>:
#include "globales.h"
#include "main.h"


void GestorAudio(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	 * del código
	 *
	 *
	 * */
	static uint8_t primero;
	switch(primero)
 8003560:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <GestorAudio+0x84>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d839      	bhi.n	80035dc <GestorAudio+0x80>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <GestorAudio+0x14>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003581 	.word	0x08003581
 8003574:	0800358f 	.word	0x0800358f
 8003578:	080035ab 	.word	0x080035ab
 800357c:	080035b9 	.word	0x080035b9
	{
	case 0: audio.tiempo=0;
 8003580:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <GestorAudio+0x88>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
			primero=1;
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <GestorAudio+0x84>)
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
			break;
 800358c:	e026      	b.n	80035dc <GestorAudio+0x80>
	case 1: if(audio.tiempo >= 1600)
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <GestorAudio+0x88>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003596:	d31e      	bcc.n	80035d6 <GestorAudio+0x7a>
				if(ResetMP3())
 8003598:	f000 f860 	bl	800365c <ResetMP3>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d019      	beq.n	80035d6 <GestorAudio+0x7a>
					primero=2;
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <GestorAudio+0x84>)
 80035a4:	2202      	movs	r2, #2
 80035a6:	701a      	strb	r2, [r3, #0]
			break;
 80035a8:	e015      	b.n	80035d6 <GestorAudio+0x7a>
	case 2:	audio.tiempo=0;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <GestorAudio+0x88>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
			primero=3;
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <GestorAudio+0x84>)
 80035b2:	2203      	movs	r2, #3
 80035b4:	701a      	strb	r2, [r3, #0]
			break;
 80035b6:	e011      	b.n	80035dc <GestorAudio+0x80>
	case 3: if(audio.tiempo>=1600)
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <GestorAudio+0x88>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80035c0:	d30b      	bcc.n	80035da <GestorAudio+0x7e>
				if(VolumeMP3(50))  //Antes a 30
 80035c2:	2032      	movs	r0, #50	; 0x32
 80035c4:	f000 f82e 	bl	8003624 <VolumeMP3>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <GestorAudio+0x7e>
					primero=4;
 80035ce:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <GestorAudio+0x84>)
 80035d0:	2204      	movs	r2, #4
 80035d2:	701a      	strb	r2, [r3, #0]
			break;
 80035d4:	e001      	b.n	80035da <GestorAudio+0x7e>
			break;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <GestorAudio+0x80>
			break;
 80035da:	bf00      	nop
	}
}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000092 	.word	0x20000092
 80035e4:	2000014c 	.word	0x2000014c

080035e8 <Play>:

uint8_t Play(uint8_t track)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
	 * Si la uart está ocupada, la función señaliza 0, para
	 * indicar que no se ha podido ejecutar. El envío lo
	 * gestiona el Gestor de Comunicaciones
	 *
	 * */
	 uint8_t suc=0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
	  if(!audio.uart_tx_busy)
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <Play+0x38>)
 80035f8:	7bdb      	ldrb	r3, [r3, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <Play+0x2c>
	  {
	    PreparaPaquete(0x3,track);
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	b29b      	uxth	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	2003      	movs	r0, #3
 8003606:	f000 f843 	bl	8003690 <PreparaPaquete>
	    audio.np=1;
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <Play+0x38>)
 800360c:	2201      	movs	r2, #1
 800360e:	741a      	strb	r2, [r3, #16]
	    suc=1;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
	  }
	  return suc;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000014c 	.word	0x2000014c

08003624 <VolumeMP3>:

uint8_t VolumeMP3(uint16_t val)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	80fb      	strh	r3, [r7, #6]
	/*Tiene la misma estructura que Play. Prepara un paquete
	 * específico para la función VolumeMP3*/
  unsigned char suc=0;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
  if(!audio.uart_tx_busy)
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <VolumeMP3+0x34>)
 8003634:	7bdb      	ldrb	r3, [r3, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <VolumeMP3+0x2a>
  {
    PreparaPaquete(0x6,val);
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	4619      	mov	r1, r3
 800363e:	2006      	movs	r0, #6
 8003640:	f000 f826 	bl	8003690 <PreparaPaquete>
    audio.np=1;
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <VolumeMP3+0x34>)
 8003646:	2201      	movs	r2, #1
 8003648:	741a      	strb	r2, [r3, #16]
    suc=1;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
  }
  return suc;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	2000014c 	.word	0x2000014c

0800365c <ResetMP3>:


uint8_t ResetMP3(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
	/*Tiene la misma estructura que Play. Prepara un paquete
	 * específico para la función ResetMP3*/
  unsigned char suc=0;
 8003662:	2300      	movs	r3, #0
 8003664:	71fb      	strb	r3, [r7, #7]
  if(!audio.uart_tx_busy)
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <ResetMP3+0x30>)
 8003668:	7bdb      	ldrb	r3, [r3, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <ResetMP3+0x24>
  {
    PreparaPaquete(0xC,0);
 800366e:	2100      	movs	r1, #0
 8003670:	200c      	movs	r0, #12
 8003672:	f000 f80d 	bl	8003690 <PreparaPaquete>
    audio.np=1;
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <ResetMP3+0x30>)
 8003678:	2201      	movs	r2, #1
 800367a:	741a      	strb	r2, [r3, #16]
    suc=1;
 800367c:	2301      	movs	r3, #1
 800367e:	71fb      	strb	r3, [r7, #7]
  }
  return suc;
 8003680:	79fb      	ldrb	r3, [r7, #7]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000014c 	.word	0x2000014c

08003690 <PreparaPaquete>:



void PreparaPaquete(uint8_t command, uint16_t param)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	460a      	mov	r2, r1
 800369a:	71fb      	strb	r3, [r7, #7]
 800369c:	4613      	mov	r3, r2
 800369e:	80bb      	strh	r3, [r7, #4]
	 *
	 * parh parl = parámetros asociados a Play y Volumen
	 * */
  unsigned int chksum;

  audio.buf[0]=0x7e;
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <PreparaPaquete+0x6c>)
 80036a2:	227e      	movs	r2, #126	; 0x7e
 80036a4:	711a      	strb	r2, [r3, #4]
  audio.buf[1]=0xff;
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <PreparaPaquete+0x6c>)
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	715a      	strb	r2, [r3, #5]
  audio.buf[2]=6;
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <PreparaPaquete+0x6c>)
 80036ae:	2206      	movs	r2, #6
 80036b0:	719a      	strb	r2, [r3, #6]
  audio.buf[3]=command;
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <PreparaPaquete+0x6c>)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	71d3      	strb	r3, [r2, #7]
  audio.buf[4]=0;
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <PreparaPaquete+0x6c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	721a      	strb	r2, [r3, #8]
  audio.buf[5]= (param>>8) &0xff;
 80036be:	88bb      	ldrh	r3, [r7, #4]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <PreparaPaquete+0x6c>)
 80036c8:	725a      	strb	r2, [r3, #9]
  audio.buf[6]= param&0xff;
 80036ca:	88bb      	ldrh	r3, [r7, #4]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <PreparaPaquete+0x6c>)
 80036d0:	729a      	strb	r2, [r3, #10]
  chksum=checksum(audio.buf);
 80036d2:	480b      	ldr	r0, [pc, #44]	; (8003700 <PreparaPaquete+0x70>)
 80036d4:	f000 f816 	bl	8003704 <checksum>
 80036d8:	4603      	mov	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]
  audio.buf[7]= (chksum>>8) &0xff;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <PreparaPaquete+0x6c>)
 80036e4:	72da      	strb	r2, [r3, #11]
  audio.buf[8]= (chksum) & 0xff;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <PreparaPaquete+0x6c>)
 80036ec:	731a      	strb	r2, [r3, #12]
  audio.buf[9]= 0xef;
 80036ee:	4b03      	ldr	r3, [pc, #12]	; (80036fc <PreparaPaquete+0x6c>)
 80036f0:	22ef      	movs	r2, #239	; 0xef
 80036f2:	735a      	strb	r2, [r3, #13]

}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2000014c 	.word	0x2000014c
 8003700:	20000150 	.word	0x20000150

08003704 <checksum>:


uint16_t checksum(uint8_t *buffer)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  int sum=0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  unsigned char i;

  for(i=1;i<7;i++)
 8003710:	2301      	movs	r3, #1
 8003712:	72fb      	strb	r3, [r7, #11]
 8003714:	e00a      	b.n	800372c <checksum+0x28>
    sum+= (int)(buffer[i]);
 8003716:	7afb      	ldrb	r3, [r7, #11]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  for(i=1;i<7;i++)
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	3301      	adds	r3, #1
 800372a:	72fb      	strb	r3, [r7, #11]
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	2b06      	cmp	r3, #6
 8003730:	d9f1      	bls.n	8003716 <checksum+0x12>
  return (0xffff -sum)+1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	b29b      	uxth	r3, r3
 8003736:	425b      	negs	r3, r3
 8003738:	b29b      	uxth	r3, r3

}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_MspInit+0x4c>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <HAL_MspInit+0x4c>)
 8003758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_MspInit+0x4c>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_MspInit+0x4c>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_MspInit+0x4c>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_MspInit+0x4c>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003786:	2007      	movs	r0, #7
 8003788:	f000 fcd6 	bl	8004138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_DAC_MspInit+0x7c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d127      	bne.n	800380a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HAL_DAC_MspInit+0x80>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a15      	ldr	r2, [pc, #84]	; (8003818 <HAL_DAC_MspInit+0x80>)
 80037c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_DAC_MspInit+0x80>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_DAC_MspInit+0x80>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <HAL_DAC_MspInit+0x80>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <HAL_DAC_MspInit+0x80>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037f2:	2330      	movs	r3, #48	; 0x30
 80037f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f6:	2303      	movs	r3, #3
 80037f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	4805      	ldr	r0, [pc, #20]	; (800381c <HAL_DAC_MspInit+0x84>)
 8003806:	f001 f9c3 	bl	8004b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40007400 	.word	0x40007400
 8003818:	40023800 	.word	0x40023800
 800381c:	40020000 	.word	0x40020000

08003820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08e      	sub	sp, #56	; 0x38
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d134      	bne.n	80038ac <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a4b      	ldr	r2, [pc, #300]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b49      	ldr	r3, [pc, #292]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	4b45      	ldr	r3, [pc, #276]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a44      	ldr	r2, [pc, #272]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b42      	ldr	r3, [pc, #264]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800387a:	2303      	movs	r3, #3
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800388a:	2301      	movs	r3, #1
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003892:	4619      	mov	r1, r3
 8003894:	4839      	ldr	r0, [pc, #228]	; (800397c <HAL_TIM_Base_MspInit+0x15c>)
 8003896:	f001 f97b 	bl	8004b90 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2100      	movs	r1, #0
 800389e:	201c      	movs	r0, #28
 80038a0:	f000 fc55 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038a4:	201c      	movs	r0, #28
 80038a6:	f000 fc6e 	bl	8004186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80038aa:	e061      	b.n	8003970 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM3)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a33      	ldr	r2, [pc, #204]	; (8003980 <HAL_TIM_Base_MspInit+0x160>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a2e      	ldr	r2, [pc, #184]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	69bb      	ldr	r3, [r7, #24]
}
 80038d2:	e04d      	b.n	8003970 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM4)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <HAL_TIM_Base_MspInit+0x164>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d135      	bne.n	800394a <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	4b25      	ldr	r3, [pc, #148]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4a24      	ldr	r2, [pc, #144]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003904:	f043 0302 	orr.w	r3, r3, #2
 8003908:	6313      	str	r3, [r2, #48]	; 0x30
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003916:	f44f 7360 	mov.w	r3, #896	; 0x380
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391c:	2302      	movs	r3, #2
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003920:	2300      	movs	r3, #0
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003924:	2300      	movs	r3, #0
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003928:	2302      	movs	r3, #2
 800392a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003930:	4619      	mov	r1, r3
 8003932:	4815      	ldr	r0, [pc, #84]	; (8003988 <HAL_TIM_Base_MspInit+0x168>)
 8003934:	f001 f92c 	bl	8004b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	2100      	movs	r1, #0
 800393c:	201e      	movs	r0, #30
 800393e:	f000 fc06 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003942:	201e      	movs	r0, #30
 8003944:	f000 fc1f 	bl	8004186 <HAL_NVIC_EnableIRQ>
}
 8003948:	e012      	b.n	8003970 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM12)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a0f      	ldr	r2, [pc, #60]	; (800398c <HAL_TIM_Base_MspInit+0x16c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10d      	bne.n	8003970 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a06      	ldr	r2, [pc, #24]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 800395e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <HAL_TIM_Base_MspInit+0x158>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
}
 8003970:	bf00      	nop
 8003972:	3738      	adds	r7, #56	; 0x38
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	40020000 	.word	0x40020000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40020400 	.word	0x40020400
 800398c:	40001800 	.word	0x40001800

08003990 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM8)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_TIM_IC_MspInit+0x94>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d133      	bne.n	8003a1a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <HAL_TIM_IC_MspInit+0x98>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <HAL_TIM_IC_MspInit+0x98>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_TIM_IC_MspInit+0x98>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_TIM_IC_MspInit+0x98>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <HAL_TIM_IC_MspInit+0x98>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6313      	str	r3, [r2, #48]	; 0x30
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_TIM_IC_MspInit+0x98>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039ea:	23c0      	movs	r3, #192	; 0xc0
 80039ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80039fa:	2303      	movs	r3, #3
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	4619      	mov	r1, r3
 8003a04:	4809      	ldr	r0, [pc, #36]	; (8003a2c <HAL_TIM_IC_MspInit+0x9c>)
 8003a06:	f001 f8c3 	bl	8004b90 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	202e      	movs	r0, #46	; 0x2e
 8003a10:	f000 fb9d 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003a14:	202e      	movs	r0, #46	; 0x2e
 8003a16:	f000 fbb6 	bl	8004186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a1a:	bf00      	nop
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40010400 	.word	0x40010400
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020800 	.word	0x40020800

08003a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <HAL_TIM_MspPostInit+0xb0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d11e      	bne.n	8003a90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_TIM_MspPostInit+0xb4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <HAL_TIM_MspPostInit+0xb4>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_TIM_MspPostInit+0xb4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a6e:	2340      	movs	r3, #64	; 0x40
 8003a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	4619      	mov	r1, r3
 8003a88:	4817      	ldr	r0, [pc, #92]	; (8003ae8 <HAL_TIM_MspPostInit+0xb8>)
 8003a8a:	f001 f881 	bl	8004b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003a8e:	e023      	b.n	8003ad8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a15      	ldr	r2, [pc, #84]	; (8003aec <HAL_TIM_MspPostInit+0xbc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d11e      	bne.n	8003ad8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_TIM_MspPostInit+0xb4>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a10      	ldr	r2, [pc, #64]	; (8003ae4 <HAL_TIM_MspPostInit+0xb4>)
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_TIM_MspPostInit+0xb4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Trigger_Pin;
 8003ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abc:	2302      	movs	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003ac8:	2309      	movs	r3, #9
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8003acc:	f107 0314 	add.w	r3, r7, #20
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4807      	ldr	r0, [pc, #28]	; (8003af0 <HAL_TIM_MspPostInit+0xc0>)
 8003ad4:	f001 f85c 	bl	8004b90 <HAL_GPIO_Init>
}
 8003ad8:	bf00      	nop
 8003ada:	3728      	adds	r7, #40	; 0x28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40020000 	.word	0x40020000
 8003aec:	40001800 	.word	0x40001800
 8003af0:	40020400 	.word	0x40020400

08003af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08e      	sub	sp, #56	; 0x38
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a91      	ldr	r2, [pc, #580]	; (8003d58 <HAL_UART_MspInit+0x264>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d163      	bne.n	8003bde <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
 8003b1a:	4b90      	ldr	r3, [pc, #576]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	4a8f      	ldr	r2, [pc, #572]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003b20:	f043 0310 	orr.w	r3, r3, #16
 8003b24:	6453      	str	r3, [r2, #68]	; 0x44
 8003b26:	4b8d      	ldr	r3, [pc, #564]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a88      	ldr	r2, [pc, #544]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b60:	2307      	movs	r3, #7
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	487d      	ldr	r0, [pc, #500]	; (8003d60 <HAL_UART_MspInit+0x26c>)
 8003b6c:	f001 f810 	bl	8004b90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003b70:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003b72:	4a7d      	ldr	r2, [pc, #500]	; (8003d68 <HAL_UART_MspInit+0x274>)
 8003b74:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003b76:	4b7b      	ldr	r3, [pc, #492]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b7e:	4b79      	ldr	r3, [pc, #484]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003b80:	2240      	movs	r2, #64	; 0x40
 8003b82:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b84:	4b77      	ldr	r3, [pc, #476]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b8a:	4b76      	ldr	r3, [pc, #472]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b90:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b92:	4b74      	ldr	r3, [pc, #464]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b98:	4b72      	ldr	r3, [pc, #456]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b9e:	4b71      	ldr	r3, [pc, #452]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003baa:	4b6e      	ldr	r3, [pc, #440]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003bb0:	486c      	ldr	r0, [pc, #432]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003bb2:	f000 fbeb 	bl	800438c <HAL_DMA_Init>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003bbc:	f7fe f9a8 	bl	8001f10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a68      	ldr	r2, [pc, #416]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bc6:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <HAL_UART_MspInit+0x270>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2100      	movs	r1, #0
 8003bd0:	2025      	movs	r0, #37	; 0x25
 8003bd2:	f000 fabc 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bd6:	2025      	movs	r0, #37	; 0x25
 8003bd8:	f000 fad5 	bl	8004186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bdc:	e0b8      	b.n	8003d50 <HAL_UART_MspInit+0x25c>
  else if(huart->Instance==USART2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a62      	ldr	r2, [pc, #392]	; (8003d6c <HAL_UART_MspInit+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d12c      	bne.n	8003c42 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	4b5b      	ldr	r3, [pc, #364]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	4a5a      	ldr	r2, [pc, #360]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf8:	4b58      	ldr	r3, [pc, #352]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	4b54      	ldr	r3, [pc, #336]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	4a53      	ldr	r2, [pc, #332]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6313      	str	r3, [r2, #48]	; 0x30
 8003c14:	4b51      	ldr	r3, [pc, #324]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c20:	230c      	movs	r3, #12
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c24:	2302      	movs	r3, #2
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c30:	2307      	movs	r3, #7
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4849      	ldr	r0, [pc, #292]	; (8003d60 <HAL_UART_MspInit+0x26c>)
 8003c3c:	f000 ffa8 	bl	8004b90 <HAL_GPIO_Init>
}
 8003c40:	e086      	b.n	8003d50 <HAL_UART_MspInit+0x25c>
  else if(huart->Instance==USART3)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4a      	ldr	r2, [pc, #296]	; (8003d70 <HAL_UART_MspInit+0x27c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	f040 8081 	bne.w	8003d50 <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	4b42      	ldr	r3, [pc, #264]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a41      	ldr	r2, [pc, #260]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7a:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	6313      	str	r3, [r2, #48]	; 0x30
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_UART_MspInit+0x268>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cba:	4619      	mov	r1, r3
 8003cbc:	482d      	ldr	r0, [pc, #180]	; (8003d74 <HAL_UART_MspInit+0x280>)
 8003cbe:	f000 ff67 	bl	8004b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cd4:	2307      	movs	r3, #7
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4826      	ldr	r0, [pc, #152]	; (8003d78 <HAL_UART_MspInit+0x284>)
 8003ce0:	f000 ff56 	bl	8004b90 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_UART_MspInit+0x28c>)
 8003ce8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cf0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cf8:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d04:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d18:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d1e:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003d24:	4815      	ldr	r0, [pc, #84]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d26:	f000 fb31 	bl	800438c <HAL_DMA_Init>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8003d30:	f7fe f8ee 	bl	8001f10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_UART_MspInit+0x288>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d40:	2200      	movs	r2, #0
 8003d42:	2100      	movs	r1, #0
 8003d44:	2027      	movs	r0, #39	; 0x27
 8003d46:	f000 fa02 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d4a:	2027      	movs	r0, #39	; 0x27
 8003d4c:	f000 fa1b 	bl	8004186 <HAL_NVIC_EnableIRQ>
}
 8003d50:	bf00      	nop
 8003d52:	3738      	adds	r7, #56	; 0x38
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40011000 	.word	0x40011000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40020000 	.word	0x40020000
 8003d64:	20000310 	.word	0x20000310
 8003d68:	400264b8 	.word	0x400264b8
 8003d6c:	40004400 	.word	0x40004400
 8003d70:	40004800 	.word	0x40004800
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	20000268 	.word	0x20000268
 8003d80:	40026058 	.word	0x40026058

08003d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d88:	e7fe      	b.n	8003d88 <NMI_Handler+0x4>

08003d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8e:	e7fe      	b.n	8003d8e <HardFault_Handler+0x4>

08003d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d94:	e7fe      	b.n	8003d94 <MemManage_Handler+0x4>

08003d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9a:	e7fe      	b.n	8003d9a <BusFault_Handler+0x4>

08003d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <UsageFault_Handler+0x4>

08003da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd0:	f7fd ffaa 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <DMA1_Stream3_IRQHandler+0x10>)
 8003dde:	f000 fc6d 	bl	80046bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000268 	.word	0x20000268

08003dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <TIM2_IRQHandler+0x10>)
 8003df2:	f002 f8ff 	bl	8005ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200003c8 	.word	0x200003c8

08003e00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <TIM4_IRQHandler+0x10>)
 8003e06:	f002 f8f5 	bl	8005ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	200001dc 	.word	0x200001dc

08003e14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e18:	4802      	ldr	r0, [pc, #8]	; (8003e24 <USART1_IRQHandler+0x10>)
 8003e1a:	f003 fa4b 	bl	80072b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000370 	.word	0x20000370

08003e28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <USART3_IRQHandler+0x10>)
 8003e2e:	f003 fa41 	bl	80072b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000224 	.word	0x20000224

08003e3c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <TIM8_CC_IRQHandler+0x10>)
 8003e42:	f002 f8d7 	bl	8005ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000194 	.word	0x20000194

08003e50 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <DMA2_Stream7_IRQHandler+0x10>)
 8003e56:	f000 fc31 	bl	80046bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000310 	.word	0x20000310

08003e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <SystemInit+0x20>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <SystemInit+0x20>)
 8003e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e8c:	480d      	ldr	r0, [pc, #52]	; (8003ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e8e:	490e      	ldr	r1, [pc, #56]	; (8003ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e90:	4a0e      	ldr	r2, [pc, #56]	; (8003ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e94:	e002      	b.n	8003e9c <LoopCopyDataInit>

08003e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e9a:	3304      	adds	r3, #4

08003e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea0:	d3f9      	bcc.n	8003e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ea2:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ea4:	4c0b      	ldr	r4, [pc, #44]	; (8003ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ea8:	e001      	b.n	8003eae <LoopFillZerobss>

08003eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eac:	3204      	adds	r2, #4

08003eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb0:	d3fb      	bcc.n	8003eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003eb2:	f7ff ffd7 	bl	8003e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eb6:	f004 f915 	bl	80080e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eba:	f7fd fab9 	bl	8001430 <main>
  bx  lr    
 8003ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8003ecc:	08008184 	.word	0x08008184
  ldr r2, =_sbss
 8003ed0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8003ed4:	20000588 	.word	0x20000588

08003ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ed8:	e7fe      	b.n	8003ed8 <ADC_IRQHandler>
	...

08003edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_Init+0x40>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <HAL_Init+0x40>)
 8003ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_Init+0x40>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <HAL_Init+0x40>)
 8003ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_Init+0x40>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <HAL_Init+0x40>)
 8003efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f04:	2003      	movs	r0, #3
 8003f06:	f000 f917 	bl	8004138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	f000 f808 	bl	8003f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f10:	f7ff fc1a 	bl	8003748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023c00 	.word	0x40023c00

08003f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f28:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_InitTick+0x54>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_InitTick+0x58>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	4619      	mov	r1, r3
 8003f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f92f 	bl	80041a2 <HAL_SYSTICK_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e00e      	b.n	8003f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b0f      	cmp	r3, #15
 8003f52:	d80a      	bhi.n	8003f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f54:	2200      	movs	r2, #0
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	f000 f8f7 	bl	800414e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f60:	4a06      	ldr	r2, [pc, #24]	; (8003f7c <HAL_InitTick+0x5c>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e000      	b.n	8003f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000034 	.word	0x20000034
 8003f78:	2000003c 	.word	0x2000003c
 8003f7c:	20000038 	.word	0x20000038

08003f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return uwTick;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_GetTick+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000584 	.word	0x20000584

08003f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <__NVIC_SetPriorityGrouping+0x44>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <__NVIC_SetPriorityGrouping+0x44>)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	60d3      	str	r3, [r2, #12]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	f003 0307 	and.w	r3, r3, #7
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	2b00      	cmp	r3, #0
 800400c:	db0b      	blt.n	8004026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	f003 021f 	and.w	r2, r3, #31
 8004014:	4907      	ldr	r1, [pc, #28]	; (8004034 <__NVIC_EnableIRQ+0x38>)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2001      	movs	r0, #1
 800401e:	fa00 f202 	lsl.w	r2, r0, r2
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	e000e100 	.word	0xe000e100

08004038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004048:	2b00      	cmp	r3, #0
 800404a:	db0a      	blt.n	8004062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	490c      	ldr	r1, [pc, #48]	; (8004084 <__NVIC_SetPriority+0x4c>)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	0112      	lsls	r2, r2, #4
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	440b      	add	r3, r1
 800405c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004060:	e00a      	b.n	8004078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4908      	ldr	r1, [pc, #32]	; (8004088 <__NVIC_SetPriority+0x50>)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	3b04      	subs	r3, #4
 8004070:	0112      	lsls	r2, r2, #4
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	440b      	add	r3, r1
 8004076:	761a      	strb	r2, [r3, #24]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f1c3 0307 	rsb	r3, r3, #7
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	bf28      	it	cs
 80040aa:	2304      	movcs	r3, #4
 80040ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3304      	adds	r3, #4
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d902      	bls.n	80040bc <NVIC_EncodePriority+0x30>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3b03      	subs	r3, #3
 80040ba:	e000      	b.n	80040be <NVIC_EncodePriority+0x32>
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	401a      	ands	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d4:	f04f 31ff 	mov.w	r1, #4294967295
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	43d9      	mvns	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	4313      	orrs	r3, r2
         );
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3724      	adds	r7, #36	; 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004104:	d301      	bcc.n	800410a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004106:	2301      	movs	r3, #1
 8004108:	e00f      	b.n	800412a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <SysTick_Config+0x40>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004112:	210f      	movs	r1, #15
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	f7ff ff8e 	bl	8004038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <SysTick_Config+0x40>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <SysTick_Config+0x40>)
 8004124:	2207      	movs	r2, #7
 8004126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	e000e010 	.word	0xe000e010

08004138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff29 	bl	8003f98 <__NVIC_SetPriorityGrouping>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	4603      	mov	r3, r0
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004160:	f7ff ff3e 	bl	8003fe0 <__NVIC_GetPriorityGrouping>
 8004164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ff8e 	bl	800408c <NVIC_EncodePriority>
 8004170:	4602      	mov	r2, r0
 8004172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff5d 	bl	8004038 <__NVIC_SetPriority>
}
 800417e:	bf00      	nop
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	4603      	mov	r3, r0
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff31 	bl	8003ffc <__NVIC_EnableIRQ>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ffa2 	bl	80040f4 <SysTick_Config>
 80041b0:	4603      	mov	r3, r0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e014      	b.n	80041f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	791b      	ldrb	r3, [r3, #4]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fadb 	bl	8003798 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	795b      	ldrb	r3, [r3, #5]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_DAC_Start+0x16>
 8004210:	2302      	movs	r3, #2
 8004212:	e040      	b.n	8004296 <HAL_DAC_Start+0x98>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004248:	2b3c      	cmp	r3, #60	; 0x3c
 800424a:	d11d      	bne.n	8004288 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	e014      	b.n	8004288 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	213c      	movs	r1, #60	; 0x3c
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	429a      	cmp	r2, r3
 8004276:	d107      	bne.n	8004288 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0202 	orr.w	r2, r2, #2
 8004286:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b087      	sub	sp, #28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d105      	bne.n	80042cc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4413      	add	r3, r2
 80042c6:	3308      	adds	r3, #8
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e004      	b.n	80042d6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	3314      	adds	r3, #20
 80042d4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	461a      	mov	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	795b      	ldrb	r3, [r3, #5]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_DAC_ConfigChannel+0x18>
 8004300:	2302      	movs	r3, #2
 8004302:	e03c      	b.n	800437e <HAL_DAC_ConfigChannel+0x92>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2202      	movs	r2, #2
 800430e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4013      	ands	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6819      	ldr	r1, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	22c0      	movs	r2, #192	; 0xc0
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	400a      	ands	r2, r1
 800436e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7ff fdf2 	bl	8003f80 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e099      	b.n	80044dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c8:	e00f      	b.n	80043ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ca:	f7ff fdd9 	bl	8003f80 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d908      	bls.n	80043ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2203      	movs	r2, #3
 80043e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e078      	b.n	80044dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e8      	bne.n	80043ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <HAL_DMA_Init+0x158>)
 8004404:	4013      	ands	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b04      	cmp	r3, #4
 8004442:	d107      	bne.n	8004454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	4313      	orrs	r3, r2
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0307 	bic.w	r3, r3, #7
 800446a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b04      	cmp	r3, #4
 800447c:	d117      	bne.n	80044ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb01 	bl	8004a98 <DMA_CheckFifoParam>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2240      	movs	r2, #64	; 0x40
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044aa:	2301      	movs	r3, #1
 80044ac:	e016      	b.n	80044dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fab8 	bl	8004a2c <DMA_CalcBaseAndBitshift>
 80044bc:	4603      	mov	r3, r0
 80044be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	223f      	movs	r2, #63	; 0x3f
 80044c6:	409a      	lsls	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	f010803f 	.word	0xf010803f

080044e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_DMA_Start_IT+0x26>
 800450a:	2302      	movs	r3, #2
 800450c:	e040      	b.n	8004590 <HAL_DMA_Start_IT+0xa8>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d12f      	bne.n	8004582 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa4a 	bl	80049d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	223f      	movs	r2, #63	; 0x3f
 8004542:	409a      	lsls	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0216 	orr.w	r2, r2, #22
 8004556:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0208 	orr.w	r2, r2, #8
 800456e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e005      	b.n	800458e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800458a:	2302      	movs	r3, #2
 800458c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045a6:	f7ff fceb 	bl	8003f80 <HAL_GetTick>
 80045aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d008      	beq.n	80045ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2280      	movs	r2, #128	; 0x80
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e052      	b.n	8004670 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0216 	bic.w	r2, r2, #22
 80045d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <HAL_DMA_Abort+0x62>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0208 	bic.w	r2, r2, #8
 8004608:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800461a:	e013      	b.n	8004644 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800461c:	f7ff fcb0 	bl	8003f80 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b05      	cmp	r3, #5
 8004628:	d90c      	bls.n	8004644 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2203      	movs	r2, #3
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e015      	b.n	8004670 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e4      	bne.n	800461c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	223f      	movs	r2, #63	; 0x3f
 8004658:	409a      	lsls	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d004      	beq.n	8004696 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2280      	movs	r2, #128	; 0x80
 8004690:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e00c      	b.n	80046b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2205      	movs	r2, #5
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046c8:	4b92      	ldr	r3, [pc, #584]	; (8004914 <HAL_DMA_IRQHandler+0x258>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a92      	ldr	r2, [pc, #584]	; (8004918 <HAL_DMA_IRQHandler+0x25c>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	0a9b      	lsrs	r3, r3, #10
 80046d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e6:	2208      	movs	r2, #8
 80046e8:	409a      	lsls	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01a      	beq.n	8004728 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0204 	bic.w	r2, r2, #4
 800470e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	2208      	movs	r2, #8
 8004716:	409a      	lsls	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f043 0201 	orr.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	2201      	movs	r2, #1
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d012      	beq.n	800475e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	2201      	movs	r2, #1
 800474c:	409a      	lsls	r2, r3
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f043 0202 	orr.w	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	2204      	movs	r2, #4
 8004764:	409a      	lsls	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d012      	beq.n	8004794 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	2204      	movs	r2, #4
 8004782:	409a      	lsls	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004798:	2210      	movs	r2, #16
 800479a:	409a      	lsls	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d043      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03c      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	2210      	movs	r2, #16
 80047b8:	409a      	lsls	r2, r3
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d108      	bne.n	80047ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d024      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
 80047ea:	e01f      	b.n	800482c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01b      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
 80047fc:	e016      	b.n	800482c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0208 	bic.w	r2, r2, #8
 800481a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	2220      	movs	r2, #32
 8004832:	409a      	lsls	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 808e 	beq.w	800495a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8086 	beq.w	800495a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	2220      	movs	r2, #32
 8004854:	409a      	lsls	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b05      	cmp	r3, #5
 8004864:	d136      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0216 	bic.w	r2, r2, #22
 8004874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004884:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <HAL_DMA_IRQHandler+0x1da>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0208 	bic.w	r2, r2, #8
 80048a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	223f      	movs	r2, #63	; 0x3f
 80048ac:	409a      	lsls	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d07d      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
        }
        return;
 80048d2:	e078      	b.n	80049c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01c      	beq.n	800491c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d030      	beq.n	800495a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
 8004900:	e02b      	b.n	800495a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d027      	beq.n	800495a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
 8004912:	e022      	b.n	800495a <HAL_DMA_IRQHandler+0x29e>
 8004914:	20000034 	.word	0x20000034
 8004918:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0210 	bic.w	r2, r2, #16
 8004938:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	2b00      	cmp	r3, #0
 8004960:	d032      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d022      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2205      	movs	r2, #5
 8004972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	3301      	adds	r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	429a      	cmp	r2, r3
 8004990:	d307      	bcc.n	80049a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f2      	bne.n	8004986 <HAL_DMA_IRQHandler+0x2ca>
 80049a0:	e000      	b.n	80049a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80049a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
 80049c4:	e000      	b.n	80049c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80049c6:	bf00      	nop
    }
  }
}
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d108      	bne.n	8004a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a0e:	e007      	b.n	8004a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	60da      	str	r2, [r3, #12]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	3b10      	subs	r3, #16
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <DMA_CalcBaseAndBitshift+0x64>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <DMA_CalcBaseAndBitshift+0x68>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d909      	bls.n	8004a6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	1d1a      	adds	r2, r3, #4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004a6c:	e007      	b.n	8004a7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	aaaaaaab 	.word	0xaaaaaaab
 8004a94:	0800816c 	.word	0x0800816c

08004a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d11f      	bne.n	8004af2 <DMA_CheckFifoParam+0x5a>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d856      	bhi.n	8004b66 <DMA_CheckFifoParam+0xce>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <DMA_CheckFifoParam+0x28>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ae3 	.word	0x08004ae3
 8004ac8:	08004ad1 	.word	0x08004ad1
 8004acc:	08004b67 	.word	0x08004b67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d046      	beq.n	8004b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae0:	e043      	b.n	8004b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aea:	d140      	bne.n	8004b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af0:	e03d      	b.n	8004b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	d121      	bne.n	8004b40 <DMA_CheckFifoParam+0xa8>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d837      	bhi.n	8004b72 <DMA_CheckFifoParam+0xda>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <DMA_CheckFifoParam+0x70>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b1f 	.word	0x08004b1f
 8004b10:	08004b19 	.word	0x08004b19
 8004b14:	08004b31 	.word	0x08004b31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1c:	e030      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d025      	beq.n	8004b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2e:	e022      	b.n	8004b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b38:	d11f      	bne.n	8004b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b3e:	e01c      	b.n	8004b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d903      	bls.n	8004b4e <DMA_CheckFifoParam+0xb6>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d003      	beq.n	8004b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b4c:	e018      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
      break;
 8004b52:	e015      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00e      	beq.n	8004b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
      break;
 8004b64:	e00b      	b.n	8004b7e <DMA_CheckFifoParam+0xe6>
      break;
 8004b66:	bf00      	nop
 8004b68:	e00a      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      break;
 8004b6a:	bf00      	nop
 8004b6c:	e008      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e006      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      break;
 8004b72:	bf00      	nop
 8004b74:	e004      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      break;
 8004b76:	bf00      	nop
 8004b78:	e002      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop

08004b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e165      	b.n	8004e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bac:	2201      	movs	r2, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	f040 8154 	bne.w	8004e72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d005      	beq.n	8004be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d130      	bne.n	8004c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	2203      	movs	r2, #3
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c18:	2201      	movs	r2, #1
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 0201 	and.w	r2, r3, #1
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d017      	beq.n	8004c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d123      	bne.n	8004cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	08da      	lsrs	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3208      	adds	r2, #8
 8004c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	220f      	movs	r2, #15
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4013      	ands	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	08da      	lsrs	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3208      	adds	r2, #8
 8004cce:	69b9      	ldr	r1, [r7, #24]
 8004cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 0203 	and.w	r2, r3, #3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80ae 	beq.w	8004e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	4b5d      	ldr	r3, [pc, #372]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	4a5c      	ldr	r2, [pc, #368]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d24:	6453      	str	r3, [r2, #68]	; 0x44
 8004d26:	4b5a      	ldr	r3, [pc, #360]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d32:	4a58      	ldr	r2, [pc, #352]	; (8004e94 <HAL_GPIO_Init+0x304>)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	089b      	lsrs	r3, r3, #2
 8004d38:	3302      	adds	r3, #2
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4013      	ands	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a4f      	ldr	r2, [pc, #316]	; (8004e98 <HAL_GPIO_Init+0x308>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d025      	beq.n	8004daa <HAL_GPIO_Init+0x21a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a4e      	ldr	r2, [pc, #312]	; (8004e9c <HAL_GPIO_Init+0x30c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01f      	beq.n	8004da6 <HAL_GPIO_Init+0x216>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a4d      	ldr	r2, [pc, #308]	; (8004ea0 <HAL_GPIO_Init+0x310>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d019      	beq.n	8004da2 <HAL_GPIO_Init+0x212>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a4c      	ldr	r2, [pc, #304]	; (8004ea4 <HAL_GPIO_Init+0x314>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_GPIO_Init+0x20e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a4b      	ldr	r2, [pc, #300]	; (8004ea8 <HAL_GPIO_Init+0x318>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00d      	beq.n	8004d9a <HAL_GPIO_Init+0x20a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a4a      	ldr	r2, [pc, #296]	; (8004eac <HAL_GPIO_Init+0x31c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <HAL_GPIO_Init+0x206>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a49      	ldr	r2, [pc, #292]	; (8004eb0 <HAL_GPIO_Init+0x320>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d101      	bne.n	8004d92 <HAL_GPIO_Init+0x202>
 8004d8e:	2306      	movs	r3, #6
 8004d90:	e00c      	b.n	8004dac <HAL_GPIO_Init+0x21c>
 8004d92:	2307      	movs	r3, #7
 8004d94:	e00a      	b.n	8004dac <HAL_GPIO_Init+0x21c>
 8004d96:	2305      	movs	r3, #5
 8004d98:	e008      	b.n	8004dac <HAL_GPIO_Init+0x21c>
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	e006      	b.n	8004dac <HAL_GPIO_Init+0x21c>
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e004      	b.n	8004dac <HAL_GPIO_Init+0x21c>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e002      	b.n	8004dac <HAL_GPIO_Init+0x21c>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_GPIO_Init+0x21c>
 8004daa:	2300      	movs	r3, #0
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	f002 0203 	and.w	r2, r2, #3
 8004db2:	0092      	lsls	r2, r2, #2
 8004db4:	4093      	lsls	r3, r2
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dbc:	4935      	ldr	r1, [pc, #212]	; (8004e94 <HAL_GPIO_Init+0x304>)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	089b      	lsrs	r3, r3, #2
 8004dc2:	3302      	adds	r3, #2
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dca:	4b3a      	ldr	r3, [pc, #232]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dee:	4a31      	ldr	r2, [pc, #196]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004df4:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e18:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e1e:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e42:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4013      	ands	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e6c:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <HAL_GPIO_Init+0x324>)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3301      	adds	r3, #1
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b0f      	cmp	r3, #15
 8004e7c:	f67f ae96 	bls.w	8004bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3724      	adds	r7, #36	; 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40013800 	.word	0x40013800
 8004e98:	40020000 	.word	0x40020000
 8004e9c:	40020400 	.word	0x40020400
 8004ea0:	40020800 	.word	0x40020800
 8004ea4:	40020c00 	.word	0x40020c00
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40021400 	.word	0x40021400
 8004eb0:	40021800 	.word	0x40021800
 8004eb4:	40013c00 	.word	0x40013c00

08004eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	887b      	ldrh	r3, [r7, #2]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
 8004ed4:	e001      	b.n	8004eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ef8:	787b      	ldrb	r3, [r7, #1]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004efe:	887a      	ldrh	r2, [r7, #2]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f04:	e003      	b.n	8004f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	041a      	lsls	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f2c:	887a      	ldrh	r2, [r7, #2]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4013      	ands	r3, r2
 8004f32:	041a      	lsls	r2, r3, #16
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	43d9      	mvns	r1, r3
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0cc      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f64:	4b68      	ldr	r3, [pc, #416]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d90c      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f72:	4b65      	ldr	r3, [pc, #404]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b63      	ldr	r3, [pc, #396]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0b8      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a58      	ldr	r2, [pc, #352]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fbc:	4b53      	ldr	r3, [pc, #332]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4a52      	ldr	r2, [pc, #328]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b50      	ldr	r3, [pc, #320]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	494d      	ldr	r1, [pc, #308]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d044      	beq.n	8005070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b47      	ldr	r3, [pc, #284]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d119      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e07f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d003      	beq.n	800500e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800500a:	2b03      	cmp	r3, #3
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500e:	4b3f      	ldr	r3, [pc, #252]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e06f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501e:	4b3b      	ldr	r3, [pc, #236]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e067      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800502e:	4b37      	ldr	r3, [pc, #220]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f023 0203 	bic.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4934      	ldr	r1, [pc, #208]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005040:	f7fe ff9e 	bl	8003f80 <HAL_GetTick>
 8005044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	e00a      	b.n	800505e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005048:	f7fe ff9a 	bl	8003f80 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e04f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	4b2b      	ldr	r3, [pc, #172]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 020c 	and.w	r2, r3, #12
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	429a      	cmp	r2, r3
 800506e:	d1eb      	bne.n	8005048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005070:	4b25      	ldr	r3, [pc, #148]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d20c      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b22      	ldr	r3, [pc, #136]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e032      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4916      	ldr	r1, [pc, #88]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	490e      	ldr	r1, [pc, #56]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050d6:	f000 f855 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	490a      	ldr	r1, [pc, #40]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 80050e8:	5ccb      	ldrb	r3, [r1, r3]
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe ff12 	bl	8003f20 <HAL_InitTick>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023c00 	.word	0x40023c00
 800510c:	40023800 	.word	0x40023800
 8005110:	08008154 	.word	0x08008154
 8005114:	20000034 	.word	0x20000034
 8005118:	20000038 	.word	0x20000038

0800511c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005120:	4b03      	ldr	r3, [pc, #12]	; (8005130 <HAL_RCC_GetHCLKFreq+0x14>)
 8005122:	681b      	ldr	r3, [r3, #0]
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000034 	.word	0x20000034

08005134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005138:	f7ff fff0 	bl	800511c <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	0a9b      	lsrs	r3, r3, #10
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4903      	ldr	r1, [pc, #12]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40023800 	.word	0x40023800
 8005158:	08008164 	.word	0x08008164

0800515c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005160:	f7ff ffdc 	bl	800511c <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	0b5b      	lsrs	r3, r3, #13
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4903      	ldr	r1, [pc, #12]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40023800 	.word	0x40023800
 8005180:	08008164 	.word	0x08008164

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005188:	b088      	sub	sp, #32
 800518a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a0:	4bce      	ldr	r3, [pc, #824]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 030c 	and.w	r3, r3, #12
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	f200 818d 	bhi.w	80054c8 <HAL_RCC_GetSysClockFreq+0x344>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051e9 	.word	0x080051e9
 80051b8:	080054c9 	.word	0x080054c9
 80051bc:	080054c9 	.word	0x080054c9
 80051c0:	080054c9 	.word	0x080054c9
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080054c9 	.word	0x080054c9
 80051cc:	080054c9 	.word	0x080054c9
 80051d0:	080054c9 	.word	0x080054c9
 80051d4:	080051f5 	.word	0x080051f5
 80051d8:	080054c9 	.word	0x080054c9
 80051dc:	080054c9 	.word	0x080054c9
 80051e0:	080054c9 	.word	0x080054c9
 80051e4:	08005369 	.word	0x08005369
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4bbd      	ldr	r3, [pc, #756]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80051ea:	61bb      	str	r3, [r7, #24]
       break;
 80051ec:	e16f      	b.n	80054ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ee:	4bbd      	ldr	r3, [pc, #756]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x360>)
 80051f0:	61bb      	str	r3, [r7, #24]
      break;
 80051f2:	e16c      	b.n	80054ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f4:	4bb9      	ldr	r3, [pc, #740]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fe:	4bb7      	ldr	r3, [pc, #732]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d053      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4bb4      	ldr	r3, [pc, #720]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	461a      	mov	r2, r3
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	ea02 0400 	and.w	r4, r2, r0
 8005222:	603c      	str	r4, [r7, #0]
 8005224:	400b      	ands	r3, r1
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	e9d7 4500 	ldrd	r4, r5, [r7]
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	014b      	lsls	r3, r1, #5
 800523a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800523e:	0142      	lsls	r2, r0, #5
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	4623      	mov	r3, r4
 8005246:	1ac0      	subs	r0, r0, r3
 8005248:	462b      	mov	r3, r5
 800524a:	eb61 0103 	sbc.w	r1, r1, r3
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	018b      	lsls	r3, r1, #6
 8005258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800525c:	0182      	lsls	r2, r0, #6
 800525e:	1a12      	subs	r2, r2, r0
 8005260:	eb63 0301 	sbc.w	r3, r3, r1
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	00d9      	lsls	r1, r3, #3
 800526e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005272:	00d0      	lsls	r0, r2, #3
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4621      	mov	r1, r4
 800527a:	1852      	adds	r2, r2, r1
 800527c:	4629      	mov	r1, r5
 800527e:	eb43 0101 	adc.w	r1, r3, r1
 8005282:	460b      	mov	r3, r1
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f04f 0100 	mov.w	r1, #0
 800528c:	0259      	lsls	r1, r3, #9
 800528e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005292:	0250      	lsls	r0, r2, #9
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	f7fb fbf6 	bl	8000a94 <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4613      	mov	r3, r2
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e04c      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b2:	4b8a      	ldr	r3, [pc, #552]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	ea02 0a00 	and.w	sl, r2, r0
 80052ca:	ea03 0b01 	and.w	fp, r3, r1
 80052ce:	4650      	mov	r0, sl
 80052d0:	4659      	mov	r1, fp
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	014b      	lsls	r3, r1, #5
 80052dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052e0:	0142      	lsls	r2, r0, #5
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	ebb0 000a 	subs.w	r0, r0, sl
 80052ea:	eb61 010b 	sbc.w	r1, r1, fp
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	018b      	lsls	r3, r1, #6
 80052f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052fc:	0182      	lsls	r2, r0, #6
 80052fe:	1a12      	subs	r2, r2, r0
 8005300:	eb63 0301 	sbc.w	r3, r3, r1
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	00d9      	lsls	r1, r3, #3
 800530e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005312:	00d0      	lsls	r0, r2, #3
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	eb12 020a 	adds.w	r2, r2, sl
 800531c:	eb43 030b 	adc.w	r3, r3, fp
 8005320:	f04f 0000 	mov.w	r0, #0
 8005324:	f04f 0100 	mov.w	r1, #0
 8005328:	0299      	lsls	r1, r3, #10
 800532a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800532e:	0290      	lsls	r0, r2, #10
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	461a      	mov	r2, r3
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	f7fb fba8 	bl	8000a94 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4613      	mov	r3, r2
 800534a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800534c:	4b63      	ldr	r3, [pc, #396]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	0c1b      	lsrs	r3, r3, #16
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	3301      	adds	r3, #1
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	61bb      	str	r3, [r7, #24]
      break;
 8005366:	e0b2      	b.n	80054ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005368:	4b5c      	ldr	r3, [pc, #368]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005370:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005372:	4b5a      	ldr	r3, [pc, #360]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d04d      	beq.n	800541a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b57      	ldr	r3, [pc, #348]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	461a      	mov	r2, r3
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800538e:	f04f 0100 	mov.w	r1, #0
 8005392:	ea02 0800 	and.w	r8, r2, r0
 8005396:	ea03 0901 	and.w	r9, r3, r1
 800539a:	4640      	mov	r0, r8
 800539c:	4649      	mov	r1, r9
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	014b      	lsls	r3, r1, #5
 80053a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053ac:	0142      	lsls	r2, r0, #5
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	ebb0 0008 	subs.w	r0, r0, r8
 80053b6:	eb61 0109 	sbc.w	r1, r1, r9
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	018b      	lsls	r3, r1, #6
 80053c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053c8:	0182      	lsls	r2, r0, #6
 80053ca:	1a12      	subs	r2, r2, r0
 80053cc:	eb63 0301 	sbc.w	r3, r3, r1
 80053d0:	f04f 0000 	mov.w	r0, #0
 80053d4:	f04f 0100 	mov.w	r1, #0
 80053d8:	00d9      	lsls	r1, r3, #3
 80053da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053de:	00d0      	lsls	r0, r2, #3
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	eb12 0208 	adds.w	r2, r2, r8
 80053e8:	eb43 0309 	adc.w	r3, r3, r9
 80053ec:	f04f 0000 	mov.w	r0, #0
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	0259      	lsls	r1, r3, #9
 80053f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80053fa:	0250      	lsls	r0, r2, #9
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	461a      	mov	r2, r3
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	f7fb fb42 	bl	8000a94 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4613      	mov	r3, r2
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	e04a      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541a:	4b30      	ldr	r3, [pc, #192]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	099b      	lsrs	r3, r3, #6
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	ea02 0400 	and.w	r4, r2, r0
 8005432:	ea03 0501 	and.w	r5, r3, r1
 8005436:	4620      	mov	r0, r4
 8005438:	4629      	mov	r1, r5
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	014b      	lsls	r3, r1, #5
 8005444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005448:	0142      	lsls	r2, r0, #5
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	1b00      	subs	r0, r0, r4
 8005450:	eb61 0105 	sbc.w	r1, r1, r5
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	018b      	lsls	r3, r1, #6
 800545e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005462:	0182      	lsls	r2, r0, #6
 8005464:	1a12      	subs	r2, r2, r0
 8005466:	eb63 0301 	sbc.w	r3, r3, r1
 800546a:	f04f 0000 	mov.w	r0, #0
 800546e:	f04f 0100 	mov.w	r1, #0
 8005472:	00d9      	lsls	r1, r3, #3
 8005474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005478:	00d0      	lsls	r0, r2, #3
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	1912      	adds	r2, r2, r4
 8005480:	eb45 0303 	adc.w	r3, r5, r3
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	0299      	lsls	r1, r3, #10
 800548e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005492:	0290      	lsls	r0, r2, #10
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	461a      	mov	r2, r3
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	f7fb faf6 	bl	8000a94 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4613      	mov	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <HAL_RCC_GetSysClockFreq+0x358>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	0f1b      	lsrs	r3, r3, #28
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	61bb      	str	r3, [r7, #24]
      break;
 80054c6:	e002      	b.n	80054ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054ca:	61bb      	str	r3, [r7, #24]
      break;
 80054cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ce:	69bb      	ldr	r3, [r7, #24]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800
 80054e0:	00f42400 	.word	0x00f42400
 80054e4:	007a1200 	.word	0x007a1200

080054e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e28d      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8083 	beq.w	800560e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005508:	4b94      	ldr	r3, [pc, #592]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 030c 	and.w	r3, r3, #12
 8005510:	2b04      	cmp	r3, #4
 8005512:	d019      	beq.n	8005548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005514:	4b91      	ldr	r3, [pc, #580]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800551c:	2b08      	cmp	r3, #8
 800551e:	d106      	bne.n	800552e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005520:	4b8e      	ldr	r3, [pc, #568]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552c:	d00c      	beq.n	8005548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552e:	4b8b      	ldr	r3, [pc, #556]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d112      	bne.n	8005560 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800553a:	4b88      	ldr	r3, [pc, #544]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005546:	d10b      	bne.n	8005560 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005548:	4b84      	ldr	r3, [pc, #528]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05b      	beq.n	800560c <HAL_RCC_OscConfig+0x124>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d157      	bne.n	800560c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e25a      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005568:	d106      	bne.n	8005578 <HAL_RCC_OscConfig+0x90>
 800556a:	4b7c      	ldr	r3, [pc, #496]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a7b      	ldr	r2, [pc, #492]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e01d      	b.n	80055b4 <HAL_RCC_OscConfig+0xcc>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0xb4>
 8005582:	4b76      	ldr	r3, [pc, #472]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a75      	ldr	r2, [pc, #468]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4b73      	ldr	r3, [pc, #460]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a72      	ldr	r2, [pc, #456]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0xcc>
 800559c:	4b6f      	ldr	r3, [pc, #444]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6e      	ldr	r2, [pc, #440]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b6c      	ldr	r3, [pc, #432]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a6b      	ldr	r2, [pc, #428]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80055ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fe fce0 	bl	8003f80 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fe fcdc 	bl	8003f80 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e21f      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	4b61      	ldr	r3, [pc, #388]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0xdc>
 80055e2:	e014      	b.n	800560e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fe fccc 	bl	8003f80 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ec:	f7fe fcc8 	bl	8003f80 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e20b      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	4b57      	ldr	r3, [pc, #348]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x104>
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d06f      	beq.n	80056fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800561a:	4b50      	ldr	r3, [pc, #320]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b00      	cmp	r3, #0
 8005624:	d017      	beq.n	8005656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005626:	4b4d      	ldr	r3, [pc, #308]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800562e:	2b08      	cmp	r3, #8
 8005630:	d105      	bne.n	800563e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005632:	4b4a      	ldr	r3, [pc, #296]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563e:	4b47      	ldr	r3, [pc, #284]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005646:	2b0c      	cmp	r3, #12
 8005648:	d11c      	bne.n	8005684 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800564a:	4b44      	ldr	r3, [pc, #272]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d116      	bne.n	8005684 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005656:	4b41      	ldr	r3, [pc, #260]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_RCC_OscConfig+0x186>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d001      	beq.n	800566e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e1d3      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566e:	4b3b      	ldr	r3, [pc, #236]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4937      	ldr	r1, [pc, #220]	; (800575c <HAL_RCC_OscConfig+0x274>)
 800567e:	4313      	orrs	r3, r2
 8005680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005682:	e03a      	b.n	80056fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d020      	beq.n	80056ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800568c:	4b34      	ldr	r3, [pc, #208]	; (8005760 <HAL_RCC_OscConfig+0x278>)
 800568e:	2201      	movs	r2, #1
 8005690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005692:	f7fe fc75 	bl	8003f80 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800569a:	f7fe fc71 	bl	8003f80 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e1b4      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ac:	4b2b      	ldr	r3, [pc, #172]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f0      	beq.n	800569a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b8:	4b28      	ldr	r3, [pc, #160]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4925      	ldr	r1, [pc, #148]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	600b      	str	r3, [r1, #0]
 80056cc:	e015      	b.n	80056fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ce:	4b24      	ldr	r3, [pc, #144]	; (8005760 <HAL_RCC_OscConfig+0x278>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fe fc54 	bl	8003f80 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056dc:	f7fe fc50 	bl	8003f80 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e193      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	4b1b      	ldr	r3, [pc, #108]	; (800575c <HAL_RCC_OscConfig+0x274>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d036      	beq.n	8005774 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <HAL_RCC_OscConfig+0x27c>)
 8005710:	2201      	movs	r2, #1
 8005712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005714:	f7fe fc34 	bl	8003f80 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800571c:	f7fe fc30 	bl	8003f80 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e173      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCC_OscConfig+0x274>)
 8005730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0x234>
 800573a:	e01b      	b.n	8005774 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <HAL_RCC_OscConfig+0x27c>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005742:	f7fe fc1d 	bl	8003f80 <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005748:	e00e      	b.n	8005768 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800574a:	f7fe fc19 	bl	8003f80 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d907      	bls.n	8005768 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e15c      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
 800575c:	40023800 	.word	0x40023800
 8005760:	42470000 	.word	0x42470000
 8005764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005768:	4b8a      	ldr	r3, [pc, #552]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800576a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1ea      	bne.n	800574a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8097 	beq.w	80058b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005786:	4b83      	ldr	r3, [pc, #524]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	4b7f      	ldr	r3, [pc, #508]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	4a7e      	ldr	r2, [pc, #504]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800579c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a0:	6413      	str	r3, [r2, #64]	; 0x40
 80057a2:	4b7c      	ldr	r3, [pc, #496]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b2:	4b79      	ldr	r3, [pc, #484]	; (8005998 <HAL_RCC_OscConfig+0x4b0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d118      	bne.n	80057f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057be:	4b76      	ldr	r3, [pc, #472]	; (8005998 <HAL_RCC_OscConfig+0x4b0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a75      	ldr	r2, [pc, #468]	; (8005998 <HAL_RCC_OscConfig+0x4b0>)
 80057c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ca:	f7fe fbd9 	bl	8003f80 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d2:	f7fe fbd5 	bl	8003f80 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e118      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	4b6c      	ldr	r3, [pc, #432]	; (8005998 <HAL_RCC_OscConfig+0x4b0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d106      	bne.n	8005806 <HAL_RCC_OscConfig+0x31e>
 80057f8:	4b66      	ldr	r3, [pc, #408]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	4a65      	ldr	r2, [pc, #404]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6713      	str	r3, [r2, #112]	; 0x70
 8005804:	e01c      	b.n	8005840 <HAL_RCC_OscConfig+0x358>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b05      	cmp	r3, #5
 800580c:	d10c      	bne.n	8005828 <HAL_RCC_OscConfig+0x340>
 800580e:	4b61      	ldr	r3, [pc, #388]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a60      	ldr	r2, [pc, #384]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005814:	f043 0304 	orr.w	r3, r3, #4
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
 800581a:	4b5e      	ldr	r3, [pc, #376]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
 8005826:	e00b      	b.n	8005840 <HAL_RCC_OscConfig+0x358>
 8005828:	4b5a      	ldr	r3, [pc, #360]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	4a59      	ldr	r2, [pc, #356]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	6713      	str	r3, [r2, #112]	; 0x70
 8005834:	4b57      	ldr	r3, [pc, #348]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a56      	ldr	r2, [pc, #344]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800583a:	f023 0304 	bic.w	r3, r3, #4
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d015      	beq.n	8005874 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005848:	f7fe fb9a 	bl	8003f80 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584e:	e00a      	b.n	8005866 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005850:	f7fe fb96 	bl	8003f80 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e0d7      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005866:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0ee      	beq.n	8005850 <HAL_RCC_OscConfig+0x368>
 8005872:	e014      	b.n	800589e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005874:	f7fe fb84 	bl	8003f80 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587a:	e00a      	b.n	8005892 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800587c:	f7fe fb80 	bl	8003f80 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f241 3288 	movw	r2, #5000	; 0x1388
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e0c1      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005892:	4b40      	ldr	r3, [pc, #256]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ee      	bne.n	800587c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d105      	bne.n	80058b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a4:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	4a3a      	ldr	r2, [pc, #232]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 80058aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80ad 	beq.w	8005a14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ba:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d060      	beq.n	8005988 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d145      	bne.n	800595a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ce:	4b33      	ldr	r3, [pc, #204]	; (800599c <HAL_RCC_OscConfig+0x4b4>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fe fb54 	bl	8003f80 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058dc:	f7fe fb50 	bl	8003f80 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e093      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	019b      	lsls	r3, r3, #6
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	3b01      	subs	r3, #1
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	061b      	lsls	r3, r3, #24
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	071b      	lsls	r3, r3, #28
 8005926:	491b      	ldr	r1, [pc, #108]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <HAL_RCC_OscConfig+0x4b4>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fe fb25 	bl	8003f80 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800593a:	f7fe fb21 	bl	8003f80 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e064      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594c:	4b11      	ldr	r3, [pc, #68]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x452>
 8005958:	e05c      	b.n	8005a14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595a:	4b10      	ldr	r3, [pc, #64]	; (800599c <HAL_RCC_OscConfig+0x4b4>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fe fb0e 	bl	8003f80 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005968:	f7fe fb0a 	bl	8003f80 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e04d      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <HAL_RCC_OscConfig+0x4ac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x480>
 8005986:	e045      	b.n	8005a14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d107      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e040      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
 8005994:	40023800 	.word	0x40023800
 8005998:	40007000 	.word	0x40007000
 800599c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059a0:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <HAL_RCC_OscConfig+0x538>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d030      	beq.n	8005a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d129      	bne.n	8005a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d122      	bne.n	8005a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059d0:	4013      	ands	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d8:	4293      	cmp	r3, r2
 80059da:	d119      	bne.n	8005a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	3b01      	subs	r3, #1
 80059ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d10f      	bne.n	8005a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d107      	bne.n	8005a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40023800 	.word	0x40023800

08005a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e041      	b.n	8005aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fd fee8 	bl	8003820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f000 fe60 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e041      	b.n	8005b58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f839 	bl	8005b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f000 fe11 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <HAL_TIM_PWM_Start+0x24>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e022      	b.n	8005bde <HAL_TIM_PWM_Start+0x6a>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d109      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0x3e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	bf14      	ite	ne
 8005baa:	2301      	movne	r3, #1
 8005bac:	2300      	moveq	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	e015      	b.n	8005bde <HAL_TIM_PWM_Start+0x6a>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d109      	bne.n	8005bcc <HAL_TIM_PWM_Start+0x58>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e008      	b.n	8005bde <HAL_TIM_PWM_Start+0x6a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e07c      	b.n	8005ce0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0x82>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf4:	e013      	b.n	8005c1e <HAL_TIM_PWM_Start+0xaa>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIM_PWM_Start+0x92>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c04:	e00b      	b.n	8005c1e <HAL_TIM_PWM_Start+0xaa>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_PWM_Start+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c14:	e003      	b.n	8005c1e <HAL_TIM_PWM_Start+0xaa>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f992 	bl	8006f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2d      	ldr	r2, [pc, #180]	; (8005ce8 <HAL_TIM_PWM_Start+0x174>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_PWM_Start+0xcc>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2c      	ldr	r2, [pc, #176]	; (8005cec <HAL_TIM_PWM_Start+0x178>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIM_PWM_Start+0xd0>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_TIM_PWM_Start+0xd2>
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <HAL_TIM_PWM_Start+0x174>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d022      	beq.n	8005caa <HAL_TIM_PWM_Start+0x136>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6c:	d01d      	beq.n	8005caa <HAL_TIM_PWM_Start+0x136>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <HAL_TIM_PWM_Start+0x17c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d018      	beq.n	8005caa <HAL_TIM_PWM_Start+0x136>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <HAL_TIM_PWM_Start+0x180>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <HAL_TIM_PWM_Start+0x136>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_TIM_PWM_Start+0x184>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00e      	beq.n	8005caa <HAL_TIM_PWM_Start+0x136>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a16      	ldr	r2, [pc, #88]	; (8005cec <HAL_TIM_PWM_Start+0x178>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d009      	beq.n	8005caa <HAL_TIM_PWM_Start+0x136>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_TIM_PWM_Start+0x188>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d004      	beq.n	8005caa <HAL_TIM_PWM_Start+0x136>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <HAL_TIM_PWM_Start+0x18c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d111      	bne.n	8005cce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b06      	cmp	r3, #6
 8005cba:	d010      	beq.n	8005cde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ccc:	e007      	b.n	8005cde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40010400 	.word	0x40010400
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	40000c00 	.word	0x40000c00
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40001800 	.word	0x40001800

08005d04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e041      	b.n	8005d9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fd fe30 	bl	8003990 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f000 fcf0 	bl	8006728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_IC_Start_IT+0x1e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e013      	b.n	8005dea <HAL_TIM_IC_Start_IT+0x46>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_IC_Start_IT+0x2e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	e00b      	b.n	8005dea <HAL_TIM_IC_Start_IT+0x46>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d104      	bne.n	8005de2 <HAL_TIM_IC_Start_IT+0x3e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	e003      	b.n	8005dea <HAL_TIM_IC_Start_IT+0x46>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <HAL_TIM_IC_Start_IT+0x58>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e013      	b.n	8005e24 <HAL_TIM_IC_Start_IT+0x80>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d104      	bne.n	8005e0c <HAL_TIM_IC_Start_IT+0x68>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e00b      	b.n	8005e24 <HAL_TIM_IC_Start_IT+0x80>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d104      	bne.n	8005e1c <HAL_TIM_IC_Start_IT+0x78>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	e003      	b.n	8005e24 <HAL_TIM_IC_Start_IT+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d102      	bne.n	8005e32 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e2c:	7b7b      	ldrb	r3, [r7, #13]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d001      	beq.n	8005e36 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e0cc      	b.n	8005fd0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <HAL_TIM_IC_Start_IT+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e44:	e013      	b.n	8005e6e <HAL_TIM_IC_Start_IT+0xca>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d104      	bne.n	8005e56 <HAL_TIM_IC_Start_IT+0xb2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e54:	e00b      	b.n	8005e6e <HAL_TIM_IC_Start_IT+0xca>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d104      	bne.n	8005e66 <HAL_TIM_IC_Start_IT+0xc2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e64:	e003      	b.n	8005e6e <HAL_TIM_IC_Start_IT+0xca>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_IC_Start_IT+0xda>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e7c:	e013      	b.n	8005ea6 <HAL_TIM_IC_Start_IT+0x102>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_IC_Start_IT+0xea>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e8c:	e00b      	b.n	8005ea6 <HAL_TIM_IC_Start_IT+0x102>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_IC_Start_IT+0xfa>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e9c:	e003      	b.n	8005ea6 <HAL_TIM_IC_Start_IT+0x102>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b0c      	cmp	r3, #12
 8005eaa:	d841      	bhi.n	8005f30 <HAL_TIM_IC_Start_IT+0x18c>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <HAL_TIM_IC_Start_IT+0x110>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ee9 	.word	0x08005ee9
 8005eb8:	08005f31 	.word	0x08005f31
 8005ebc:	08005f31 	.word	0x08005f31
 8005ec0:	08005f31 	.word	0x08005f31
 8005ec4:	08005efb 	.word	0x08005efb
 8005ec8:	08005f31 	.word	0x08005f31
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005f31 	.word	0x08005f31
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f31 	.word	0x08005f31
 8005ee0:	08005f31 	.word	0x08005f31
 8005ee4:	08005f1f 	.word	0x08005f1f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0202 	orr.w	r2, r2, #2
 8005ef6:	60da      	str	r2, [r3, #12]
      break;
 8005ef8:	e01d      	b.n	8005f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0204 	orr.w	r2, r2, #4
 8005f08:	60da      	str	r2, [r3, #12]
      break;
 8005f0a:	e014      	b.n	8005f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0208 	orr.w	r2, r2, #8
 8005f1a:	60da      	str	r2, [r3, #12]
      break;
 8005f1c:	e00b      	b.n	8005f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0210 	orr.w	r2, r2, #16
 8005f2c:	60da      	str	r2, [r3, #12]
      break;
 8005f2e:	e002      	b.n	8005f36 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
      break;
 8005f34:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d148      	bne.n	8005fce <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f803 	bl	8006f50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <HAL_TIM_IC_Start_IT+0x234>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d022      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5c:	d01d      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_TIM_IC_Start_IT+0x238>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d018      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <HAL_TIM_IC_Start_IT+0x23c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_TIM_IC_Start_IT+0x240>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00e      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <HAL_TIM_IC_Start_IT+0x244>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_TIM_IC_Start_IT+0x248>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x1f6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a16      	ldr	r2, [pc, #88]	; (8005ff0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d111      	bne.n	8005fbe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b06      	cmp	r3, #6
 8005faa:	d010      	beq.n	8005fce <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbc:	e007      	b.n	8005fce <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40001800 	.word	0x40001800

08005ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b02      	cmp	r3, #2
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0202 	mvn.w	r2, #2
 8006020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fd f970 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fb54 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fb5b 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b04      	cmp	r3, #4
 800605c:	d122      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b04      	cmp	r3, #4
 800606a:	d11b      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0204 	mvn.w	r2, #4
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fd f946 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fb2a 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fb31 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d122      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d11b      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0208 	mvn.w	r2, #8
 80060c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2204      	movs	r2, #4
 80060ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fd f91c 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fb00 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb07 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b10      	cmp	r3, #16
 8006104:	d122      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b10      	cmp	r3, #16
 8006112:	d11b      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0210 	mvn.w	r2, #16
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2208      	movs	r2, #8
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fd f8f2 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fad6 	bl	80066ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fadd 	bl	8006700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10e      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d107      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0201 	mvn.w	r2, #1
 8006170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fab0 	bl	80066d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d10e      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b80      	cmp	r3, #128	; 0x80
 8006192:	d107      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800619c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 ff82 	bl	80070a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d10e      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	d107      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 faa2 	bl	8006714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d10e      	bne.n	80061fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	d107      	bne.n	80061fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0220 	mvn.w	r2, #32
 80061f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 ff4c 	bl	8007094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_TIM_IC_ConfigChannel+0x1e>
 800621e:	2302      	movs	r3, #2
 8006220:	e088      	b.n	8006334 <HAL_TIM_IC_ConfigChannel+0x130>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d11b      	bne.n	8006268 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6819      	ldr	r1, [r3, #0]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f000 fcc2 	bl	8006bc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 020c 	bic.w	r2, r2, #12
 8006252:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6999      	ldr	r1, [r3, #24]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	619a      	str	r2, [r3, #24]
 8006266:	e060      	b.n	800632a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b04      	cmp	r3, #4
 800626c:	d11c      	bne.n	80062a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f000 fd46 	bl	8006d0e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006290:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6999      	ldr	r1, [r3, #24]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	021a      	lsls	r2, r3, #8
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	619a      	str	r2, [r3, #24]
 80062a6:	e040      	b.n	800632a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d11b      	bne.n	80062e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f000 fd93 	bl	8006de8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 020c 	bic.w	r2, r2, #12
 80062d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69d9      	ldr	r1, [r3, #28]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	61da      	str	r2, [r3, #28]
 80062e4:	e021      	b.n	800632a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b0c      	cmp	r3, #12
 80062ea:	d11c      	bne.n	8006326 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f000 fdb0 	bl	8006e60 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800630e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69d9      	ldr	r1, [r3, #28]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	61da      	str	r2, [r3, #28]
 8006324:	e001      	b.n	800632a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006332:	7dfb      	ldrb	r3, [r7, #23]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006356:	2302      	movs	r3, #2
 8006358:	e0ae      	b.n	80064b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b0c      	cmp	r3, #12
 8006366:	f200 809f 	bhi.w	80064a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080064a9 	.word	0x080064a9
 8006378:	080064a9 	.word	0x080064a9
 800637c:	080064a9 	.word	0x080064a9
 8006380:	080063e5 	.word	0x080063e5
 8006384:	080064a9 	.word	0x080064a9
 8006388:	080064a9 	.word	0x080064a9
 800638c:	080064a9 	.word	0x080064a9
 8006390:	08006427 	.word	0x08006427
 8006394:	080064a9 	.word	0x080064a9
 8006398:	080064a9 	.word	0x080064a9
 800639c:	080064a9 	.word	0x080064a9
 80063a0:	08006467 	.word	0x08006467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fa5c 	bl	8006868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0208 	orr.w	r2, r2, #8
 80063be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0204 	bic.w	r2, r2, #4
 80063ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6999      	ldr	r1, [r3, #24]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	619a      	str	r2, [r3, #24]
      break;
 80063e2:	e064      	b.n	80064ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 faac 	bl	8006948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6999      	ldr	r1, [r3, #24]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	021a      	lsls	r2, r3, #8
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	619a      	str	r2, [r3, #24]
      break;
 8006424:	e043      	b.n	80064ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fb01 	bl	8006a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69da      	ldr	r2, [r3, #28]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0208 	orr.w	r2, r2, #8
 8006440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69da      	ldr	r2, [r3, #28]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0204 	bic.w	r2, r2, #4
 8006450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69d9      	ldr	r1, [r3, #28]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	61da      	str	r2, [r3, #28]
      break;
 8006464:	e023      	b.n	80064ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fb55 	bl	8006b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69d9      	ldr	r1, [r3, #28]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	021a      	lsls	r2, r3, #8
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	61da      	str	r2, [r3, #28]
      break;
 80064a6:	e002      	b.n	80064ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	75fb      	strb	r3, [r7, #23]
      break;
 80064ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_ConfigClockSource+0x1c>
 80064d8:	2302      	movs	r3, #2
 80064da:	e0b4      	b.n	8006646 <HAL_TIM_ConfigClockSource+0x186>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006514:	d03e      	beq.n	8006594 <HAL_TIM_ConfigClockSource+0xd4>
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	f200 8087 	bhi.w	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	f000 8086 	beq.w	8006632 <HAL_TIM_ConfigClockSource+0x172>
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	d87f      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b70      	cmp	r3, #112	; 0x70
 800652e:	d01a      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0xa6>
 8006530:	2b70      	cmp	r3, #112	; 0x70
 8006532:	d87b      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b60      	cmp	r3, #96	; 0x60
 8006536:	d050      	beq.n	80065da <HAL_TIM_ConfigClockSource+0x11a>
 8006538:	2b60      	cmp	r3, #96	; 0x60
 800653a:	d877      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b50      	cmp	r3, #80	; 0x50
 800653e:	d03c      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0xfa>
 8006540:	2b50      	cmp	r3, #80	; 0x50
 8006542:	d873      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d058      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x13a>
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d86f      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b30      	cmp	r3, #48	; 0x30
 800654e:	d064      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	2b30      	cmp	r3, #48	; 0x30
 8006552:	d86b      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b20      	cmp	r3, #32
 8006556:	d060      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d867      	bhi.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006560:	2b10      	cmp	r3, #16
 8006562:	d05a      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x15a>
 8006564:	e062      	b.n	800662c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6899      	ldr	r1, [r3, #8]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f000 fccb 	bl	8006f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	609a      	str	r2, [r3, #8]
      break;
 8006592:	e04f      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	6899      	ldr	r1, [r3, #8]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f000 fcb4 	bl	8006f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065b6:	609a      	str	r2, [r3, #8]
      break;
 80065b8:	e03c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f000 fb72 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2150      	movs	r1, #80	; 0x50
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fc81 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 80065d8:	e02c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6859      	ldr	r1, [r3, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f000 fbce 	bl	8006d88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2160      	movs	r1, #96	; 0x60
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fc71 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 80065f8:	e01c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	461a      	mov	r2, r3
 8006608:	f000 fb52 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2140      	movs	r1, #64	; 0x40
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fc61 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 8006618:	e00c      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f000 fc58 	bl	8006eda <TIM_ITRx_SetConfig>
      break;
 800662a:	e003      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e000      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b0c      	cmp	r3, #12
 8006662:	d831      	bhi.n	80066c8 <HAL_TIM_ReadCapturedValue+0x78>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	080066a1 	.word	0x080066a1
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066c9 	.word	0x080066c9
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080066ab 	.word	0x080066ab
 8006680:	080066c9 	.word	0x080066c9
 8006684:	080066c9 	.word	0x080066c9
 8006688:	080066c9 	.word	0x080066c9
 800668c:	080066b5 	.word	0x080066b5
 8006690:	080066c9 	.word	0x080066c9
 8006694:	080066c9 	.word	0x080066c9
 8006698:	080066c9 	.word	0x080066c9
 800669c:	080066bf 	.word	0x080066bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	60fb      	str	r3, [r7, #12]

      break;
 80066a8:	e00f      	b.n	80066ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	60fb      	str	r3, [r7, #12]

      break;
 80066b2:	e00a      	b.n	80066ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ba:	60fb      	str	r3, [r7, #12]

      break;
 80066bc:	e005      	b.n	80066ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	60fb      	str	r3, [r7, #12]

      break;
 80066c6:	e000      	b.n	80066ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80066c8:	bf00      	nop
  }

  return tmpreg;
 80066ca:	68fb      	ldr	r3, [r7, #12]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a40      	ldr	r2, [pc, #256]	; (800683c <TIM_Base_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d013      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d00f      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a3c      	ldr	r2, [pc, #240]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a3b      	ldr	r2, [pc, #236]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a3a      	ldr	r2, [pc, #232]	; (800684c <TIM_Base_SetConfig+0x124>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2f      	ldr	r2, [pc, #188]	; (800683c <TIM_Base_SetConfig+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006788:	d027      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <TIM_Base_SetConfig+0x118>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d023      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <TIM_Base_SetConfig+0x11c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <TIM_Base_SetConfig+0x120>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a29      	ldr	r2, [pc, #164]	; (800684c <TIM_Base_SetConfig+0x124>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d017      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_Base_SetConfig+0x128>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a27      	ldr	r2, [pc, #156]	; (8006854 <TIM_Base_SetConfig+0x12c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00f      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <TIM_Base_SetConfig+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a25      	ldr	r2, [pc, #148]	; (800685c <TIM_Base_SetConfig+0x134>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a24      	ldr	r2, [pc, #144]	; (8006860 <TIM_Base_SetConfig+0x138>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a23      	ldr	r2, [pc, #140]	; (8006864 <TIM_Base_SetConfig+0x13c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a0a      	ldr	r2, [pc, #40]	; (800683c <TIM_Base_SetConfig+0x114>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0xf8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <TIM_Base_SetConfig+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d103      	bne.n	8006828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	615a      	str	r2, [r3, #20]
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40010000 	.word	0x40010000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40010400 	.word	0x40010400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800
 800685c:	40001800 	.word	0x40001800
 8006860:	40001c00 	.word	0x40001c00
 8006864:	40002000 	.word	0x40002000

08006868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f023 0201 	bic.w	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0302 	bic.w	r3, r3, #2
 80068b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a20      	ldr	r2, [pc, #128]	; (8006940 <TIM_OC1_SetConfig+0xd8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC1_SetConfig+0x64>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <TIM_OC1_SetConfig+0xdc>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d10c      	bne.n	80068e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f023 0308 	bic.w	r3, r3, #8
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 0304 	bic.w	r3, r3, #4
 80068e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <TIM_OC1_SetConfig+0xd8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_OC1_SetConfig+0x8e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a14      	ldr	r2, [pc, #80]	; (8006944 <TIM_OC1_SetConfig+0xdc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d111      	bne.n	800691a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40010000 	.word	0x40010000
 8006944:	40010400 	.word	0x40010400

08006948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f023 0210 	bic.w	r2, r3, #16
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0320 	bic.w	r3, r3, #32
 8006992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a22      	ldr	r2, [pc, #136]	; (8006a2c <TIM_OC2_SetConfig+0xe4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_OC2_SetConfig+0x68>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <TIM_OC2_SetConfig+0xe8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10d      	bne.n	80069cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <TIM_OC2_SetConfig+0xe4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC2_SetConfig+0x94>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <TIM_OC2_SetConfig+0xe8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d113      	bne.n	8006a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40010400 	.word	0x40010400

08006a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <TIM_OC3_SetConfig+0xe0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC3_SetConfig+0x66>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <TIM_OC3_SetConfig+0xe4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d10d      	bne.n	8006ab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <TIM_OC3_SetConfig+0xe0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_OC3_SetConfig+0x92>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <TIM_OC3_SetConfig+0xe4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d113      	bne.n	8006aee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	621a      	str	r2, [r3, #32]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40010400 	.word	0x40010400

08006b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	031b      	lsls	r3, r3, #12
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a12      	ldr	r2, [pc, #72]	; (8006bc0 <TIM_OC4_SetConfig+0xa4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC4_SetConfig+0x68>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <TIM_OC4_SetConfig+0xa8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	019b      	lsls	r3, r3, #6
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010400 	.word	0x40010400

08006bc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a28      	ldr	r2, [pc, #160]	; (8006c94 <TIM_TI1_SetConfig+0xcc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d017      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <TIM_TI1_SetConfig+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <TIM_TI1_SetConfig+0xd4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <TIM_TI1_SetConfig+0xd8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <TIM_TI1_SetConfig+0xdc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <TIM_TI1_SetConfig+0xe0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_TI1_SetConfig+0x66>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a20      	ldr	r2, [pc, #128]	; (8006cac <TIM_TI1_SetConfig+0xe4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d101      	bne.n	8006c32 <TIM_TI1_SetConfig+0x6a>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <TIM_TI1_SetConfig+0x6c>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e003      	b.n	8006c52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f023 030a 	bic.w	r3, r3, #10
 8006c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f003 030a 	and.w	r3, r3, #10
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00
 8006ca4:	40010400 	.word	0x40010400
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40001800 	.word	0x40001800

08006cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 030a 	bic.w	r3, r3, #10
 8006cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b087      	sub	sp, #28
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f023 0210 	bic.w	r2, r3, #16
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	031b      	lsls	r3, r3, #12
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	621a      	str	r2, [r3, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f023 0210 	bic.w	r2, r3, #16
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	031b      	lsls	r3, r3, #12
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	621a      	str	r2, [r3, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 0303 	bic.w	r3, r3, #3
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	621a      	str	r2, [r3, #32]
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	031b      	lsls	r3, r3, #12
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	031b      	lsls	r3, r3, #12
 8006eb8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	621a      	str	r2, [r3, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f043 0307 	orr.w	r3, r3, #7
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	2201      	movs	r2, #1
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1a      	ldr	r2, [r3, #32]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	401a      	ands	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1a      	ldr	r2, [r3, #32]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e05a      	b.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a21      	ldr	r2, [pc, #132]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d01d      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1d      	ldr	r2, [pc, #116]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a18      	ldr	r2, [pc, #96]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a17      	ldr	r2, [pc, #92]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10c      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4313      	orrs	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40010400 	.word	0x40010400
 800708c:	40014000 	.word	0x40014000
 8007090:	40001800 	.word	0x40001800

08007094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e03f      	b.n	800714e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fc fd06 	bl	8003af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fe27 	bl	8007d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	4613      	mov	r3, r2
 8007162:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b20      	cmp	r3, #32
 800716e:	d11d      	bne.n	80071ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_UART_Receive_IT+0x26>
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e016      	b.n	80071ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_UART_Receive_IT+0x38>
 800718a:	2302      	movs	r3, #2
 800718c:	e00f      	b.n	80071ae <HAL_UART_Receive_IT+0x58>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	461a      	mov	r2, r3
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fbd9 	bl	800795a <UART_Start_Receive_IT>
 80071a8:	4603      	mov	r3, r0
 80071aa:	e000      	b.n	80071ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	; 0x30
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d165      	bne.n	800729e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_UART_Transmit_DMA+0x26>
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e05e      	b.n	80072a0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_UART_Transmit_DMA+0x38>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e057      	b.n	80072a0 <HAL_UART_Transmit_DMA+0xe8>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2221      	movs	r2, #33	; 0x21
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	4a22      	ldr	r2, [pc, #136]	; (80072a8 <HAL_UART_Transmit_DMA+0xf0>)
 800721e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007224:	4a21      	ldr	r2, [pc, #132]	; (80072ac <HAL_UART_Transmit_DMA+0xf4>)
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722c:	4a20      	ldr	r2, [pc, #128]	; (80072b0 <HAL_UART_Transmit_DMA+0xf8>)
 800722e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007234:	2200      	movs	r2, #0
 8007236:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007238:	f107 0308 	add.w	r3, r7, #8
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	6819      	ldr	r1, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3304      	adds	r3, #4
 800724c:	461a      	mov	r2, r3
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	f7fd f94a 	bl	80044e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800725c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	617b      	str	r3, [r7, #20]
   return(result);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727c:	62bb      	str	r3, [r7, #40]	; 0x28
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3314      	adds	r3, #20
 8007284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007286:	627a      	str	r2, [r7, #36]	; 0x24
 8007288:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6a39      	ldr	r1, [r7, #32]
 800728c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	61fb      	str	r3, [r7, #28]
   return(result);
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e5      	bne.n	8007266 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e000      	b.n	80072a0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3730      	adds	r7, #48	; 0x30
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	08007811 	.word	0x08007811
 80072ac:	080078ab 	.word	0x080078ab
 80072b0:	080078c7 	.word	0x080078c7

080072b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b0ba      	sub	sp, #232	; 0xe8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072da:	2300      	movs	r3, #0
 80072dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10f      	bne.n	800731a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <HAL_UART_IRQHandler+0x66>
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc62 	bl	8007bdc <UART_Receive_IT>
      return;
 8007318:	e256      	b.n	80077c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800731a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80de 	beq.w	80074e0 <HAL_UART_IRQHandler+0x22c>
 8007324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 80d1 	beq.w	80074e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <HAL_UART_IRQHandler+0xae>
 800734a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f043 0201 	orr.w	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00b      	beq.n	8007386 <HAL_UART_IRQHandler+0xd2>
 800736e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	f043 0202 	orr.w	r2, r3, #2
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <HAL_UART_IRQHandler+0xf6>
 8007392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	f043 0204 	orr.w	r2, r3, #4
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d011      	beq.n	80073da <HAL_UART_IRQHandler+0x126>
 80073b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d105      	bne.n	80073ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d005      	beq.n	80073da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	f043 0208 	orr.w	r2, r3, #8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 81ed 	beq.w	80077be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d008      	beq.n	8007402 <HAL_UART_IRQHandler+0x14e>
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fbed 	bl	8007bdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740c:	2b40      	cmp	r3, #64	; 0x40
 800740e:	bf0c      	ite	eq
 8007410:	2301      	moveq	r3, #1
 8007412:	2300      	movne	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <HAL_UART_IRQHandler+0x17a>
 8007426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d04f      	beq.n	80074ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 faf5 	bl	8007a1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d141      	bne.n	80074c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3314      	adds	r3, #20
 8007448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800745c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3314      	adds	r3, #20
 800746a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800746e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800747a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1d9      	bne.n	8007442 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	2b00      	cmp	r3, #0
 8007494:	d013      	beq.n	80074be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749a:	4a7d      	ldr	r2, [pc, #500]	; (8007690 <HAL_UART_IRQHandler+0x3dc>)
 800749c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fd f8e8 	bl	8004678 <HAL_DMA_Abort_IT>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074bc:	e00e      	b.n	80074dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f990 	bl	80077e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c4:	e00a      	b.n	80074dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f98c 	bl	80077e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	e006      	b.n	80074dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f988 	bl	80077e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074da:	e170      	b.n	80077be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074dc:	bf00      	nop
    return;
 80074de:	e16e      	b.n	80077be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	f040 814a 	bne.w	800777e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ee:	f003 0310 	and.w	r3, r3, #16
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 8143 	beq.w	800777e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fc:	f003 0310 	and.w	r3, r3, #16
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 813c 	beq.w	800777e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007506:	2300      	movs	r3, #0
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60bb      	str	r3, [r7, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	f040 80b4 	bne.w	8007694 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8140 	beq.w	80077c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800754a:	429a      	cmp	r2, r3
 800754c:	f080 8139 	bcs.w	80077c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007556:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007562:	f000 8088 	beq.w	8007676 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800757c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	330c      	adds	r3, #12
 800758e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800759e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1d9      	bne.n	8007566 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3314      	adds	r3, #20
 80075b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3314      	adds	r3, #20
 80075d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e1      	bne.n	80075b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e3      	bne.n	80075ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	330c      	adds	r3, #12
 800763a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	f023 0310 	bic.w	r3, r3, #16
 800764a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007658:	65ba      	str	r2, [r7, #88]	; 0x58
 800765a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800765e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e3      	bne.n	8007634 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007670:	4618      	mov	r0, r3
 8007672:	f7fc ff91 	bl	8004598 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800767e:	b29b      	uxth	r3, r3
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	b29b      	uxth	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f8b6 	bl	80077f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800768c:	e099      	b.n	80077c2 <HAL_UART_IRQHandler+0x50e>
 800768e:	bf00      	nop
 8007690:	08007ae5 	.word	0x08007ae5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800769c:	b29b      	uxth	r3, r3
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 808b 	beq.w	80077c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 8086 	beq.w	80077c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076de:	647a      	str	r2, [r7, #68]	; 0x44
 80076e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e3      	bne.n	80076ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3314      	adds	r3, #20
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	623b      	str	r3, [r7, #32]
   return(result);
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	f023 0301 	bic.w	r3, r3, #1
 8007708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3314      	adds	r3, #20
 8007712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007716:	633a      	str	r2, [r7, #48]	; 0x30
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800771c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e3      	bne.n	80076f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	60fb      	str	r3, [r7, #12]
   return(result);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0310 	bic.w	r3, r3, #16
 800774e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800775c:	61fa      	str	r2, [r7, #28]
 800775e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	69b9      	ldr	r1, [r7, #24]
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	617b      	str	r3, [r7, #20]
   return(result);
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e3      	bne.n	8007738 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f83e 	bl	80077f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800777c:	e023      	b.n	80077c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <HAL_UART_IRQHandler+0x4ea>
 800778a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800778e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f9b8 	bl	8007b0c <UART_Transmit_IT>
    return;
 800779c:	e014      	b.n	80077c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00e      	beq.n	80077c8 <HAL_UART_IRQHandler+0x514>
 80077aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d008      	beq.n	80077c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9f8 	bl	8007bac <UART_EndTransmit_IT>
    return;
 80077bc:	e004      	b.n	80077c8 <HAL_UART_IRQHandler+0x514>
    return;
 80077be:	bf00      	nop
 80077c0:	e002      	b.n	80077c8 <HAL_UART_IRQHandler+0x514>
      return;
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <HAL_UART_IRQHandler+0x514>
      return;
 80077c6:	bf00      	nop
  }
}
 80077c8:	37e8      	adds	r7, #232	; 0xe8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop

080077d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b090      	sub	sp, #64	; 0x40
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d137      	bne.n	800789c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800782c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782e:	2200      	movs	r2, #0
 8007830:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	623b      	str	r3, [r7, #32]
   return(result);
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
 800784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3314      	adds	r3, #20
 8007850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007852:	633a      	str	r2, [r7, #48]	; 0x30
 8007854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e5      	bne.n	8007832 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	330c      	adds	r3, #12
 800786c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	60fb      	str	r3, [r7, #12]
   return(result);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
 800787e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007886:	61fa      	str	r2, [r7, #28]
 8007888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	69b9      	ldr	r1, [r7, #24]
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	617b      	str	r3, [r7, #20]
   return(result);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800789a:	e002      	b.n	80078a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800789c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800789e:	f7f9 fc39 	bl	8001114 <HAL_UART_TxCpltCallback>
}
 80078a2:	bf00      	nop
 80078a4:	3740      	adds	r7, #64	; 0x40
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f7ff ff89 	bl	80077d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	bf0c      	ite	eq
 80078e6:	2301      	moveq	r3, #1
 80078e8:	2300      	movne	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b21      	cmp	r3, #33	; 0x21
 80078f8:	d108      	bne.n	800790c <UART_DMAError+0x46>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007906:	68b8      	ldr	r0, [r7, #8]
 8007908:	f000 f861 	bl	80079ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	bf0c      	ite	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	2300      	movne	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b22      	cmp	r3, #34	; 0x22
 800792c:	d108      	bne.n	8007940 <UART_DMAError+0x7a>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800793a:	68b8      	ldr	r0, [r7, #8]
 800793c:	f000 f86f 	bl	8007a1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	f043 0210 	orr.w	r2, r3, #16
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800794c:	68b8      	ldr	r0, [r7, #8]
 800794e:	f7ff ff49 	bl	80077e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	4613      	mov	r3, r2
 8007966:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	88fa      	ldrh	r2, [r7, #6]
 8007978:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2222      	movs	r2, #34	; 0x22
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800799e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695a      	ldr	r2, [r3, #20]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0220 	orr.w	r2, r2, #32
 80079be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b089      	sub	sp, #36	; 0x24
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	330c      	adds	r3, #12
 80079dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079ec:	61fb      	str	r3, [r7, #28]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	61ba      	str	r2, [r7, #24]
 80079f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6979      	ldr	r1, [r7, #20]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	613b      	str	r3, [r7, #16]
   return(result);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e5      	bne.n	80079d6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a12:	bf00      	nop
 8007a14:	3724      	adds	r7, #36	; 0x24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b095      	sub	sp, #84	; 0x54
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a46:	643a      	str	r2, [r7, #64]	; 0x40
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f023 0301 	bic.w	r3, r3, #1
 8007a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3314      	adds	r3, #20
 8007a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d119      	bne.n	8007aca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f023 0310 	bic.w	r3, r3, #16
 8007aac:	647b      	str	r3, [r7, #68]	; 0x44
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab6:	61ba      	str	r2, [r7, #24]
 8007ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6979      	ldr	r1, [r7, #20]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ad8:	bf00      	nop
 8007ada:	3754      	adds	r7, #84	; 0x54
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fe70 	bl	80077e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b21      	cmp	r3, #33	; 0x21
 8007b1e:	d13e      	bne.n	8007b9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b28:	d114      	bne.n	8007b54 <UART_Transmit_IT+0x48>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d110      	bne.n	8007b54 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	1c9a      	adds	r2, r3, #2
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	621a      	str	r2, [r3, #32]
 8007b52:	e008      	b.n	8007b66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	1c59      	adds	r1, r3, #1
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6211      	str	r1, [r2, #32]
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	4619      	mov	r1, r3
 8007b74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10f      	bne.n	8007b9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e000      	b.n	8007ba0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b9e:	2302      	movs	r3, #2
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7f9 faa1 	bl	8001114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	; 0x30
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b22      	cmp	r3, #34	; 0x22
 8007bee:	f040 80ab 	bne.w	8007d48 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfa:	d117      	bne.n	8007c2c <UART_Receive_IT+0x50>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d113      	bne.n	8007c2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	1c9a      	adds	r2, r3, #2
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	629a      	str	r2, [r3, #40]	; 0x28
 8007c2a:	e026      	b.n	8007c7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3e:	d007      	beq.n	8007c50 <UART_Receive_IT+0x74>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <UART_Receive_IT+0x82>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d106      	bne.n	8007c5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	701a      	strb	r2, [r3, #0]
 8007c5c:	e008      	b.n	8007c70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4619      	mov	r1, r3
 8007c88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d15a      	bne.n	8007d44 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0220 	bic.w	r2, r2, #32
 8007c9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695a      	ldr	r2, [r3, #20]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d135      	bne.n	8007d3a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	e853 3f00 	ldrex	r3, [r3]
 8007ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f023 0310 	bic.w	r3, r3, #16
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf4:	623a      	str	r2, [r7, #32]
 8007cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	69f9      	ldr	r1, [r7, #28]
 8007cfa:	6a3a      	ldr	r2, [r7, #32]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e5      	bne.n	8007cd4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d10a      	bne.n	8007d2c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff fd60 	bl	80077f8 <HAL_UARTEx_RxEventCallback>
 8007d38:	e002      	b.n	8007d40 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7f9 f9d4 	bl	80010e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	e002      	b.n	8007d4a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3730      	adds	r7, #48	; 0x30
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	b09f      	sub	sp, #124	; 0x7c
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	68d9      	ldr	r1, [r3, #12]
 8007d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	ea40 0301 	orr.w	r3, r0, r1
 8007d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	431a      	orrs	r2, r3
 8007d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d98:	f021 010c 	bic.w	r1, r1, #12
 8007d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007da2:	430b      	orrs	r3, r1
 8007da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db2:	6999      	ldr	r1, [r3, #24]
 8007db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	ea40 0301 	orr.w	r3, r0, r1
 8007dbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4bc5      	ldr	r3, [pc, #788]	; (80080d8 <UART_SetConfig+0x384>)
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d004      	beq.n	8007dd2 <UART_SetConfig+0x7e>
 8007dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	4bc3      	ldr	r3, [pc, #780]	; (80080dc <UART_SetConfig+0x388>)
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d103      	bne.n	8007dda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dd2:	f7fd f9c3 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 8007dd6:	6778      	str	r0, [r7, #116]	; 0x74
 8007dd8:	e002      	b.n	8007de0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dda:	f7fd f9ab 	bl	8005134 <HAL_RCC_GetPCLK1Freq>
 8007dde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de8:	f040 80b6 	bne.w	8007f58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dee:	461c      	mov	r4, r3
 8007df0:	f04f 0500 	mov.w	r5, #0
 8007df4:	4622      	mov	r2, r4
 8007df6:	462b      	mov	r3, r5
 8007df8:	1891      	adds	r1, r2, r2
 8007dfa:	6439      	str	r1, [r7, #64]	; 0x40
 8007dfc:	415b      	adcs	r3, r3
 8007dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8007e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e04:	1912      	adds	r2, r2, r4
 8007e06:	eb45 0303 	adc.w	r3, r5, r3
 8007e0a:	f04f 0000 	mov.w	r0, #0
 8007e0e:	f04f 0100 	mov.w	r1, #0
 8007e12:	00d9      	lsls	r1, r3, #3
 8007e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e18:	00d0      	lsls	r0, r2, #3
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	1911      	adds	r1, r2, r4
 8007e20:	6639      	str	r1, [r7, #96]	; 0x60
 8007e22:	416b      	adcs	r3, r5
 8007e24:	667b      	str	r3, [r7, #100]	; 0x64
 8007e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e34:	415b      	adcs	r3, r3
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007e40:	f7f8 fe28 	bl	8000a94 <__aeabi_uldivmod>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4ba5      	ldr	r3, [pc, #660]	; (80080e0 <UART_SetConfig+0x38c>)
 8007e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	011e      	lsls	r6, r3, #4
 8007e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e54:	461c      	mov	r4, r3
 8007e56:	f04f 0500 	mov.w	r5, #0
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	1891      	adds	r1, r2, r2
 8007e60:	6339      	str	r1, [r7, #48]	; 0x30
 8007e62:	415b      	adcs	r3, r3
 8007e64:	637b      	str	r3, [r7, #52]	; 0x34
 8007e66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e6a:	1912      	adds	r2, r2, r4
 8007e6c:	eb45 0303 	adc.w	r3, r5, r3
 8007e70:	f04f 0000 	mov.w	r0, #0
 8007e74:	f04f 0100 	mov.w	r1, #0
 8007e78:	00d9      	lsls	r1, r3, #3
 8007e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e7e:	00d0      	lsls	r0, r2, #3
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	1911      	adds	r1, r2, r4
 8007e86:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e88:	416b      	adcs	r3, r5
 8007e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	461a      	mov	r2, r3
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	1891      	adds	r1, r2, r2
 8007e98:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e9a:	415b      	adcs	r3, r3
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ea2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ea6:	f7f8 fdf5 	bl	8000a94 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4b8c      	ldr	r3, [pc, #560]	; (80080e0 <UART_SetConfig+0x38c>)
 8007eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	2164      	movs	r1, #100	; 0x64
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	3332      	adds	r3, #50	; 0x32
 8007ec2:	4a87      	ldr	r2, [pc, #540]	; (80080e0 <UART_SetConfig+0x38c>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ed0:	441e      	add	r6, r3
 8007ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f04f 0100 	mov.w	r1, #0
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	1894      	adds	r4, r2, r2
 8007ee0:	623c      	str	r4, [r7, #32]
 8007ee2:	415b      	adcs	r3, r3
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eea:	1812      	adds	r2, r2, r0
 8007eec:	eb41 0303 	adc.w	r3, r1, r3
 8007ef0:	f04f 0400 	mov.w	r4, #0
 8007ef4:	f04f 0500 	mov.w	r5, #0
 8007ef8:	00dd      	lsls	r5, r3, #3
 8007efa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007efe:	00d4      	lsls	r4, r2, #3
 8007f00:	4622      	mov	r2, r4
 8007f02:	462b      	mov	r3, r5
 8007f04:	1814      	adds	r4, r2, r0
 8007f06:	653c      	str	r4, [r7, #80]	; 0x50
 8007f08:	414b      	adcs	r3, r1
 8007f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	461a      	mov	r2, r3
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	1891      	adds	r1, r2, r2
 8007f18:	61b9      	str	r1, [r7, #24]
 8007f1a:	415b      	adcs	r3, r3
 8007f1c:	61fb      	str	r3, [r7, #28]
 8007f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f26:	f7f8 fdb5 	bl	8000a94 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4b6c      	ldr	r3, [pc, #432]	; (80080e0 <UART_SetConfig+0x38c>)
 8007f30:	fba3 1302 	umull	r1, r3, r3, r2
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	2164      	movs	r1, #100	; 0x64
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	3332      	adds	r3, #50	; 0x32
 8007f42:	4a67      	ldr	r2, [pc, #412]	; (80080e0 <UART_SetConfig+0x38c>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	f003 0207 	and.w	r2, r3, #7
 8007f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4432      	add	r2, r6
 8007f54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f56:	e0b9      	b.n	80080cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f5a:	461c      	mov	r4, r3
 8007f5c:	f04f 0500 	mov.w	r5, #0
 8007f60:	4622      	mov	r2, r4
 8007f62:	462b      	mov	r3, r5
 8007f64:	1891      	adds	r1, r2, r2
 8007f66:	6139      	str	r1, [r7, #16]
 8007f68:	415b      	adcs	r3, r3
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f70:	1912      	adds	r2, r2, r4
 8007f72:	eb45 0303 	adc.w	r3, r5, r3
 8007f76:	f04f 0000 	mov.w	r0, #0
 8007f7a:	f04f 0100 	mov.w	r1, #0
 8007f7e:	00d9      	lsls	r1, r3, #3
 8007f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f84:	00d0      	lsls	r0, r2, #3
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	eb12 0804 	adds.w	r8, r2, r4
 8007f8e:	eb43 0905 	adc.w	r9, r3, r5
 8007f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f04f 0100 	mov.w	r1, #0
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	008b      	lsls	r3, r1, #2
 8007fa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007faa:	0082      	lsls	r2, r0, #2
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 fd70 	bl	8000a94 <__aeabi_uldivmod>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4b49      	ldr	r3, [pc, #292]	; (80080e0 <UART_SetConfig+0x38c>)
 8007fba:	fba3 2302 	umull	r2, r3, r3, r2
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	011e      	lsls	r6, r3, #4
 8007fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f04f 0100 	mov.w	r1, #0
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	1894      	adds	r4, r2, r2
 8007fd0:	60bc      	str	r4, [r7, #8]
 8007fd2:	415b      	adcs	r3, r3
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fda:	1812      	adds	r2, r2, r0
 8007fdc:	eb41 0303 	adc.w	r3, r1, r3
 8007fe0:	f04f 0400 	mov.w	r4, #0
 8007fe4:	f04f 0500 	mov.w	r5, #0
 8007fe8:	00dd      	lsls	r5, r3, #3
 8007fea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fee:	00d4      	lsls	r4, r2, #3
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	1814      	adds	r4, r2, r0
 8007ff6:	64bc      	str	r4, [r7, #72]	; 0x48
 8007ff8:	414b      	adcs	r3, r1
 8007ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	f04f 0100 	mov.w	r1, #0
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008014:	0082      	lsls	r2, r0, #2
 8008016:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800801a:	f7f8 fd3b 	bl	8000a94 <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4b2f      	ldr	r3, [pc, #188]	; (80080e0 <UART_SetConfig+0x38c>)
 8008024:	fba3 1302 	umull	r1, r3, r3, r2
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	2164      	movs	r1, #100	; 0x64
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	3332      	adds	r3, #50	; 0x32
 8008036:	4a2a      	ldr	r2, [pc, #168]	; (80080e0 <UART_SetConfig+0x38c>)
 8008038:	fba2 2303 	umull	r2, r3, r2, r3
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008042:	441e      	add	r6, r3
 8008044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008046:	4618      	mov	r0, r3
 8008048:	f04f 0100 	mov.w	r1, #0
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	1894      	adds	r4, r2, r2
 8008052:	603c      	str	r4, [r7, #0]
 8008054:	415b      	adcs	r3, r3
 8008056:	607b      	str	r3, [r7, #4]
 8008058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805c:	1812      	adds	r2, r2, r0
 800805e:	eb41 0303 	adc.w	r3, r1, r3
 8008062:	f04f 0400 	mov.w	r4, #0
 8008066:	f04f 0500 	mov.w	r5, #0
 800806a:	00dd      	lsls	r5, r3, #3
 800806c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008070:	00d4      	lsls	r4, r2, #3
 8008072:	4622      	mov	r2, r4
 8008074:	462b      	mov	r3, r5
 8008076:	eb12 0a00 	adds.w	sl, r2, r0
 800807a:	eb43 0b01 	adc.w	fp, r3, r1
 800807e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	4618      	mov	r0, r3
 8008084:	f04f 0100 	mov.w	r1, #0
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	008b      	lsls	r3, r1, #2
 8008092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008096:	0082      	lsls	r2, r0, #2
 8008098:	4650      	mov	r0, sl
 800809a:	4659      	mov	r1, fp
 800809c:	f7f8 fcfa 	bl	8000a94 <__aeabi_uldivmod>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <UART_SetConfig+0x38c>)
 80080a6:	fba3 1302 	umull	r1, r3, r3, r2
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	2164      	movs	r1, #100	; 0x64
 80080ae:	fb01 f303 	mul.w	r3, r1, r3
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	3332      	adds	r3, #50	; 0x32
 80080b8:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <UART_SetConfig+0x38c>)
 80080ba:	fba2 2303 	umull	r2, r3, r2, r3
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	f003 020f 	and.w	r2, r3, #15
 80080c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4432      	add	r2, r6
 80080ca:	609a      	str	r2, [r3, #8]
}
 80080cc:	bf00      	nop
 80080ce:	377c      	adds	r7, #124	; 0x7c
 80080d0:	46bd      	mov	sp, r7
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	bf00      	nop
 80080d8:	40011000 	.word	0x40011000
 80080dc:	40011400 	.word	0x40011400
 80080e0:	51eb851f 	.word	0x51eb851f

080080e4 <__libc_init_array>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4d0d      	ldr	r5, [pc, #52]	; (800811c <__libc_init_array+0x38>)
 80080e8:	4c0d      	ldr	r4, [pc, #52]	; (8008120 <__libc_init_array+0x3c>)
 80080ea:	1b64      	subs	r4, r4, r5
 80080ec:	10a4      	asrs	r4, r4, #2
 80080ee:	2600      	movs	r6, #0
 80080f0:	42a6      	cmp	r6, r4
 80080f2:	d109      	bne.n	8008108 <__libc_init_array+0x24>
 80080f4:	4d0b      	ldr	r5, [pc, #44]	; (8008124 <__libc_init_array+0x40>)
 80080f6:	4c0c      	ldr	r4, [pc, #48]	; (8008128 <__libc_init_array+0x44>)
 80080f8:	f000 f820 	bl	800813c <_init>
 80080fc:	1b64      	subs	r4, r4, r5
 80080fe:	10a4      	asrs	r4, r4, #2
 8008100:	2600      	movs	r6, #0
 8008102:	42a6      	cmp	r6, r4
 8008104:	d105      	bne.n	8008112 <__libc_init_array+0x2e>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f855 3b04 	ldr.w	r3, [r5], #4
 800810c:	4798      	blx	r3
 800810e:	3601      	adds	r6, #1
 8008110:	e7ee      	b.n	80080f0 <__libc_init_array+0xc>
 8008112:	f855 3b04 	ldr.w	r3, [r5], #4
 8008116:	4798      	blx	r3
 8008118:	3601      	adds	r6, #1
 800811a:	e7f2      	b.n	8008102 <__libc_init_array+0x1e>
 800811c:	0800817c 	.word	0x0800817c
 8008120:	0800817c 	.word	0x0800817c
 8008124:	0800817c 	.word	0x0800817c
 8008128:	08008180 	.word	0x08008180

0800812c <memset>:
 800812c:	4402      	add	r2, r0
 800812e:	4603      	mov	r3, r0
 8008130:	4293      	cmp	r3, r2
 8008132:	d100      	bne.n	8008136 <memset+0xa>
 8008134:	4770      	bx	lr
 8008136:	f803 1b01 	strb.w	r1, [r3], #1
 800813a:	e7f9      	b.n	8008130 <memset+0x4>

0800813c <_init>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr

08008148 <_fini>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr
